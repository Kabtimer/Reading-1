Multiple Access Class Barring factors Algorithm for M2M communications in LTE-Advanced Networks

Meriam Bouzouita

Yassine Hadjadj-Aoul

University of Rennes, Rennes, University of Rennes, Rennes,

France

France

SUP’COM, Ariana, Tunisia

yhadjadj@irisa.fr

mariem.bouzouita@supcom.tn

Nawel Zangar
SUP’COM, Tunisia
nawel.zangar@insat.rnu.tn

Gerardo Rubino

Sami Tabbane

INRIA, Rennes

SUP’COM, Tunisia

Gerardo.Rubino@inria.fr Sami.Tabbane@insat.rnu.tn

ABSTRACT
The forecast dramatic growth, of the number of Machine-toMachine (M2M) communications, challenges the traditional networks of Mobile Network Operators (MNO). In fact, a large number of devices may attempt simultaneously to access the base station, which may result in severe congestions at the random-access channel (RACH) level. To alleviate such congestion while regulating the M2M devices’ opportunities to transmit, the Access Class Barring (ACB) process was proposed. In this article, we propose a novel implementation of the ACB mechanism in the context of multiple M2M traﬃc classes. Based on a scheduling algorithm, we have applied a PID controller to adjust dynamically multiple ACB factors related to each class category, guaranteeing a number of devices around an optimal value that maximizes the Random Access (RA) success probability. The obtained results demonstrate the eﬃciency of the proposed mechanism by increasing the success probability and minimizing radio resources’ underutilization with respect to each class priority.
Keywords
M2M, MTC, Access Class Barring, Congestion, Random Access.

applications covering a large number of domains [1]. These applications can be classiﬁed based on their intrinsic characteristics (e.g. event driven) and the corresponding trafﬁc requirements. For instance, we can identify the most important MTC scenarios such as: surveillance and remote monitoring, smart metering, emergency use cases, ﬂeet management, etc [2].
The huge number of M2M devices, which may attempt, at the same time, to access the base station, may result in severe congestions at the random-access channel (RACH) level. In fact, a large number of devices may be triggered simultaneously and attempt to perform the Random Access (RA) in order to request for uplink radio resources. This congestion is even more aggravated when considering the class of event-driven communications, in which a large number of devices is activated during a very short period of time. These devices contend for a limited number of resources, called preambles. Indeed, if two or more MTC equipments choose the same preamble, the Evolved Node B (eNB) will be unable to identify the initiator of the RA and a collision will happen [3]. This may reduce the success access probability and may result in a performance degradation for MNO.

1. INTRODUCTION
Machine Type Communications (MTC) or Machine-to-Machine (M2M) communications are nowadays gaining a huge interest from the stakeholders, and particularly the Mobile Network Operators (MNO), and their customers. In fact, M2M communications are seen as one of the most important opportunities to face the revenue’s cuts for mobile operators while providing a plethora of services to the customers.
These services can be declined in a wide range of automated

In this paper, our main concern is to design an eﬃcient mechanism to maximize the wireless resources’ utilization while guaranteeing the access priorities that may exist between the diﬀerent class of applications. Another important concern consists in protecting the M2M event-driven communications by prioritizing their access to the channel while adapting rapidly the ACB factors to absorb this type of trafﬁc.
To achieve this objective, we proposed both: (1) a Proportional Integral Derivative (PID) controller to make the number of M2M devices attempting the access procedure converge to the optimal one, and (2) a scheduling algorithm to ensure a weighted proportional fairness among M2M devices of the diﬀerent classes except the class of event-driven devices, which is prioritized.

The remainder of this article is organized as follows. Section 2 provides an overview of the ACB mechanism. Section 3 is dedicated to the description of the proposed mechanism.

Section 4 portrays the simulation setup and discusses the obtained results. Finally, the paper concludes in Section 5 with a summary recapping the main advantages and achievements of the proposed scheme.

2. BACKGROUND
To tackle the problem of RACH congestion, many overload resolution methods were proposed in the literature [4]. The ACB mechanism, which can be used in conjunction with other approaches, is considered as one of the most efﬁcient ones, as it handles the problem at its root. Indeed, this mechanism allows resources’ saving by dissuading some M2M devices from attempting to perform the RA.
The main idea behind the ACB mechanism, in LTE-Advanced networks, is to broadcast a barring factor ac-BarringFactor and a barring time ac-BarringTime, which are used by an M2M device to determine whether it is temporarily barred from accessing the network.
The ac-BarringFactor determines the probability that a device is allowed or not to attempt to access the wireless resources. Before attempting the RA and establishing a connection, every device should ﬁrst pass the ACB check.
Initially, each device generates a uniform random number q in the interval [0, 1]. If q is less than the ACB factor, the device starts the RA procedure; otherwise, the device will be blocked during a barring duration. Thus, if the value of this factor is properly set, this may help to ensure both small contentions on radio resources and low access delays for MTC devices.
Using the ac-BarringTime, each MTC device determines the blocking duration Tbarring before retrying a second ACB attempt after a ﬁrst failed trial. This duration is calculated as follows:
Tbarring = (0.7 + 0.6 ∗ qb) ∗ ac-BarringTime
where qb represents a uniform random number in the interval [0, 1] generated by the MTC device after a ﬁrst failed ACB check [5].
The whole ACB process executed by the M2M devices is illustrated in Fig. 1.

Receives ac-BarringFactor from eNB

Generates a random number q

Tbarring

q ≤ ac-BarringFactor

no

yes Starts RA Figure 1: ACB procedure

Many research works investigated the ACB scheme to reduce the congestion impacts. In [6], the authors proposed a cooperation among eNBs as a way to eliminate the substantial defects existing in the classical ACB. The scheme distributes eﬃciently the load between eNBs and improves signiﬁcantly the access delays. However, in this approach, the number of devices that attach to the eNBs are not considered, which limits the eﬃciency of the mechanism in reducing the contention for a particular cell. The authors in [7] address this last limitation, by considering the number of MTC devices to determine the probability that an equipment may access the eNB, which allows obtaining a better set of ACB parameters than the one devised in [6]. In [8], a new heuristic algorithm was proposed in order to adaptively change the ACB factor without prerequisite knowledge of the number of backlogged users. The obtained results show that the proposed heuristic algorithm achieves good performance as it reduces signiﬁcantly the access delays. However, this approach lacks responsiveness and is based on several parameters. The tuning of these could considerably inﬂuence the eﬀectiveness of the approach.
We propose in this paper a new method adapting dynamically, in real-time, the ACB factor according to both the contention’s level and the M2M classes.
3. MULTIPLE ACCESS CLASS BARRING ALGORITHM
M2M devices’ scheduling is one of the most important functions, which not only ensures avoiding the congestion in such contention-based access networks, but also guarantees the access for prioritized applications and weighted fairness for the others. This is particularly important for some M2M applications (i.e. event-driven), as the huge number of devices, which attempt to connect during a very short period of time, increases signiﬁcantly the risk of congestion collapse.
Many ACB-based algorithms were proposed in the literature. However, most of them do not consider multi-class M2M devices. Thus, the obtained ACB factor is applied to all classes of M2M devices, which might be harmful for MNO networks. The originality of our approach resides, ﬁrst, in considering devices belonging to diﬀerent classes. Second, in opposition to existing works, we propose to ﬁnd out the optimal number of devices and devising, then, an eﬃcient controller to make the number of devices attempting the RA converge to the optimal one.
3.1 System Model
In this paper, we consider the classical architecture described in [1]. We propose, in the following, to model the RA process, as described in [3].
Our model for M2M devices’ random access with multiple ACB factors (i.e. one factor per class) is illustrated in the following diagram. The model is a ﬂuid one: the involved quantities, the whole numbers, are seen here as real quantities. The parameters used in the proposed system model are listed below:
• x1,i(t): the number of backlogged MTC devices from class i at time t, where i ∈ {1, 2, . . . , k}. The constant

k represents the number of considered classes.
• x2(t): the number of MTC devices that pass the ACB check and wait to start RA attempt at time t.
• x3(t): the number of MTC devices that succeed RA procedure at time t.
• λi: the arrival rate of MTC devices from class i ∈ {1, 2, . . . , k}. Diﬀerent traﬃc patterns will be considered in the following, depending on the type of M2M application.

set of classes. The system’s dynamics is described by the following system of diﬀerential equations:

 dx1,i

  

dt

=

λi − pix1,i

− θ1,ix1,i,

for all i ∈ C,



 

dx2

 dt 

=

k
pix1,i − Rs(x2) − θ2x2,
i=1

(1)

  

dx3



dt

= Rs(x2) − µx3,

with the constraints that for all i ∈ C, x1,i, x2 and x3 should be nonnegative.

• θ1,i(x1,i): the rate of ACB failure for class i ∈ {1, 2, . . . , k}.
• θ2(x2): the rate of RA failures (i.e. collision and retransmission).

The function Rs(x2) is represented by the expected number of MTC devices succeeding in the access process. This number represents the number of preambles with only one device.

• µ(x3): the rate of MTC departure after performing the RA successfully.
• pi(x1,i): the ACB factor for class i ∈ {1, 2, . . . , k}.
• N : indicates the total number of radio resources (preambles) available during one time slot. It is a constant value.
• Rs(x2): denotes the number of MTC devices that transmitted their preambles successfully.

Let’s deﬁne Ps as the probability that a given preamble is chosen by one MTC device (i.e. probability of success). To that purpose, we suppose that there are N available preambles in each RA opportunity and x2 MTC devices contending for these resources. This is a typical “balls into bins’ problem”, in which Ps is given by:

Ps

=

x2 N

1 1−
N

x2 − 1 .

(2)

For a large N , this can be approximated by:

For the sake of clarity, we consider, in the ﬁgure below, only

three classes of M2M devices (i.e. k = 3).

λ1

x1,1

Ps

=

x2 N

− x2 − 1 eN

.

(3)

Therefore,

θ1,1x1,1

p1x1,1

λ2

x1,2

p2x1,2

x2

Rs(x2)

x3

µ

θ1,2x1,2

p3x1,3

θ2x2

λ3

x1,3

θ1,3x1,3

Figure 2: System description
Note that the system model illustrated above is inﬂuenced by the single-class system model proposed in [9].
Now we are ready to describe the evolution of the states x1,i with i ∈ {1, 2, . . . , k}, x2 and x3 based on the model described in Fig. 2. Let ﬁrst deﬁne C = {1, 2, . . . , k} as the

− x2 − 1

Rs(x2) = x2e N .

(4)

The collision probability Pc can be derived using (3) and the idle probability (i.e. no user chooses a given preamble):

Pc

=

1

−

x2 N

x2 −
−
eN

1

−

− x2 eN

.

(5)

To validate the proposed model, we will compare, in the performance and evaluation section, the analytical results of success and collision probabilities with those obtained by simulation.
3.2 Optimal number of M2M devices
The main idea, in this section, is to derive an optimal number of contending M2M devices x2 in a way to be used by the proposed controller as an objective to achieve (i.e. targeted number of M2M devices).
All devices that have passed successfully the ACB test, will contend for the same radio resources (N ) as a way to access the network. The optimal value of devices, performing RA

Number of successful RA

30 25 20 15 10
5 0
20

40

60

80

100

120

140

Number of M2M devices in x2

Figure 3: Successful RA

The probability Pacb, calculated in (6), is general and do not concern a particular class of traﬃc. Thus, the probability Paicb for each class of service i ∈ C is derived from this value, as described in the next section. These values are broadcasted through a signaling channel to the diﬀerent classes of M2M applications.
3.4 Proposed algorithm
In this subsection, we describe in details the proposed algorithm, which is illustrated in the ﬁgure below, to compute multiple ACB factors for the diﬀerent classes of applications.
(1) Init: init k; xr2ef := N − 3; n := 1; pai cb := 1, ∀i ∈ C; init wi, ∀i ∈ C

at the same time (i.e. xr2ef) and maximizing the success probability, is obtained based on Monte-Carlo simulation.
For the simulations, we vary the number of M2M devices between 1 and 150 devices. We evaluated the average and the variance on the number of successful RA. To validate the obtained results, many seeds were tested and the results, obtained in Fig. 3, were similar.
The simulation results, depicted in Fig. 3, show that the maximum number of successful RA is obtained when the number of M2M devices in x2 is equal to (N − 3). This number will be adopted as the optimal value (i.e. the targeted value) to generate the appropriate ACB factor in our scheduling algorithm.
3.3 PID feedback control on the access probability
In the proposed approach, the dynamic adjustment of the ACB factor (i.e. access probability) is achieved using a discrete Proportional Integral Derivative (PID) regulator [10]. The main idea, behind, is to make the total number of MTC devices, contending for the access, converges to the targeted value, which is deﬁned in the previous subsection.
The discrete PID regulator can be described by the following equation [10]:
n
Pacb(n) = Kpe(n) + Ki e(k) + Kd(e(n) − e(n − 1)) (6)
k=0
where n, Pacb, e, Kp, Ki and Kd represent respectively the instant, the controller output, the diﬀerence between the measured value and the set point value (i.e. the targeted value), the proportional gain, the integral gain and the derivative gain. In order to get the ideal response of the system, we considered the Ziegler-Nichols method [11] for the tuning of PID parameters.
As Pacb is a probability, a saturation block1 is added to bind the values within the interval [0, 1].
1A component imposing higher and lower bounds.

(2) Estimate the error e: Estimate: xˆ1,i, ∀i ∈ C;
k
xˆ2 := pai cbxˆ1,i;
i=1
e(n) := xr2ef − xˆ2(n);

(3) Calculate x∗2:
n
Pacb := Kpe(n) + Ki e(k) + Kd(e(n) − e(n − 1));
k=0
Pacb := min (max (Pacb, 0) , 1);
k
x*2 := Pacb xˆ1,i;
i=1

yes

xˆ1,1 ≤ x∗2

no

(4.a) Calculate pai cb, ∀i ∈ C:

pa1cb f :=

:= 1;

x∗2 − xˆ1,1

k i=2

wi

;

pai cb

:=

wif xˆ1,i

,

∀i

∈

C − {1, 2};

pa2cb

:=

x∗2 − xˆ1,1 − xˆ1,2

k i=2

wif

;

(4.b) Calculate

pa1cb

:=

x∗2 xˆ1,1

;

pai cb,

∀i

∈

C:

pai cb := 0, ∀i ∈ C − {1};

n + +;
Figure 4: Scheduling Algorithm
After a phase of initialization (at phase 1), the eNB estimates the error (i.e. e) to be used thereafter in the PID regulator (at phase 2). The error reﬂects the distance between the obtained value of the number of contending devices x2 at step n and the targeted value xr2ef. Therefore, the eNB estimates the number of successful ACB tests xˆ2 by estimating the states x1,i, for all i ∈ C (i.e. xˆ1,i, for all i ∈ C).

These estimates can be easily obtained by a per-class counting of the number of devices that have passed successfully the ACB test and by averaging these obtained values using an Exponentially Weighted Moving Average (EWMA).

After that (at phase 3), the eNB uses the PID controller to
adjust the ACB factor (i.e. Pacb) enabling to converge towards the targeted number of contending devices (i.e. xr2ef). As the output of the PID controller should be a probability,
in spite of considering Pacb, we consider only values within the interval [0, 1] by applying the: min(max(Pacb, 0), 1). The computation of the blocking probability Pacb allows generating an optimal number of equipments that should pass successfully the ACB process (i.e. x*2) based on the estimated xˆ1,i, for all i ∈ C (see phase 3).

In the proposed algorithm, we considered the ﬁrst class as

the most prioritized by using an absolute priority access, as

it is the case for some M2M applications such as emergency

services. The access probabilities of the devices belonging

to other classes are balanced using a weight factor wi, for all i ∈ C. Depending on the availability of preambles for the

ﬁrst class, we pass by phase (4.a) or (4.b). Phase (4.b) is

executed when there are not enough preambles to grant the

access to all the devices of the ﬁrst class (i.e. x*2 is smaller than xˆ1,1). In this case the blocking probability for class 1 is

calculated to have an optimal number of contending devices

for

this

class

p1acb

=

. x*2
xˆ1,1

The

devices

from

the

other

classes

are blocked. When there are enough preambles to grant the

access for all the devices in class 1, phase (4.a) is executed.

In this case, p1acb is equal to one (i.e. all the devices from the class are accepted), and the access is shared fairly between

the other classes depending on the weight of each class (i.e.

weighted fairness).

Once the ACB factors generation process is ﬁnished, it is broadcasted through a signaling channel to all the equipments, which should update their access probability and start ACB check. Then, the operation is repeated from phase 2, after incrementing the step variable n.

Note that the broadcasting of the access probabilities is repeated for each frame, which represents a delay of 10ms. Other delays might be considered for a less important accuracy and reactivity. The considered delay is short but represents a negligible overhead.

4. PERFORMANCE EVALUATION 4.1 Simulation parameters
Having described the details of the proposed algorithm to calculate a per-class ACB factor for heterogeneous M2M devices, we direct now our focus on evaluating its performance using the “Network Simulator (ns3)” environment [12].

The proposed model supports an unlimited and conﬁgurable number of types of M2M applications. However, for the simulations, we considered only the following classes:

• Emergency applications: this category of M2M applications includes prioritized services, triggered in emergency situations such as seismic alarms, which must be processed as fast as possible. Thus, this category

requires the highest rate of successful accesses. It corresponds to class 1 in our model. As described in [13], emergency applications’ arrival follows a Beta-based traﬃc model.
• Applications for remote control and surveillance: this category represents a class of M2M application with a good level of priority and continuous data transmission [14]. The model of arrival of this type of applications corresponds to a uniform process.
• Smart-grid-related applications: this category includes smart grid metering, water metering, gas metering, etc. A large number of devices with a reasonably large amount of data is periodically transferred to eNB and, thus, causing RAN overload. Such applications have a very low priority of access with delay-tolerance and can be rejected in case of congestion. The periodic arrival of smart-grid related devices is also modeled with a uniform-based process.

The parameters’ settings are listed in table 1. The duration of the simulation corresponds to the distribution period of the most critical traﬃc (i.e. class 1). More details on the traﬃc patterns can be found in [13].

Table 1: Simulation parameters

Parameters Simulation Time Number of eNBs Total number of preambles Cell bandwidth Maximum number of preamble
retransmissions ac-BarringTime Total number of MTC devices Number of devices in class 1 Number of devices in class 2 Number of devices in class 3 Beta distribution time Beta function parameters

Values 10s 1 54 5MHz
10 4s 10000 1000 3000 6000 10s α = 3; β = 4

4.2 Simulations results
To validate the proposed model deﬁned in (2), we will present, in this subsection, the analytical values of success and collision probabilities against the ones obtained using simulation. Then, we will give the number of successful ACB tests compared with the targeted value (i.e. optimal value as found in section 3.2) to demonstrate the eﬀectiveness of our proposal. Finally, we show the eﬃciency of the proposed solution in prioritizing the diﬀerent M2M applications and by comparing the estimated and the measured values of x1,i, for all i ∈ C.
Figures 5 and 6 show the simulation results obtained respectively for the success probability and the collision probability against those obtained theoretically. It can be seen that the simulation results match very well the theoretical values, which allow validating the proposal model.
Figure 7 illustrates the instantaneous and the average (i.e. EWMA) number of successful ACB tests. We can easily see

Success Probability (%)

60

80

Simulation

successful ACB

Analysis

Average successful ACB

50

70

target

Nbr of successful ACB tests

40

60

30

50

20

40

10

30

00

2

4

6

8

10

200

2

4

6

8

10

Time (s)

Time (s)

Figure 5: Success Probability

Figure 7: Total successful ACB tests vs Setpoint

Collision Probability (%)

40

Simulation

35

Analysis

30

25

20

15

10

5

00

2

4

6

8

10

Time (s)

Figure 6: Collision Probability

that even if the instantaneous values oscillate between 30 and 70, the average values remain very close to the targeted value (i.e. 51), which is the objective of our mechanism. This, clearly, demonstrates the eﬀectiveness of the PID controller as it helps in regulating the ACB factor dynamically according to the congestion level and the M2M application classes.
Note that values smaller than the target may lead to resources’ underutilization, while values bigger than the target may lead to excessive collisions, which also lead to resources’ underutilization.
To see the eﬃciency of the proposed algorithm in prioritiz-

ing diﬀerent classes of M2M applications, let see the results obtained in Fig. 8. Figure 8 depicts the cumulative number of successful ACB tests for each class of M2M applications in ﬁgures (B) compared with the cumulative number of arrivals for each class in ﬁgures (A). It can be easily seen that the number of arrivals for class 1 is nearly equal to the number of successful ACB tests, which is in a complete conformance with the absolute constraint requirements for this category of traﬃc.

(A)

800

800

700

Class 1

700

Class 1

600

600

500

500

400

400

300

300

200

200

100

100

00

2

4

6

8

10

00

2

4

6

8

10

800

800

700

Class 2

700

Class 2

600

600

500

500

(B)

400

400

300

300

200

200

100

100

00

2

4

6

8

10

00

2

4

6

8

10

800

800

700

Class 3

700

Class 3

600

600

500

500

400

400

300

300

200

200

100

100

00

2

4

6

8

10

00

2

4

6

8

10

Time (s)

Time (s)

Figure 8: (A) Cumulative number of arrivals per second (B) Cumulative number of successful ACB tests per second

Another important observation, in Fig. 8, is that when the congestion is at its maximum (between seconds 2 and 8) the traﬃc of class 2 suﬀers from some degradation as some of the traﬃc is blocked. However, the blocking probability of this traﬃc class, which has a weight bigger than class 3, is low. This has direct consequences on the large number of successful ACB tests for this class. On the other hand, the

less prioritized class (i.e. class 3) suﬀer from the beginning from blocked traﬃc. The phenomenon is exacerbated when the congestion is at its peak, as it can be seen in Fig. 8. In fact, given that devices of class 3 have the lowest priority, they will be blocked in case of congestion, i.e. when arrivals of class 1 and class 2 are more important. Consequently, it results in reducing collision probability as it is observed in ﬁgure 6.

x1,1

x1,2

25

20

Estimated x1,1

15

Measured x1,1

10

5

7000

2

4

6

8

10

60 50 40 30

Estimated x1,2 Measured x1,2

20

10

43300050

2

4

6

8

10

Estimated x1,3

22110505

Measured x1,3

5

986570000000

2

4

6

8

10

Estimated total Measured total

423100000

2

4

6

8

10

Time (s)

x1,3

total

Figure 9: Estimated vs measured values of x1,i, for all i ∈ C
Another way to test the performances of the proposed algorithm can be achieved by comparing the estimated values of x1,i, for all i ∈ C against the calculated ones. As illustrated in Fig. 9, it can be easily observed that estimated values for x1,1 match the measured ones, which prove the eﬃciency of the estimation regarding the strict requirements of traﬃc of class 1. We can also observe a small shift between the estimated and the measured values for class 2. Such shift becomes larger for class 3, because of the number of ACB retries after the blocking duration (i.e. Tbarring) in case of congestion.
Another important observation, in Fig. 9, is that when the arrivals of class 1 are too small (between seconds 0 and 2), the estimated values of x1,2 are bigger than the measured ones as the access is granted to all the devices of the second class. The constant values of measured x1,2 (between seconds 0 and 2) are due to uniform traﬃc type of class 2.
5. CONCLUSIONS AND FUTURE WORK
In this paper, the RAN overload issue caused by MTC in LTE-Advanced networks has been addressed. We have proposed a novel mechanism as a way to alleviate RAN congestion by eﬃciently managing the M2M devices’ random accesses.
The proposed access control mechanism constitutes a novel implementation of the ACB mechanism. To that purpose, we presented a ﬂuid model with multiple M2M traﬃc classes in order to satisfy varied QoS requirements. This scheme utilizes multiple ACB factors each one representing the probability to compete for the access based on M2M class priority.
Using Monte-Carlo simulations, we ﬁnd out the optimal

number of the MTC devices that should compete for the random access to maximize the number of devices succeeding in the ACB procedure. After that, in order to regulate adaptively the ACB factor guaranteeing a total number of devices around the targeted value, we used a discrete PID controller. Then, we applied a scheduling algorithm as a way to schedule diﬀerent M2M traﬃc classes.
In order to evaluate the performances of the proposed model, we have conducted simulation tests under ns3. Simulation results show that the proposed mechanism can accurately predict congestion situations by reducing the collision probability. Therefore, even if the arrival rates of the diﬀerent supported classes become more important, the total successful ACB tests remains very close to the optimal value. The results, also, demonstrated the eﬀectiveness of the proposed scheme as it allow respecting the strict QoS requirements of the most prioritized classes by blocking the MTC devices belonging to the less prioritized classes. This clearly allows reducing the congestion by insuring an increased RA success probability.
As future work, we plan to apply optimal non aﬃne nonlinear control theory foundation to derive, directly, the optimal blocking probability for each class.
6. REFERENCES
[1] 3GPP TR 23.888 V1.6.0 (2011-11), Third generation partnership project; Technical speciﬁcation group services and system aspects; “System improvements for machine-type communications,” (Release 11).
[2] Geng Wu, Shilpa Talwar, Kerstin Johnsson, Nageen Himayat, and Kevin D. Johnson, “M2M: From Mobile to Embedded Internet,” IEEE Communications Magazine, April 2011.
[3] 3GPP TS 36.321 V10.2.0 (2011-06): “Medium Access Control (MAC) protocol speciﬁcation,” Jun. 2011.
[4] A. Ksentini, Y. Hadjadj-Aoul, T. Taleb, “Cellular-based machine-to-machine: overload control,” Network, IEEE , vol.26, no.6, pp.54,60, November 2012.
[5] 3GPP TS 36.331 V10.2.0: “Evolved Universal Terrestrial Radio Access (E-UTRA); Radio Resource Control (RRC);” Protocol speciﬁcation (Release 10). Jun. 2011.
[6] Lien SY, Liau TH, Kao CY, Chen KC, “Cooperative Access Class Barring for Machine-to-Machine Communications,” IEEE Transactions on Wireless Communications, vol. 11, no. 1, pp. 27-32, January 2012.
[7] Yi-Huai Hsu, Kuochen Wang, Yu-Chee Tseng, “Enhanced cooperative access class barring and traﬃc adaptive radio resource management for M2M communications over LTE-A,” published in Signal and Information Processing Association Annual Summit and Conference (APSIPA), Asia-Paciﬁc, Oct. 29 2013-Nov. 1 2013.
[8] Duan S, Shah-Mansouri V, Wong VWS, “Dynamic Access Class Barring for M2M Communications in LTE Networks,” submitted to IEEE Global Communications Conference (GLOBECOM), Atlanta, GA, Dec. 2013.
[9] Bouzouita M, Hadjadj-Aoul Y, Zangar N, Tabbane S and Viho C, “A random access model for M2M

communications in LTE-advanced mobile networks,” Modeling and Simulation of Computer Networks and Systems, Elsevier, 2015.
[10] Astrom K.J., Hagglund T., “Advanced PID Control,” ISA-The Instrumentation, Systems, and Automation Society, ISBN 1556179421, 2006.
[11] Hang CC, Astrom KJ, Ho WK., “Reﬁnements of the Ziegler Nichols tuning formula,” IEEE Proc-D 1991;138(2).
[12] NS-3 Consortium. ns-3. Oﬃcial website. Available at:“http://www.nsnam.org/”; 2015.
[13] 3GPP TR 37.868 V11.0.0 (2011-09) Third generation partnership project (3GPP). Technical speciﬁcation group radio access network; “Study on RAN Improvements for Machine-type Communications,” (Release 11).
[14] Petiz I, Salvador P, Nogueira A, “Characterization and modeling of M2M video surveillance traﬃc,” The Fourth International Conference on Advances in Future Internet (AFIN), 2012.

