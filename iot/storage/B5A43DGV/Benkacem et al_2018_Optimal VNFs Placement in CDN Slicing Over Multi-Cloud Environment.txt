This is an electronic reprint of the original article. This reprint may differ from the original in pagination and typographic detail.
Benkacem, Ilias; Taleb, Tarik; Bagaa, Miloud; Flinck, Hannu Optimal VNFs placement in CDN Slicing over Multi-Cloud Environment
Published in: IEEE Journal on Selected Areas in Communications DOI: 10.1109/JSAC.2018.2815441 Published: 12/03/2018 Document Version Peer reviewed version Please cite the original version: Benkacem, I., Taleb, T., Bagaa, M., & Flinck, H. (2018). Optimal VNFs placement in CDN Slicing over MultiCloud Environment. IEEE Journal on Selected Areas in Communications, 36(3), 616-627. https://doi.org/10.1109/JSAC.2018.2815441
This material is protected by copyright and other intellectual property rights, and duplication or sale of all or part of any of the repository collections is not permitted, except that material may be duplicated by you for your research use or educational purposes in electronic or print form. You must obtain permission for any other use. Electronic or print copies may not be offered, whether for sale or otherwise to anyone who is not an authorised user.
Powered by TCPDF (www.tcpdf.org)

Optimal VNFs Placement in CDN Slicing Over Multi-Cloud Environment
Ilias Benkacem, Tarik Taleb, Miloud Bagaa, and Hannu Flinck

Abstract— This paper introduces a content delivery network as a service (CDNaaS) platform that allows dynamic deployment and life-cycle management of virtual content delivery network (CDN) slices running across multiple administrative cloud domains. The CDN slice consists of four virtual network function (VNF) types, namely virtual transcoders, virtual streamers, virtual caches, and a CDN-slice-speciﬁc Coordinator for the management of the slice resources across the involved cloud domains. To create an efﬁcient CDN slice, the optimal placement of its composing VNFs using adequate amount of virtual resources for each VNF is of vital importance. In this vein, this paper devises mechanisms for allocating an appropriate set of VNFs for each CDN slice to meet its performance requirements and minimize as much as possible the incurred cost in terms of allocated virtual resources. A mathematical model is developed to evaluate the performance of the proposed mechanisms. We ﬁrst formulate the VNF placement problem as two Linear Integer problem models, aiming at minimizing the cost and maximizing the quality of experience (QoE) of the virtual streaming service. By applying the bargaining game theory, we ensure an optimal tradeoff solution between the cost efﬁciency and QoE. Extensive simulations are conducted to evaluate the effectiveness of the proposed models in achieving their design objectives and encouraging results are obtained.
Index Terms— Content delivery network, network function virtualization (NFV), slicing, network softwarization, edge cloud, optimization, bargaining game theory.
I. INTRODUCTION
O VER the last decade, Content Delivery Networks (CDNs) have played a valuable role in hosting and
distributing content to users. Thanks to its architecture that
consists of multiple servers distributed geographically, con-
tent is replicated across a wide area and has accordingly
become highly available. Several studies have demonstrated
Manuscript received October 1, 2017; revised February 5, 2018; accepted February 27, 2018. Date of publication March 12, 2018; date of current version May 21, 2018. This work was supported in part by the Academy of Finland Project CSN under Grant 311654 and in part by the European Union’s Horizon 2020 Research and Innovation Program through the 5G!Pagoda Project under Grant 723172. This paper was presented in part at the proceedings of the 2018 edition of the IEEE Wireless Communications and Networking Conference [1] and the 2017 edition of IEEE International Conference on Communications [2]. (Corresponding author: Ilias Benkacem.)
I. Benkacem and M. Bagaa are with the Department of Communications and Networking, School of Electrical Engineering, Aalto University, 02150 Espoo, Finland (e-mail: ilias.benkacem@aalto.ﬁ; miloud.bagaa@aalto.ﬁ).
T. Taleb is with the Department of Communications and Networking, School of Electrical Engineering, Aalto University, 02150 Espoo, Finland, and also with Sejong University, Seoul 143-747, South Korea (e-mail: tarik.taleb@aalto.ﬁ).
H. Flinck is with Nokia Bell Labs, FI-02610 Espoo, Finland (e-mail: hannu.ﬂinck@nokia-bell-labs.com).
Color versions of one or more of the ﬁgures in this paper are available online at http://ieeexplore.ieee.org.
Digital Object Identiﬁer 10.1109/JSAC.2018.2815441

the effectiveness of CDNs in improving the Quality of Experience (QoE) by making applications and services faster and more reliable [3]–[5]. Furthermore, the CDN concept has helped many renowned companies to develop and to expand their revenues. CDNs can improve the access to content by caching content nearby end-users, leveraging many distributed caches collaborating to deliver content across different network nodes. Hence, CDN providers have distributed topologies around the world. Moreover, these CDN providers have two types of users, namely (i) the customers – CDN administrators who must pay fees to the supplier; and (ii) CDN clients – the end users who download content through the CDNs.
Cloud providers own a number of globally distributed data centers which are expanding continuously. Their different services, including compute, storage, network, and virtualization, allow both elasticity and ﬂexibility in service deployment. Most cloud providers use machine virtualization to provide ﬂexible and cost-effective resources, and the price can vary depending on the computation resources demanded by the Virtual Network Functions (VNFs). Recently, a great number of companies such as Amazon, Google, and Microsoft, have launched their cloud service businesses. Nowadays, users rent machine instances with different capabilities as needed and pay at a certain per machine hour billing rate. For example, the Amazon EC2 solution supports the instantiation of multiple VNF instances on a single physical server. However, CDN infrastructure can beneﬁt from these virtualization techniques and gain geographically dispersed nodes in large-scale [6].
To deliver content to end users with QoE guarantees, a CDN administrator should ensure that his content is strategically placed across the globe [7], [8]. This can be done leveraging some algorithms [9]–[12] which specify the locations of VNFs running the applications, in order to achieve an improved performance with a low infrastructure cost. In this vein, some parameters are of crucial importance such as the number of VNFs, allocated virtual resources, where those VNFs are geographically located, and which VNF will serve end-users’ requests. Oljira et al. [10] proposed a model for the placement of VNFs, guaranteeing the QoS and latency requirements of the service chains. The goal is to optimize resource utilization in order to reduce cost satisfying QoS such as end-to-end latency. A trade-off solution between the two conﬂicting objectives in terms of resource utilization and Service Level Agreement (SLA) requirements is proposed in [9] and [11]. Abu-Lebdeh et al. [12] focused on the VNF placement and aimed at minimizing the operational cost without violating

the performance requirements. They provided an integer linear programming formulation and proposed an algorithm to solve larger instances of placement problem with a signiﬁcant reduction in the operational cost of large-scale distributed NFV deployments.
In this paper, we introduce a CDN as a Service (CDNaaS) platform whereby a user can create a CDN slice deﬁned as a set of isolated distributed network of edge servers over multi-cloud domains where an edge server hosts a single VNF such as virtual cache, virtual transcoder, virtual streamer and a CDN-slice-speciﬁc coordinator for the lifecycle management of the slice resources and also for managing uploaded videos and subscribers. This platform is designed to have the maximum level of ﬂexibility for scaling out and down a CDN slice on top of different public and private Infrastructure as a Service (IaaS) such as Amazon AWS service, Microsoft Azure, Rackspace, and OpenStack-managed cloud. Furthermore, the platform employs mechanisms and algorithms that create cost-efﬁcient QoE-aware CDN slices, involving an optimal number of required VNFs and deciding on their optimal placement taking into account the desired QoE level. Hereby, the main challenge is to provide a delicate balance between cost and customer satisfaction (in terms of QoE). Therefore, the objective of this paper is to ﬁnd an efﬁcient cost of CDN slice respecting, on one hand, the CDN owner requirements in terms of QoE, and on the other hand, the cloud infrastructure and its cost. Three solutions are proposed for VNF placement across multiple cloud domains. While the ﬁrst solution, dubbed Efﬁcient Cost Solution (ECS), aims to minimize the cost as much as possible, the second solution, named Efﬁcient QoE Solution (EQS), aims to increase as much as possible the QoE in the network. Meanwhile, the third solution, named Fair Trade-off between cost and QoE Solution (FTS), uses bargaining game theory to ensure a fair trade-off between cost and QoE.
The rest of this paper is organized as follows. Some related work is summarized in Section II. In Section III, the proposed CDNaaS platform is introduced. In Section IV, the system model and problem formulation for VNF allocation problem are given. Section V presents the solutions proposed for placing different streaming VNFs, that reduce both cost and QoE. Section VI describes the simulation setup and discusses the obtained results. Finally, the paper concludes in Section VII.
II. RELATED WORK
Regarding network slicing, network management and orchestration (MANO), there have been an important amount of research work conducted recently, summarized in [13] and [14]. Network slicing enables the deployment of multiple logical, self-contained networks on a common physical infrastructure, allowing resource isolation and a customized network operation as detailed in [15]. In other words, network slicing introduces a multi-tenant environment supporting ﬂexible provisioning of network resources as well as dynamic instantiation and placement of virtual network functions [16]. Ordonez-Lucena et al. [17] provide a comprehensive study of the architectural frameworks of both Software Deﬁned Networking (SDN) and Network Function Virtualization (NFV)

as key enablers to achieve the realization of network slices. Peter and Christian [18] provide the necessary ﬂexibility and scalability associated with future network implementations. The authors propose 5G based on network slicing with the coexistence of dedicated as well as shared slices in the network. Bin et al. [19] present a network slice design for the multicast/broadcast of ultra high deﬁnition (UHD) video to achieve higher network efﬁciency and improved QoE. Nakao et al. [20], Taleb et al. [21], and Zhang et al. [22] improve the ﬂexibility of network resource allocation and the capacity of 5G networks based on network slicing and discuss the potential of network slicing to provide the appropriate customization and highlight the relevant technology challenges.
In the context of CDN, several studies have been conducted proposing different algorithms to place strategically servers. Li et al. [23] propose a dynamic programming algorithm for cache placement aiming at improving the performance of CDNs. Other algorithms have been proposed for this issue, e.g., the Greedy algorithm [24], [25]. The VNF placement problem is of vital importance and differs from one case to another. Generally speaking, the problem is to place a number of VNFs in different locations in a way that yields the lowest cost. For example, in Carrier Cloud [26], [27], the placement of VNFs was the subject of several kinds of research [28]–[31]. The goal here is the placement of VNFs in speciﬁc data centers for a given user or a group of users, respecting architecture constraints and target service requirements. This problem can be studied in two ways [31]: (i) placement within the same data center – the research has been done with the goal of reducing cost using Bin packing, Simulated Annealing, Ant Colony, Transient cooling effects, N-dimensional set, etc., and (ii) placement across a federation of data centers. However, as discussed below, it is important to employ an intelligent VNF placement strategy across a federation of data centers for the CDN owner to provide better services, maintain efﬁcient cost, and meet the performance requirements.
Zhang et al. [32] use a fair resource allocation to ensure fairness between cloud and big data applications while virtual machine migration is used to make each virtual machine in cloud application reach the desired level of performance. The authors used Nash Bargaining game to model the situation whereby virtual machines compete for more resources while their minimal demand is ensured. Iyer et al. [33] consider addressing the resource allocation and pricing strategies in a Compute Cloud. They introduce the concept of asymmetric pricing scheme wherein a user can specify his budget constraints and the cloud service providers can attempt to maximize the revenue without compromising the performance. The authors employ two axiomatic bargaining approaches, namely Nash Bargaining Solution (NBS) and Raiffa Bargaining Solution (RBS), to formulate the problem and derive an optimal solution for allocating virtual CPU instances in a Compute Cloud. In the context of mobile relay networks, Baharlouei and Jabbari et al. [34], Zheng et al. [35], and Zhang et al. [36] proposed a Nash bargaining approach to balance the information transmission efﬁciency of sourceto-destination pairs and the residual harvested energy of relays.

Fig. 1. CDN as a Service Architecture.

III. CDN AS A SERVICE PLATFORM
A. Architecture and Components
Recently, performance and reliability have become the major factors that directly impact the user experience. In our highly connected world and to efﬁciently serve an ever-growing community of mobile users demanding highbandwidth services, it has become very important to reach clients whenever and wherever they are. In case of CDNs, the content is delivered to end-users based on their geographical locations and availability of resources using the geographically dispersed servers of CDNs. To make efﬁcient usage of CDNs, it is important to cache video contents in an intelligent fashion, leveraging smart caching strategies that are based on content popularity and geographical distribution of end-viewers. Although video contents can be transcoded into various formats, this operation requires greedy processes that need a large amount of computation for decoding and encoding. Moreover, efﬁcient media delivery requires high performance transcoding and that is in case of both Video On Demand (VOD) and live broadcast to various types of user devices.
For an efﬁcient delivery of video services, our envisioned CDNaaS platform aims for improving service responsiveness, not only by replicating the contents in several caches to ensure their availability but also by running on-demand other virtual services, such as virtual transcoder to transcode videos on the ﬂy into optimal resolutions before streaming them to the interested viewers [37]. In the following, we introduce the architecture of our CDNaaS platform along with its components.
Our envisioned CDNaaS platform allows the creation and life-cycle management of multiple slices of virtual CDNs running across multiple cloud domains. The CDN slices include virtual transcoders, virtual streamers, virtual caches, and a CDN-slice-speciﬁc Coordinator for the management of the uploaded videos and the subscribers as well as the slice resources across different private and public Infrastructure as a Service (IaaS) providers such as OpenStackmanaged data-centers, Amazon AWS service, Microsoft Azure

and Rackspace. Fig. 1.a shows an overview of the CDNaaS architecture. As stated earlier, a CDN slice consists of a number of virtual services and is administrated by only one server, called Coordinator, that manages the communication among VNFs of the same slice. As depicted in Fig.1.a, our envisioned CDNaaS platform consists of ﬁve main components:
- The Orchestrator server: The orchestrator server allows consumers to create new CDN slices or modify/delete their existing CDN slices over the available IaaS providers. The owner of a slice also logs into the orchestrator to manage the VM instances of the slice. This includes instantiation of new VMs specifying their ﬂavors, termination of existing ones, and deﬁnition or update of policies for the management of slice resources (e.g., for scaling out and down). For every slice, the orchestrator updates its respective coordinator whenever new VMs are created for the slice or existing VMs of the slice are updated.
- The Coordinator server: Each CDN slice has only one NFV manager, called the coordinator, that ensures the communication among virtual cache servers, virtual transcoder servers and virtual streaming servers associated to the CDN slice. The owner of a slice can manage through its respective coordinator its videos and administers its subscribers. The coordinator runs concrete methods including the smart selection of the closest and least loaded virtual transcoder. It also deﬁnes the service function chaining (SFC) between the slice VNFs (i.e., the triplet Cache, Transcoder, and Streamer) and then publishes the jobs in the queues of the concerned servers.
- The Cache server: Basically, a CDN slice essentially consists of a network of geographically dispersed cache servers. Each node caches static content and stores videos uploaded by the end-users and also the transcoding output. When a user requests a video with a speciﬁc resolution and quality, the closest cache in proximity to that user will deliver the content, ensuring the shortest distance (i.e, latency), therefore providing the best user experience possible.
- The Transcoder server: This network function is in charge of transcoding videos in different formats and at different resolutions. It consumes high computing resources. The virtual transcoder is always listening to orders from the coordinator

Fig. 2. Sequence diagram for managing resources of CDN slices and their videos in our envisioned CDNaaS platform.

by the mean of a queuing management server. It mounts the concerned cache server, starts transcoding, sends feedback to the coordinator specifying the progress in real-time and notiﬁes the Coordinator once the transcoding operation is successfully completed.
- The Streaming server: This network function plays the role of a load balancer as it receives requests from endusers for playing speciﬁc videos and redirects the requests to proper cache servers. The streaming server tracks also the video accesses and sends the statistics back to the coordinator to be used in data analysis in order to improve the business intelligence of the CDN slice in question.
B. Sequence Diagram
Fig.2 shows the sequence diagram for managing resources of CDN slices and their videos in our envisioned CDNaaS platform. VNFs belonging to the same CDN slice communicate through a well-deﬁned Application Program Interface (API). A log of such communication is stored to build a knowledge base for future data mining purpose. In the following, we explain the data ﬂow between different components of the system and highlight the communication technologies used.
1) Communication Between the Orchestrator and VNFs: As stated earlier, the orchestrator of a CDN slice manages the life-cycle of its VNFs and accordingly scales out and down the

CDN slice. The Orchestrator bootstraps virtual machines for hosting speciﬁc VNFs and updates constantly the respective VNF managers.
2) Communication Between the Coordinator and Transcoders: The CDN slice owner authenticates to the interface management via web and launches massive video uploads over a distributed set of virtual caches. The Coordinator load balances the uploaded videos over the network of virtual Transcoder nodes, by the means of an Advanced Message Queuing Protocol (AMQP) implemented in the Coordinator server, e.g, RabbitMQ Server. For each new instantiation of a transcoder node, a new queue is created in the system, that ensures the communication (Read/Write) between that transcoder and the coordinator. When a CDN slice owner decides to transcode some of his videos, the coordinator server publishes the jobs in the respective queue of each transcoder. The transcoders are always listening to their queues, consume the messages in First In First Out (FIFO) order. The message is an API that describes the order and contains information about the video, speciﬁes the cache server where the video resides and information about the transcoding parameters. During the transcoding operation, the virtual transcoder publishes in the queue the progress in real time. A progress-bar will be rendered to the end-user through the coordinator web interface.

3) Communication Between the Coordinator and Streamers: Streaming servers receive requests for videos from end-users and load balance their streaming among the available caches. As a potential technology for the streaming server, we use Nginx. All streaming servers contain a running service that tracks the video accesses and publishes in the common streamers’ queues the following information: the streamer’s public IP address, timestamps, IP address of the requesting user, the viewer’s city and country, video ID, resolution, the IP address of the cache server where the video resides, and the distance between the requesting client and the cache server in Kilometers. These information are needed to build a dashboard and statistics for the CDN slice owners to measure the performance and to also improve the Business Intelligence of the speciﬁc CDN slices.
4) Communication Among Transcoders, Caches, and Streamers: In many cases, it may become too much demanding to handle constant ﬁle transfers to and from virtual machines. For instance, there could be a situation whereby a transcoder is transcoding videos and simultaneously receiving the uploads of other large ﬁles from multiple end-users. This could largely downgrade the overall system performance. To cope with such an issue, transcoders may mount Virtual Private Server (VPS) ﬁle systems that consist of cache servers where videos can be stored. The transcoder can then make transcoding on the ﬂy and treat the mounted cache server as local storage. Similarly, the virtual streaming servers can be conﬁgured to read/stream the content from the virtual caches belonging to the same slice, rather than from local caches associated with the virtual streaming servers.
C. Management and Orchestration
The envisioned CDNaaS platform is designed to offer users an easy way to manage a great number of videos for plenty of subscribers, providing the ﬂexibility of launching different VNF instances using resources from different cloud suppliers [8], [20]. Fig. 1.b shows the most important stakeholders in the envisioned CDNaaS architecture. It consists of a public network connecting different data centers across several geographical areas. Server racks within a data center are connected through a private network. The virtual infrastructure is created using different IaaS providers, e.g., Amazone AWS service, Microsoft Azure, and Rackspace. The architecture of the CDNaaS orchestrator is depicted in Fig. 3. The orchestrator acts as the main management component of the CDNaaS platform and is responsible for running core front and back-end services. Front-end services help to meet users’ preferences and set up VNFs for the coordinator, cache, transcoder, and streamer images. Regarding the back-end related functions used in the orchestrator, they are as follows:
• Main Orchestration component: This component is responsible for checking the database and VNFs creation and deletion.
• Data Manager Component: This component contains all database-related methods required for data management.
• Coordinator Agent: contains required methods used for communications between the orchestrator and the

Fig. 3. High level architecture of our envisioned CDNaaS orchestrator.
coordinators of different CDN slices. For example, the agent makes the coordinator aware of the topology of its slice. It populates the coordinator database with all useful information about the slice VNFs, including public and private IPs, network function/service, cloud provider, location (latitude and longitude), and image ID.The agent constantly updates the coordinator regarding any change in the slice topology in case of instantiation of new VMs or deletion of existing ones. • Amazon AWS Agent: contains methods required for interfacing with the EC2 controller of Amazon AWS IaaS provider. • Microsoft Azure Agent: contains methods required for interfacing with the controller of the Microsoft Azure IaaS provider. • OpenStack Agent: contains methods required for interfacing with an OpenStack-based Virtual Infrastructure Manager (VIM). • RackSpace Agent: contains methods required for interfacing with the controller of the RackSpace IaaS provider.
The main steps beneath the creation of a CDN slice are depicted in Fig. 4:
• R1: A customer (i.e., CDN slice consumer) requests the creation of a CDN slice specifying its requirements.
• R2: Based on these requirements, the orchestrator determines the amount of virtual resources, their locations and respective IaaS provider, and the VNFs to be installed in each virtual instance. The orchestrator sends requests to each IaaS provider indicating the VNF instances to be instantiated and specifying the images (i.e., virtual cache, transcoder, streamer, and coordinator) to be run on each of them.
• R3: Using the right images, VNFs are created and information on the statues of these VNFs are communicated to the orchestrator.
• R4: The user (i.e., CDN owner) can manage the VNFs of his CDN slice via the API of the orchestrator.
The coordinator server of a speciﬁc CDN slice is responsible for getting information about available machines in its CDN slice from the orchestrator and manages communications among the different nodes such as the transcode request

Fig. 4. Main steps beneath the creation of a CDN slice.

(i.e., sent by the coordinator to the transcoder) or the transcode reply (i.e., sent by the transcoder to the coordinator) as depicted in Fig. 2. As stated earlier, a CDN slice consists of one coordinator, at least one transcoder, at least one streamer, and at least one cache. Once a CDN slice is created, the CDN slice owner can manage his videos through the coordinator, which is a mandatory component used to manage the entire CDN slice including caches, transcoders, and streamers. It enables the owner to upload, modify or delete videos, select the preferred transcoder, cache, and streamer among the available ones to transcode one or a group of videos to desired resolutions, store and stream the transcoded videos. Caches are mainly in charge of storing videos after being uploaded by users and after being transcoded by the selected transcoder server. Transcoders get a request from the coordinator and transcode videos at rates speciﬁed by the CDN owner. The role of streamers is load balancing and receiving end users’requests for playing a speciﬁc video and redirecting the requests to proper cache servers (See Fig. 2). For the creation of costefﬁcient and QoE-aware CDN slices, a smart placement of VNFs across the available IaaS along with decision on what virtual resources to allocate for each VNF must be ensured by the system. This placement concerns the geographical locations of VNFs and the ﬂavors of their respected VMs (e.g., CPU, memory and storage) offered by available IaaS providers [38]. Indeed, the placement of caches, transcoders, and streamers has a great impact on the QoE. Moreover, it affects the cost paid by the CDN owner (i.e., similar in spirit to the general VNF placement problem in case of cloud-based Telco [28], [31]). In the following section IV, the CDNaaS VNF placement problem is formulated and two Linear Integer Problem solutions are proposed. Based on these two solutions, an optimal trade-off solution based on bargaining game theory is also proposed.
IV. SYSTEM MODEL AND PROBLEM FORMULATION
Once a user successfully logs into the orchestrator domain, he is able to create a CDN slice. He deﬁnes a validity period for the CDN slice and speciﬁes an estimate of the number of videos to be stored and a number of subscribers

to be serviced across a speciﬁc geographical area, withing the service areas of a number of IaaS providers. Each IaaS provider can offer a number of VNFs and run them on VMs with speciﬁc ﬂavors. A VM ﬂavor deﬁnes the category of the VM instance and is characterized by a number of cores as vCPU, an amount of RAM, and a storage capacity, in addition to other features [38]. Each ﬂavor incurs a cost which should be paid by the CDN owner. Each instantiated VM shall run a VNF image that can be either for a coordinator, a transcoder, a cache or a streamer. The objective is to create a cost-efﬁcient CDN slice minimizing the incurred cost while meeting the requirements speciﬁed by the user (i.e., in terms of QoE).
We model the physical network representing the cloud infrastructure and subscribers as a weighted bipartite complete graph and denote it as G = (V; E). The set of vertices is V = V1 ∪V2 where V1 is the set of physical nodes constituting locations of data centers and V2 is the set of subscribers’ locations. E is the set of physical links. We assume that the QoE of each physical link is different because of the distance between nodes considering the hops count that links two cloud platforms where Deterministic Networking (DetNet) can be used to estimate the packet delay variation and provide multi-hop forwarding path with the deterministic properties of controlled latency. In this article, we consider only the distance between subscribers’ locations and the VNF hosting a streamer has an impact on the QoE of the streaming service. Hence, ω(k, l) = λk,l denotes the QoE of a physical link between two locations where k ∈ V1 and l ∈ V2 [39] [40].
A CDN slice owner deﬁnes a location l ∈ V2 of his subscribers, the minimum value of QoE (i.e., in terms of Mean Opinion Score) the end-users of his CDN slice shall experience, the capacities of the caches and the transcoders which are denoted as μ, ρ and σ , respectively. Subscribers in a location l and videos are denoted by the sets Ml and N, respectively. The CDN slice owner sets an estimated average duration of videos to be cached which we represent by tv . The set of desired resolutions is denoted as R = {r1, r2 . . .} where rm = (wm , lm ); wm and lm denote the width and the length of the frame, respectively.

TABLE I NOTATIONS USED IN THE PAPER

and q(i, Ml , λk,l ). In other words, h−1(i, ρ) and g−1(i, σ ) are the possible size of videos handled by a VM of ﬂavor i with the capacity ρ for the cache image and the capacity σ for the transcoder image. Similarly, q−1(i, μ, λk,l ) denotes the possible number of subscribers in a location l ∈ V2 that can be handled by a VM of ﬂavor i in a location k ∈ V1 with a perceived QoE μ for the streamer image.
The function f estimates the cost of storing videos by
calculating an approximate video size (in Megabytes), given
the frame rate denoted by f rv and the color depth denoted by dv where v ∈ N. Knowing that sv = (tv , f rv , dv ) ∈ N3 and rm = (wm , lm ) ∈ N2, this function is deﬁned as follows:

f : N3 × N2 → R

(sv , rm )

→

dv

× f rv × tv × wm × lm 8 × 1024 × 1024

(1)

The total size of videos is calculated using Equation (1) as follows:

YT OT AL =

f (sv , rm )

(2)

v∈N m∈R

Let C, T and S denote cache, transcoder and streamer images, respectively. E = {C, T , S} is the set of all images. As mentioned in Table I, we deﬁne the integer variable Sik, j that denotes the number of VNFs running on VMs of ﬂavor i in a location k ∈ V1 hosting an image j . S(F, E, V1) ∈ is a solution to the problem where denotes the set of all
possible solutions. The cost of a solution S is calculated as
follows:

In what follows, we consider the placement of caches, transcoders, and streamers in different locations, running them on VMs with different ﬂavors. Let F = { f1, f2 . . .} denote the set of available ﬂavors and ci denote the cost of a ﬂavor i . Note that a ﬂavor i can be available in a data center k but may not be available in another data center k . The relationship of ﬂavors to a location k ∈ V1 is represented through a constant matrix P(F, V1). If and only if a ﬂavor i is associated with a location k, then Pi,k = 1, otherwise Pi,k = 0. For the sake of readability, the notations used throughout the paper are summarized in Table I.
V. PROPOSED SOLUTIONS
A. ECS: Efﬁcient Cost Solution
Knowing that the available disk memory of a VM of a speciﬁc ﬂavor has a great impact on the cache image, while the CPU and the RAM have a great impact on transcoder and streamer images, we denote by h(i, Y ) and g(i, Y ) the capacities of a VM of ﬂavor i running a cache and a transcoder image, respectively, handling a size Y of videos. q(i, Ml , λk,l ) represents the QoE perceived by a streamer image running on a VM of a ﬂavor i in a location k ∈ V1 serving a set of subscribers Ml in a location l ∈ V2. We assume that the QoE of a link between a streamer and a cache is efﬁcient and does not affect q. h−1(i, ρ), g−1(i, σ ) and q−1(i, μ, λk,l ) are respectively the inverse functions of the functions h(i, Y ), g(i, Y )

CT OT AL(S) =

Sik, j × Pi,k × ci

(3)

i∈F j ∈E k∈V1

The aggregate utility minimization problem is shown as

follows:

⎧

⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨smjj. ==itn.

C T

CT
:
k
:

OT ∈V1

AL (
i∈F

S) h−1(i, ρ) × Sik, j g−1(i, σ ) × Sik,

j

× Pi,k × Pi,k

≥ YT OT AL ≥ YT OT AL

⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎩∀∀Yj iiT=O∈∈STFF,Al,,L∈∀∀,kk∈VρjV2,∈∈1μ:iVE∈,k∈1Fσ,V∀:1>kPi∈i∈0,Fk

q−1(i, μ, λk,l
V1 : Sik, j ∈ N ∈ {0, 1}

)

×

Sik,

j

×

Pi,k

≥

|

Ml

|

(4)

The objective is to minimize s much as possible the incurred cost and then form a cost-efﬁcient CDN slice. Meanwhile, the constraints in linear programming (4) are used to ensure the following conditions:
• Constraints 1 and 2 ensure that the capacities of the cache and the transcoder desired by the user (i.e., CDN slice owner) are respected and not exceeded. The size of videos handled by all VMs of all selected ﬂavors for cache or transcoders image must be higher than or equal to the total size of user’s videos.

• Constraint 3 ensures that the QoE of the streaming service desired by the user is respected. Hence, the number of subscribers handled by all VMs of all selected ﬂavors for a streamer image and by all physical links must be higher than or equal to the number of subscribers deﬁned by the user.
• Constraint 4 ensures that the number of VNFs is valid. • Constraint 5 ensures that the matrix P is binary. • Constraint 6 ensures that the total size of videos, the num-
ber of subscribers, the QoE of the streaming service, and the capacities of the transcoder and the cache are valid.

B. EQS: Efﬁcient QoE Solution
First, We deﬁne the matrix N (F, Ml ). If and only if a ﬂavor i handles a number of subscribers n in a location l, then Ni,n = 1; otherwise Ni,n = 0. Knowing that j = S and l ∈ V2, the total QoE of all VMs of different ﬂavors hosting a streamer image is calculated as follows:

QT OT AL(S, N , l) =

q(i, n, λk,l )

i∈F k∈V1 n∈Ml

× Sik, j × Pi,k × Ni,n (5)

Assuming that the CDN slice owner can deﬁne a maximum

total cost denoted as CostMax, the aggregate utility maximiza-

tion problem can be shown as follows:

⎧

⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨mskj∈. =aVtx.1 Ciml∈∈F:Vink2j∈∈VQK1TiS∈Oik,FTj j=T :

AL(S, N , l)
× Pi,k × ci ≤ CostMax h−1(i, ρ) × Sik, j × Pi,k ≥ YT OT AL g−1(i, σ ) × Sik, j × Pi,k ≥ YT OT AL

⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎩Y∀∀∀j iiiT=O∈∈∈STFFF,Al,,,L∀∀∀∈,kkn∈CjVV∈o∈∈21si:VtKM∈Mk1F,∈la:∀V:xPk1,Nρii∈∈,ik,,FnσV∈n∈1∈>{:M{00S,l0,ni1k,1}j×}∈SikN, j ×Pi,k ×Ni,n ≥ |Ml |

(6)

The objective in the linear programming (6) is to maximize as much as possible the QoE of the streaming service while respecting the total cost paid by the user. Constraints in the linear programming (6) are explained as follows:
• Constraint 1 ensures that the total cost desired by the user must be respected. The total cost of all VMs of all selected ﬂavors for caches, transcoders and streamers must be less than or equal to the total cost deﬁned by the user.
• Constraints 2, 3, 5 and 6 are the same as in the linear programming (4).
• Constraint 4 ensures that the total number of subscribers must be greater than or equal to the total number of subscribers deﬁned by the user.
• Constraint 7 ensures that the matrix N is binary.

• Constraint 8 ensures that the total size of videos, the number of subscribers, the maximum cost, and the capacities of the transcoder and the cache are valid.

C. FTS: Fair Trade-Off Between Cost and QoE Solution

The Nash bargaining solution is the unique solution to a

two-person bargaining problem that satisﬁes the axioms of

scale invariance, symmetry, efﬁciency, and independence of

irrelevant alternatives. The Nash bargaining game is a simple

two-player game used to model bargaining interactions. In the

Nash bargaining game, two players demand a portion of some

good. If the total amount requested by the players is less than

that available, both players get their request. If their total

request is greater than what is available, neither player gets

their request. In our model, we can model the two players

as cost and QoE, they request the desired assignment to

the appropriate VNF running on the appropriate VM of an

adequate ﬂavor. Our objective is to ﬁnd the optimal assignment

in order to satisfy all players. Since the utilities of the cost

of steaming and the QoE are obviously conﬂicting, a Nash

bargaining game is adopted in this paper and the Nash bargain-

ing solution is considered as a reasonable solution to balance

the utilities of both objectives in order to ﬁnd a trade-off

solution.

Indeed, our proposed FTS solution aims to ﬁnd a fair

trade-off between the conﬂicting objectives, the cost and

the QoE. A bargaining game is used to ﬁnd the fair trade-off

between these conﬂicting objectives. The deployment of a high

number of streaming VNFs in the network will enable getting

streaming servers closer to the end-users, which consequently

increases the QoE dramatically. Moreover, from another point

of view, they will increase the cost of streaming services for

the users signiﬁcantly. However, the deployment of a low

number of streaming VNFs will negatively impact the QoE

and the end-to-end delay. In FTS, the cost and end-to-end

delay are considered as two players that would like to barter

goods.

1) Cooperative Games: In cooperative games, the play-

ers are assumed to attain either most desirable point when

negotiation succeeds or disagreement point when negotiation

fails. We consider two persons game who would like to

barter goods, each one of them wants to increase his beneﬁts.

We deﬁne P as the vector payoffs of theses players. Formally,

P = {(u1(x ), u2(x )), x = (x1, x2) ∈ X }, where X is the set of the two players’ strategies. u1(x) and u2(x) represent the

utility functions of two players, respectively. In [41], Nash

bargaining model (NBS) is presented, which is a cooperative

game with non-transferable utility. This means that the utility

scales of the players are measured in non-comparable units.

Nash bargaining game is based on two elements assumed to

be given and known to the players. The ﬁrst element is the set

of vector payoffs P achieved by the players if they agree to

cooperate. P should be a convex and compact set. The second

element

is

the

threat

point,

d

=

(ud1 ,

u

d 2

)

∈

P,

which

represents

the pair of utility whereby the two players fail to achieve an

agreement. In NBS, we aim to ﬁnd a fair and reasonable point,

(u∗1, u∗2) =

f

(P

,

ud1

,

u

d 2

)

∈

P.

Based

on

Nash

theory,

a

set

of axioms is deﬁned that leads to

unique

optimal

solution

(u ∗1 ,

u

∗ 2

):

f

(P

,

u

d 1

,

ud2

)

achieving

a

1) Feasibility: (u∗1, u∗2) ∈ P.

2) Pareto Optimality: There is no point (u1(x),

u2(x)) ∈ P such

except

(u ∗1 ,

u

∗ 2

).

that

u1(x )

≥

u∗1

and

u2(x )

≥

u∗2

3) Symmetric: If P is symmetric about the line

u1(x )

=

u2(x ),

and

ud1

=

u

d 2

,

then

u∗1

=

u ∗2 .

4) Independence of irrelevant alternatives: If T is a

closed convex subset of P,

(u∗1, u∗2) ∈ T , then

f

(P

,

u

d 1

,

uad2n)d=if(u(∗1u,d1u,∗2u)d2.

)

∈

T

and

5) Invariance under change of location and scale: If

T = {(u1(x ), u2(x )), u1(x ) = α1 u1(x ) + β1, u2(x ) = α2 u2(x ) + β2, (u1(x ), u2(x )) ∈ P} where α1 ≥ 0,

α2 ≥ 0 and β1 and β2 are given numbers the f (T , α1 ud1 +β1, α2 ud2 +β2) = (α1 u∗1 +β1, α2 u∗2 +β2). Moreover, the unique solution (u, v), satisfying the above

axioms, is proven to be the solution of the following optimiza-

tion problem:

⎧ ⎪⎪⎪⎨ms. atx.

(u1(x

)

−

ud1

)(u

2(x

)

−

u

d 2

)

⎪⎪⎪⎩((uu

1(x 1(x

), ),

u2 u2

(x (x

)) ))

∈ ≥

P (u

d 1

,

ud2

)

(7)

An enhanced solution of Nash bargaining game, named

KSBS, is proposed by Kalai and Smorodinsky [42]. KSBS

aims to enhance more the fairness between the players by shar-

ing the same utility fraction r among them. KSBS preserves

the same Nash bargaining axioms except the independence

of irrelevant alternatives. In addition, it has new axioms

called monotonically. In contrast to the Nash bargaining game,

in

addition

to

the

disagreement

point

d

=

(ud1 ,

u

d 2

)

∈

P,

KSBS

needs the ideal point for both players x b = (ub1, ub1)/x b ∈ P,

which is the best utility that both players can achieve sepa-

rately without bargaining. Kalai and Smorodinsky proves that

the unique solution that satisﬁes KSBS’s axioms is the solution

of the following optimization problem:

⎧

⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨ms(u. a1tx.(x

r ),

u2

(x

))

∈

P

⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎩rr

= =

u1(x ) − ud1

u

b 1

−

ud1

u2(x ) − ud2

ub2 − ud2

(8)

Fig. 5 shows how the KSBS game enhances NBS in terms of fairness and Pareto-optimality. As shown in Fig. 5(a), NSB aims to increase as much as possible the size of the orange rectangle. However, this strategy may favor one player over the other. As shown in Fig. 5(b), KSBS enhances the trade-off between the two players by sharing the same utility fraction. To increase the beneﬁt of each player, KSBS increases as much as possible the fraction r .

r

=

u∗1

−

u

d 1

ub1

−

u

d 1

=

u∗2 − ud2 ub2 − ud2

Fig. 5. NBS and KSBS solutions.

2) FTS Description: In the remainder of this section,

we will describe the FTS solution (i.e., Fair Trade-off between

cost

and

QoE

Solution).

We

denote

by

d

=

(udC

,

u

d Q

)

and

b = (ubC , ubQ) the threat and best points of the KSBS

game that solves FTS. In the KSBS game, both players

(i.e., ECS and EQS) should bargain for increasing their bene-

ﬁts. However, from the optimization (4), ECS aims to reduce

the cost, which is the opposite to its utility function. In order

to use the KSBS game for ensuring a fair trade-off between the

QoE and the cost, as depicted in Fig. 5(b), we need to change

the utility function of ECS to be a maximization problem. The

utility function of the ECS player is then updated using the

following optimization problem:

⎧

⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨smjj. ==atx. TC

−CT OT AL (S)

:

h−1(i, ρ)Sik, j Pi,k

k∈V1 i∈F

:

g−1(i, σ )Sik, j Pi,k

≥ YT OT AL ≥ YT OT AL

⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎩∀∀Yj iiT=O∈∈TSFFA,,,Ll∀∀,k∈k∈MjVV∈∈l1,2iVρE∈:1F,,kμ∈∀: VkP,1σi∈,ik∈>VF∈1q0{:−0S1,(ik1,ij},

μ, λk,l ∈N

)

Sik,

j

Pi,k

≥

Ml

(9)

Now, we introduce the proposed FTS solution. In what fol-

lows, we will show how d and b would be computed. Let

S˙ and S¨ denote the two matrices of Sik, j variables obtained

by solving the two optimizations (6) and (10), respectively.

Then,

d

=

(u

d C

,

udQ )

and

b

=

(ubC ,

ubQ )

would

be

computed

as

follows:

1) udC = −CT OT AL (S˙) = −

S˙ik, j Pi,k × ci

i∈F j ∈E k∈V1

2) ubC = −CT OT AL (S¨) = −

S¨ik, j Pi,k × ci

i∈F j ∈E k∈V1

3) udQ

=

min QT OT AL (S¨, N , l)
l∈V2

=

min
l∈V2

i∈F

k∈V1

n ∈ Ml

q (i ,

n,

λk,l

)

×

S¨ik,

j

×Pi,k × Ni,n

4) ubQ

=

min
l∈V2

QT

OT

AL

(S˙,

N

,

l)

=

min
l∈V2

i∈F

k∈V1

n ∈ Ml

q (i ,

n,

λk,l

)

×

S˙ik,

j

×Pi,k × Ni,n

Fig. 6. Performance evaluation by increasing the number of locations.

Fig. 7. Performance evaluation by increasing the number of ﬂavors per location.

The fair Pareto optimal solution FTS will be then formulated
as follows: ⎧ ⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎨⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎪⎩rrmsk∀∀Y∀∀ujjjj∈.liiiCT======aVt∈O(∈∈∈x.1SSSTCTuuiV)FFF∈,,ACQuur2llF:=,,,L:(∈bCb∈(Qk∀∀∀:,kSSj∈−nk∈VV∈u−Mj)−)VVK22Q∈−1∈∈−li1uu∈,(::iSi∈dCVdSFρMQuE∈iukkk,F∈∈)1dCF,djQ,ljVVμh∈≥∀:×g:11E−kP,−Nii×iP1σ∈∈ki1∈∈(,∈iFF(ikSF,i,V>ni,kiVknq,,∈1kρ∈j∈1σ×∈−S0)M{V×)1:ik{0,×c1l(0×jS,iinPnP,i,k1∈,S≤×i1μSij},Mi,kk},ikk,∈S,Cjl ×jiλ×kq×,oN×kj(sN,×cilPt,i)PMiPn×i,,nia,k,ik,xSλk≥ik≥k,×,jlY×N)YTTPiO,OniT,Tk≥AA≥LL||MMl l||(10)

Then, the minimum QoE in the network QF and the cost CF of FTC will be computed as follows:

QF = u Q (S)

(11)

CF = −uC (S)

(12)

VI. SIMULATION RESULTS
To simulate our proposed solutions, a simulator was developed using the Python programming language. The two linear integer problem solutions are implemented using the Gurobi optimization tool and are evaluated using the following metrics: i) the paid cost of VNFs; ii) the QoE of the streaming service; and iii) the operation time. The optimization problems are solved by varying: i) the number of data centers’ locations; and ii) the number of ﬂavors per location. In the ﬁrst scenario, we vary the number of locations of data centers and ﬁx the number of ﬂavors to 8 in each location. While in the second scenario, we vary the number of ﬂavors in each location and ﬁx the number of locations of data centers to 10. Flavors and their respective costs are deﬁned after examining the prices of 87 ﬂavors offered by Amazone AWS service, Microsoft Azure, and Rackspace. For both cases, the total number of subscribers, the total size of videos, and the capacities of the cache and the transcoder remain unchanged. For the sake of simplicity, we consider only one location of subscribers in V2. In the simulation results, each plotted point represents the average of 35 times of executions. The plots are presented with 95 % conﬁdence interval.
Figs. 6 and 7 show the performance evaluation of the proposed solutions in terms of the number of ﬂavors and the

number of data centers’ locations. In case of the ECS and FTS algorithms, the minimum acceptable QoE of the streaming service μ is set to 2.5, while in case of the EQS and FTS algorithms, CostMax is set to 1$. In the two ﬁgures, the QoE value in case of the EQS and FTS algorithms is presented as the average of the QoE values of all VMs hosting a streamer image as VNF but not by QT OT AL .
Figs. 6(a) and 7(a) show the total cost incurred by the instantiated VNFs when varying the number of locations and varying the number of ﬂavors per location, respectively. In both ﬁgures, it is apparent that regardless the number of data centers’ locations and the number of ﬂavors per location, the ECS algorithm exhibits the best performance in terms of minimizing the total cost. When just one or two locations are considered, the cost in case of the ECS algorithm is high, and this also applies when the number of ﬂavors per location is small in Fig. 7(a). This is attributable to the fact that there is not much choice of ﬂavors, then the cost could be high. Hence, the total cost decreases when the number of locations and the number of ﬂavors increase. From Figs. 6(a) and 7(a), FTS exhibit a performance between FCS and QCS in terms of cost. We also observe from these ﬁgures that the curve of FCS has the same trend as the one of ECS.
Figs. 6(b) and 7(b) show the QoE of the streaming service while varying the number of data centers’ locations and the number of ﬂavors per location, respectively. The ﬁrst observation that we can draw from these ﬁgures is that the EQS scheme exhibits the best performance in terms of QoE in comparison to ECS and FTS. This is due to the fact that EQS is designed to optimize the QoE without taking into account the cost overhead. From these ﬁgures, we observe that FTS has a performance similar to EQS in terms of QoE. Mainly, the curve of FTS has the same trend as the one of EQS. As depicted in these two ﬁgures, the QoE of the streaming service in case of the EQS and FTS algorithms increases when the number of data centers’ locations and the number of ﬂavors per location become higher. That is tied to the great number of choices of ﬂavors. We also observe from these ﬁgures that the numbers of locations and ﬂavors do not have an impact on the QoE for the ECS solution. This is attributable to the fact that the ECS solution aims at reducing the cost without taking the QoE into account, and then the worst QoE values would be achieved by the ECS solution. From the simulation, it seems that the worst QoE value that was achieved in the network is 2.5.
In Figs. 6(c) and 7(c), the execution time of the three solutions is presented. As observed from these ﬁgures, the ECS algorithm exhibits better performance than the EQS and FTS algorithms in terms of execution time, regardless the number of data centers and the number of ﬂavors per location. From Figs. 6(a) and 7(a), from one side, and Figs. 6(b) and 7(b), from another side, we conclude that the FTS solution achieves a fair trade-off between QoE and cost. FTS performs similarly to ECS in terms of the cost, and similarly to EQS in terms of the QoE.

VII. CONCLUSION
In this paper, we introduced a CDNaaS platform that allows
the creation of CDN slices across multiple cloud domains. The platform is able to scale out and down by deploying
virtual resources from multiple IaaS providers, running differ-
ent VNFs (i.e., virtual caches, virtual transcoders, and virtual streamers). In order to create a cost-efﬁcient and QoE-aware
virtual CDN slice, the optimal placement of these VNFs, along
with decision on the amount of virtual resources to allocate for each of them, is of vital placement. In this vein, this
paper introduced three relevant solutions. The ﬁrst solution aims at minimizing the incurred total cost, while the second
solution aims at maximizing QoE of the streaming services.
The third solution uses a bargaining game theory for ensuring a fair trade-off between the cost and QoE. A mathematical
model is developed to evaluate the performance of these
three solutions. Simulations were conducted and the obtained results demonstrated the efﬁciency of the proposed solutions
in achieving their key design goals.
REFERENCES
[1] I. Benkacem, T. Taleb, M. Bagaa, and H. Flinck, “Performance benchmark of transcoding as a virtual network function in CDN as a service slicing,” in Proc. IEEE WCNC, Barcelona, Spain, Apr. 2018, pp. 1–6.
[2] S. Retal, M. Bagaa, T. Taleb, and H. Flinck, “Content delivery network slicing: QoE and cost awareness,” in Proc. IEEE ICC, May 2017, pp. 1–6.
[3] S. Gadde, J. Chase, and M. Rabinovich, “Web caching and content distribution: A view from the interior,” Comput. Commun., vol. 24, no. 2, pp. 222–231, May 2001.
[4] B. Krishnamurthy, C. Wills, and Y. Zhang, “On the use and performance of content distribution networks,” in Proc. 1st ACM SIGCOMM Workshop Internet Meas., Burlingame, CA, USA, May 2001, pp. 169–182.
[5] A. Vakali and G. Pallis, “Content delivery networks: Status and trends,” IEEE Internet Comput., vol. 7, no. 6, pp. 68–74, Nov. 2003.
[6] S. Dutta, T. Taleb, and A. Ksentini, “QoE-aware elasticity support in cloud-native 5G systems,” in Proc. IEEE Int. Conf. Commun. (ICC), Kuala Lumpur, Malaysia, May 2016, pp. 1–6.
[7] S. Dutta, T. Taleb, P. A. Frangoudis, and A. Ksentini, “On-the-ﬂy QoE-aware transcoding in the mobile edge,” in Proc. IEEE Globecom, Washington, DC USA, Dec. 2016, pp. 1–6.
[8] P. A. Frangoudis, L. Yala, A. Ksentini, and T. Taleb, “An architecture for on-demand service deployment over a telco CDN,” in Proc. IEEE Int. Conf. Commun. (ICC), Kuala Lumpur, Malaysia, May 2016, pp. 1–6.
[9] F. B. Jemaa, G. Pujolle, and M. Pariente, “Qos-aware VNF placement optimization in edge-central carrier cloud architecture,” in Proc. IEEE Global Commun. Conf. (GLOBECOM), Washington, DC, USA, Dec. 2016, pp. 1–7.
[10] D. B. Oljira, K.-J. Grinnemo, J. Taheri, and A. Brunstrom, “A model for QoS-aware VNF placement and provisioning,” in Proc. IEEE Conf. (NFV-SDN), Berlin, Germany, Nov. 2017, pp. 1–7.
[11] A. Alleg, T. Ahmed, M. Mosbah, R. Riggio, and R. Boutaba, “Delayaware VNF placement and chaining based on a ﬂexible resource allocation approach,” in Proc. 13th Int. Conf. Netw. Service Manage. (CNSM), Tokyo, Japan, Nov. 2017, pp. 1–7.
[12] M. Abu-Lebdeh, D. Naboulsi, R. H. Glitho, and C. W. Tchouati, “On the placement of VNF managers in large-scale and distributed NFV systems,” IEEE Trans. Netw. Service Manage., vol. 14, no. 4, pp. 875–889, Dec. 2017.
[13] T. Taleb, K. Samdanis, B. Mada, H. Flinck, S. Dutta, and D. Sabella, “On multi-access edge computing: A survey of the emerging 5G network edge cloud architecture and orchestration,” IEEE Commun. Surveys Tuts., vol. 19, no. 3, pp. 1657–1681, 3rd Quart., 2017.
[14] I. Afolabi, T. Taleb, K. Samdanis, A. Ksentini, and H. Flinck, “Network slicing and softwarization: A survey on principles, enabling technologies and solutions,” IEEE Commun. Surveys Tuts., to be published.
[15] Description of Network Slicing Concept, NGMN Alliance, San Diego, CA, USA, Jan. 2016.

[16] K. Samdanis and X. Costa-Pérez, and V. Sciancalepore, “From network sharing to multi-tenancy: The 5G network slice broker,” IEEE Commun. Mag., vol. 54, no. 7, pp. 32–39, May 2016.
[17] J. Ordonez-Lucena, P. Ameigeiras, D. Lopez, J. J. Ramos-Muñoz, J. Lorca, and J. Folgueira, “Network slicing for 5G with SDN/NFV: Concepts, architectures, and challenges,” IEEE Commun. Mag., vol. 55, no. 5, pp. 80–87, May 2017.
[18] R. Peter et al., “Network slicing to enable scalability and ﬂexibility in 5G mobile networks,” IEEE Commun. Mag., vol. 55, no. 5, pp. 72–79, May 2017.
[19] B. Tan, J. Wu, Y. Li, H. Cui, W. Yu, and C. W. Chen, “Analog coded SoftCast: A network slice design for multimedia broadcast/multicast,” IEEE Trans. Multimedia, vol. 19, no. 10, pp. 2293–2306, Oct. 2017.
[20] A. Nakao et al., “End-to-End network slicing for 5G mobile networks,” J. Inf. Process., vol. 25, pp. 153–163, Feb. 2017. [Online]. Available: https://www.jstage.jst.go.jp/article/ipsjjip/25/0/25_153/_article
[21] T. Taleb, B. Mada, M. I. Corici, A. Nakao, and H. Flinck, “PERMIT: Network slicing for personalized 5G mobile telecommunications,” IEEE Commun. Mag., vol. 55, no. 5, pp. 88–93, May 2017.
[22] H. Zhang, N. Liu, X. Chu, K. Long, A. Aghvami, and V. C. M. Leung, “Network slicing based 5G and future mobile networks: Mobility, resource management, and challenges,” IEEE Commun. Mag., vol. 55, no. 8, pp. 138–145, Sep. 2017.
[23] B. Li, M. J. Golin, G. F. Italiano, X. Deng, and K. Sohraby, “On the optimal placement of Web proxies in the Internet,” in Proc. IEEE INFOCOM, vol. 3. New York, NY, USA, Mar. 1999, pp. 1282–1290.
[24] L. Qiu, V. N. Padmanabhan, and G. M. Voelker, “On the placement of Web server replicas,” in Proc. IEEE INFOCOM, Anchorage, AK, USA, Apr. 2001, pp. 1587–1596.
[25] Y. Chen, R. H. Katz, and J. Kubiatowicz, “Dynamic replica placement for scalable content delivery,” in Proc. 1st Int. Workshop Peer-to-Peer Syst. (IPTPS), Cambridge, MA, USA, Mar. 2002, pp. 306–318.
[26] T. Taleb, “Toward carrier cloud: Potential, challenges, and solutions,” IEEE Wireless Commun., vol. 21, no. 3, pp. 80–91, Jun. 2014.
[27] T. Taleb et al., “Ease: Epc as a service to ease mobile core network deployment over cloud,” IEEE Netw., vol. 29, no. 2, pp. 78–88, Mar. 2015.
[28] T. Taleb and A. Ksentini, “Gateway relocation avoidance-aware network function placement in carrier cloud,” in Proc. 16th ACM Int. Conf. Modeling, Anal. Simulation Wireless Mobile Syst., Barcelona, Spain, Nov. 2013, pp. 341–346.
[29] M. Bagaa, T. Taleb, and A. Ksentini, “Service-aware network function placement for efﬁcient trafﬁc handling in carrier cloud,” in Proc. IEEE Wireless Commun. Netw. Conf., Istanbul, Turkey, Apr. 2014, pp. 2402–2407.
[30] S. Clayman, E. Maini, A. Galis, A. Manzalini, and N. Mazzocca, “The dynamic placement of virtual network functions,” in Proc. IEEE Netw. Oper. Manage. Symp. (NOMS), May 2014, pp. 1–9.
[31] T. Taleb, M. Bagaa, and A. Ksentini, “User mobility-aware virtual network function placement for virtual 5G network infrastructure,” in Proc. IEEE Int. Conf. Commun. (ICC), Jun. 2015, pp. 3879–3884.
[32] J. Zhang, F. Dong, D. Shen, and J. Luo, “Game theory based dynamic resource allocation for hybrid environment with cloud and big data application,” in Proc. IEEE Int. Conf. Syst., Man, Cybern., (SMC), San Diego, CA, USA, Oct. 2014, pp. 1128–1133.
[33] G. N. Iyer and B. Veeravalli, “On the resource allocation and pricing strategies in compute clouds using bargaining approaches,” in Proc. 17th IEEE Int. Conf. Netw. (ICON), Singapore, Dec. 2011, pp. 147–152.
[34] A. Baharlouei and B. Jabbari, “A dynamic resource allocation scheme using nash bargaining game for the uplink of multiuser OFDM systems,” in Proc. 78th IEEE Veh. Technol. Conf. VTC-Fall, Las Vegas, NV, USA, Sep. 2013, pp. 1–5.
[35] Z. Zheng, L. Song, D. Niyato, and Z. Han, “Resource allocation in wireless powered relay networks through a nash bargaining game,” in Proc. IEEE Int. Conf. Commun. (ICC), Kuala Lumpur, Malaysia, May 2016, pp. 1–6.
[36] G. Zhang, H. Zhang, L. Zhao, W. Wang, and L. Cong, “Fair resource sharing for cooperative relay networks using nash bargaining solutions,” IEEE Commun. Lett., vol. 13, no. 6, pp. 381–383, Jun. 2009.
[37] T. Taleb and K. Hashimoto, “MS2: A novel multi-source mobilestreaming architecture,” IEEE Trans. Broadcast., vol. 57, no. 3, pp. 662–673, Sep. 2011.
[38] F. Z. Yousaf and T. Taleb, “Fine-grained resource-aware virtual network function management for 5G carrier cloud,” IEEE Netw., vol. 30, no. 2, pp. 110–115, Feb. 2016.
[39] A. Ksentini, T. Taleb, and K. B. Letaif, “Qoe-based ﬂow admission control in small cell networks,” IEEE Trans. Wireless Commun., vol. 15, no. 4, pp. 2474–2483, Nov. 2016.

[40] L. Koskimies, T. Taleb, and M. Bagaa, “QoE estimation-based server benchmarking for virtual video delivery platform,” in Proc. IEEE Int. Conf. Commun. (ICC), Paris, France, May 2017, pp. 1–6.
[41] J. F. Nash, Jr., “The bargaining problem,” Econometrica, vol. 18, no. 2, pp. 155–162, 1950.
[42] E. Kalai and M. Smorodinsky, “Other solutions to Nash’s bargaining problem,” Econometrica, vol. 43, no. 3, pp. 513–518, May 1975.
Ilias Benkacem received the B.Sc. degree in Mathematics and Physics Higher School Preparatory Classes for Engineering Schools (CPGE), Tangier, Morocco, in 2013, and the Engineer’s degree from the National Superior School of Computer Science and System Analysis, Mohammed V University, Rabat, Morocco, in 2016. He is currently pursuing the Ph.D. degree with the School of Electrical Engineering, Aalto University, Finland. Since 2017, he has been involved in European Project 5G!Pagoda Horizon 2020 for a scalable 5G network slicing management and orchestration framework for distributed edge dominated network infrastructures. His current research interests include MEC, NFV, SDN, and content delivery in ICN/CDN networks, particularly in 5G networks.
Tarik Taleb received the B.E. degree (Hons.) in information engineering and the M.Sc. and Ph.D. degrees in information sciences from GSIS, Tohoku University, Sendai, Japan, in 2001, 2003, and 2005, respectively. He is currently a Professor with the School of Electrical Engineering, Aalto University, Espoo, Finland. He is a member of the IEEE Communications Society Standardization Program Development Board. In an attempt to bridge the gap between academia and industry, he founded the IEEE-Workshop on Telecommunications Standards: From Research to Standards, a successful event that was recognized with the BestWorkshop Award by the IEEE Communication Society (ComSoC). Based on the successof this workshop, he has also founded and has been the Steering Committee Chair of the IEEE Conference on Standards for Communications and Networking. He is the General Chair of the 2019 edition of the IEEE Wireless Communications and Networking Conference to be held in Marrakech, Morocco. He is /was on the Editorial Board of the IEEE TRANSACTIONS ON WIRELESS COMMUNICATIONS, the IEEE Wireless Communications Magazine, the IEEE JOURNAL ON INTERNET OF THINGS, the IEEE TRANSACTIONS ON VEHICULAR TECHNOLOGY, the IEEE COMMUNICATIONS SURVEYS & TUTORIALS, and a number of Wiley Journals. He is an IEEE Communications Society (ComSoc) Distinguished Lecturer.
Miloud Bagaa received the Engineer’s, master’s, and Ph.D. degrees from the University of Science and Technology Houari Boumediene, Algiers, Algeria, in 2005, 2008, and 2014, respectively. From 2009 to 2015, he was a Researcher with the Research Center on Scientiﬁc and Technical Information, Algiers. From 2015 to 2016, he was with the Norwegian University of Science and Technology, Trondheim, Norway. He is currently a Senior Researcher with Aalto University. His research interests include wireless sensor networks, Internet of Things, 5G wireless communication, security, and networking modeling. From 2015 to 2016, he received the Post-Doctoral Fellowship from the European Research Consortium for Informatics and Mathematics
Hannu Flinck received the M.Sc. and Lic.Tech. degrees in computer science and communication systems from the Helsinki University of Technology (Aalto University) in 1986 and 1993, respectively. He was with Nokia Research Center and the Technology and Innovation Unit of Nokia Networks in various positions. He is currently a Research Manager with Nokia Bell Labs, Espoo, Finland. He has been actively participating in a number of EU research projects. His current research topics include 5G network architecture, IP protocols, and virtualization.

