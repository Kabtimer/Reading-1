Low-cost LoRa image IoT device for visual
surveillance applications
Prof. Congduc Pham
http://www.univ-pau.fr/~cpham Université de Pau, France

Contents
q We will show how to build a low-cost, long-range image IoT device for visual surveillance applications
q You should read first the tutorials on our low-cost and longrange IoT platform
q "Low-cost LoRa IoT device: a step-by-step tutorial" to understand the general long-range IoT device concepts
q "Low-cost LoRa gateway: a step-by-step tutorial" to understand the gateway part
q The target hardware platform for the image IoT device is the Teensy32
q More information can also be found at http://cpham.perso.univ-pau.fr/WSN-MODEL/toolhtml/imagesensor.html
q Let’s get started…
2

Assembling the hardware

Get the Teensy32 board
The Teensy 3.2 is an Arduinocompatible board by PJRC. It is a small form factor micro-controller board based on the MK20DX256 Cortex-M4. Its rated speed is 72MHz but it can be overclocked at 96MHz or slowed down to 48MHz and 24MHz. The board has 64KB of SDRAM, making it suitable for storing raw image data for various processing such as image compression and image change detection algorithms.
It can have advanced power-saving mode that will be managed with the Snooze library as it will be explained later on in the software section.
4

Get the 4D System uCamII camera
The CMOS uCamII camera is from 4D systems. The uCamII is connected to the Teensy32 board through an UART interface at 115200 bauds. The uCamII is capable of providing both raw and JPEG bit streams but we are not using this last feature as it is impossible from the delivered JPEG bit stream to build a packet stream tolerant to packet losses. Instead, we retrieve raw 128x128 8-bpp grey scale images from the uCamII then we operate image compression on the board.
5

CS
SCK 3.3v MOSI MISO CS

ucamII
Pin 1 Pin 1
TX RX
UART1

SCK

3.3v GND RAW

+

Connecting everything
q The radio module
q MOSI, MISO, CLK and CS of SPI bus are connected to corresponding pins of the Teensy32. VCC for the radio is connected to the 3.3V pin of the Teensy32.
q The uCamII module
q It is connected to Teensy's UART1 interface q VCC for the uCAM needs between 4.5V and 9V that the
Teensy cannot deliver. So a wire from the battery pack will be directly connected to uCam's pin 1.
q The battery pack
q Use 4 AA batteries to deliver about 6V
q The leds
q 2 leds will be connected to show operation of the board: capture led (red) and sync led (green)
q Connect red and green to Teensy's pin 18 & 19 respectively
7

Putting in a box and using different lenses

56° lens

76° lens

116° lens

The uCamII is shipped with a 56° angle of view lens but 76° and 116° lenses are also available for various application needs.
8

Updating to the uCamIII
q The uCamII is now replaced by the uCamIII which has backward compatibility
q The uCamIII adds a hardware RESET pin that can be used to reset the camera module when synchronization is lost with the camera. This was definitely lacking in the uCamII
9

Getting, compiling & uploading the software

Getting the software
You will need the Arduino IDE. You can take the latest version but it is not mandatory. Then you need to install the Teensyduino add-on to the installed Arduino IDE. You can download all versions of Teensyduino on www.pjrc.com but take care to choose a version that is compatible with you Arduino IDE version. Then go to our github: https://github.com/CongducPham/LowCostLoRaGw . Go into the Arduino folder and get Arduino_LoRa_ucamII, SX1272 and uCam folder. Copy Arduino_LoRa_ucamII into your “sketch” folder and SX1272 & uCam into “sketch/libraries”
11

Compiling
Open the Arduino_LoRa_ucamII sketch and select the Teensy32 board. You can use 72MHz version. Connect the Teensy to your computer. Then, click on the « verify » button
12

Uploading & serial monitor

After compilation, Teensyduino will display the Teensy specific control window indicating that you may have to press the RESET button on the Teensy board to upload the sketch.
Please read the Teensy troubleshooting section at https://www.pjrc.com/teensy/troubleshoot.html

Once the program has been uploaded you can check the image device output on the Arduino Serial Monitor. In real-world deployment scenario, you have to rely on the leds to know how the image device is operating.
13

Default behavior
q The default behavior is defined by the following main compilation define statements
q #define LOW_POWER & #define LOW_POWER_HIBERNATE q #define USEREFIMAGE q #define GET_PICTURE_ON_SETUP
q Once powered on, the image device will therefore
1. Take an image and store it as the reference image 2. Sleep for DEFAULT_INTER_SNAPSHOT_TIME (e.g. 60s) using low-
power mode 3. Wake-up, take an image and compare with reference
image 4. Transmit to the gateway the new image on change
detection 5. Cycle back to step 2
q DEFAULT_INTER_SNAPSHOT_TIME can be easily changed 14

Led indications
q Sync led (green led)
q The green led shows that the ucam has successfully syncked
q Capture led (red led)
q When device is initiating an image capture the red led is ON q The red led will blink once when transmitting each packet q When device is receiving a command, the red led will blink 5 times
q On startup
q The green led will blink 5 times then the red led will be ON during the sync attempts q When ucam has synched, green led will be ON for 1s q If the red led stays ON, it means that the ucam is not ready, reset the board by unplugging
and plugging again the VCC wire; repeat the process until the green led turns to ON
q Taking first reference image
q The red led will blink 5 times then the green led will blink 3 times to indicate that raw image is encoded and for each transmitted image packet the red led will blink
q Waking-up for image change detection
q The red led will be ON and once camera has synched the green led will blink 3 times q The red led will then be OFF and if there have been changes, will blink for each image
packet transmission
15

Image encoding scheme

adjustable image quality factor Q

raw 16384b

Q=100; 9768b (1.67) Q=90; 5125b (3.2)

Q=80; 3729b (4.4)

Q=70; 2957b (5.5)

PSNR=51.344 Q=60; 2552b (6.4)

PSNR=29.414 Q=50; 2265b (7.2)

PSNR=28.866 Q=40; 2024b (8.1)

PSNR=28.477 Q=30; 1735b (9.5)

PSNR=28.024 Q=20; 1366b (12)

PSNR=27.912 Q=10; 911b (18)

PSNR=27.423 Q=5; 576b (28.44)

PSNR=26.933

PSNR=26.038

PSNR=25.283

PSNR=23.507

16

packet loss-tolerant bit stream, any reception order

10-15kms in LOS, in 1-hop

1

2

3

Q=50; 10% pkt losses Q=50; 20% pkt losses Q=50; 30% pkt losses

Q=50; 40% pkt losses Q=50; 50% pkt losses Q=50; 60% pkt losses
17

Image change detection for Intrusion detection
Very lightweight « simple-differencing » method done on-the-fly when reading raw image data. Change detection takes into account modification in image's luminosity: #define LUM_HISTO
18

Image encoding performances, Q=10 & 20

96MHz

72MHz

48MHz

24MHz

MSS=240

N

S

Quality*

Factor* encode* packetiza

Q

time tion*time

100 204

220

90 226

86

80 226

58

70 ra2w25 1638448b

60 224

44

50 222

39

40 224

37

30 224

33

20 223

31

10 223

26

5

223

23

number* size*in*bytes*

encode* packetiza encode* packetiza encode* packetiza

of* (compression*

time tion*time time tion*time time tion*time packets ratio)

234

281

309

420

565

813

47 9982***(1.64)

263

109

349

164

644

322

23 5090***(3.21)

262

76

348

112

640

218

16 3595***(4.55)

26Q1=20; 136366b(12)347 Q=9120; 911b6(4108) 178

13 2842***(5.76)

2661pkts 56

347 4 p8k2ts 639

162

11 2461***(6.65)

258

51

342

75

630

150

10 2129**(7.69)

260

47

346

69

637

139

9 1898***(8.63)

260

44

345

64

637

127

7 1608***(10.19)

260

39

345

58

636

115

6 1279***(12.81)

260

31

345

50

636

99

4 824****(19.88)

259

31

344

45

635

89

3 503****(32.57)

q Capturing an image and encoding it roughly take 2.3s

q Time to sync & config ucam is about 400ms

q Time to read raw image data from ucam is 1512ms

q Time of compare with reference image is neglectible

q Time for encoding and packetization is about 300ms

19

Teensy 3.2 sync cam, config cam, read&compare, encode, packetization
251.42 mJ/s

0.0016

Baseline consumption

0.0014

0.0012

0.001

0.0008

0.0006

0.0004

0.0002

0

0.5

1.5

Led 500ms Sync cam 127.31 mJ
Led 200ms Config cam127.31 mJ
Led 100ms Led 100ms Encode 128.46 mJ Led 100ms

Global sync, config, read&compare, encode

consumption is about 1.254 J about 2.3s

Leds are here to delimit the

various operations phases

of the device

871.03 mJ

E
Read data

Baseline consumption

2.5

3.5

4.5

5.5

6.5

Power consumption

96MHz 72MHz 48MHz 24MHz

baseline (mJ/s)
251.42 219.54 211.19 160.95

baseline, hibernate
(mJ/s)
0.834 0.834 0.834 0.834

Read+encode

read (mJ) encode (mJ)

(mJ)

871.03

128.46

999.49

834.97

143.58

978.55

813.30

185.58

998.88

719.09

302.48

1021.57

q Using the nominal 72MHz mode minimizes consumption q Hibernate mode when idle consumes about 167uA q When transmitting the board consumes about 68mA q Assuming
q 1 image/hour (2s) q Image encoding with Q=10 (300ms) q Transmission of 4 packets (8s)
q Then can run for 268 days on 4 AA batteries 21

Interacting with device
q Must disable low-power mode to enable receive window at the image device
q Comment #define LOW_POWER
q By connecting the Teensy to your computer
q String commands can be passed to the device from the Arduino serial monitor
q By remote LoRa message
q Use for instance an interactive device to send string commands to the image device
q Command starts with /@ and ends with #
22

String command list
q Command starts with /@ and ends with # q Example
q Set inter-snapshot time to 30s: /@F30000# q Make a snapshot: /@I#
23

Gateway side
q Support of image processing is in the lora_gateway/ucamimages folder
q Read the README at https://github.com/CongducPham/LowCostLoRaGw/tree/maste r/gw_full_latest/ucam-images for installation instructions
q Received encoded images will be saved by post_processing_gw.py in /home/pi/Dropbox/LoRatest/images
q post_processing_gw.py will call the image decoding program to decode in BMP the encoded image and will move the BMP file into /var/www/html/images/uploads/node_x where x is the address of the device
q Connect to http://192.168.200.1/images to view the received images (assuming you connect to the gateway's WiFi network)
24

Receiving image packets
q When post_processing_gw.py receives the first image packet for a new image, it creates a file in /home/pi/Dropbox/LoRa-test/images
q For instance if you receive a first image from sensor 3 taken by camera 0 and encoded with a quality factor of 10, then the BMP image will be named: ucam_0-node_0003cam_0-Q10.dat
q A timer will also be set (e.g. 90s in the current distribution) to close the file and start the image decompression procedure
q When decompressing the compressed image data in BMP format, the file will be named: ucam_0-node_0003-cam_0Q10-P4-S847.bmp for instance to indicate that 4 packets has been received and the real compressed size is 847 bytes. 25

Out-of-the-box !

Periodic On-demand On event

Last image from all devices

Embedded web server http://192.168.200.1/images

All image from a given device
26

Default configuration
#define LORAMODE 1 #define UCAM_ADDR 4 The default configuration in the Arduino_LoRa_ucamII example is: Send packets to the gateway (one or many if in range) LoRa mode 1 (BW=125kHz, SF=12, freq=865.2MHz) Node address is 4
27

