This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

TinyOS-New Trends, Comparative Views and
Supported Sensing Applications: A Review
Muhammad Amjad, Muhammad Sharif, Muhammad Khalil Afzal, and Sung Won Kim‡ Department of Computer Science
COMSATS Institute of Information Technology, Pakistan ‡ Department of Information and Communication Engineering
‡Yeungnam University, Republic of Korea Email: amjadbhutta0706@gmail.com, muhammadsharifmalik@yahoo.com,
khalil 78 pk@yahoo.com, ‡swon@yu.ac.kr

Abstract—The wireless sensor network (WSN) is an interesting area for modern day research groups. Tiny sensor nodes are deployed in a diversity of environments but with limited resources. Scarce resources compel researchers to employ an operating system that requires limited memory and minimum power. Tiny Operating System (TinyOS) is a widely used operating system for sensor nodes, which provides concurrency and ﬂexibility while adhering to the constraints of scarce resources. Comparatively, TinyOS is considered to be the most robust, innovative, energy-efﬁcient and widely used operating system in sensor networks. This paper looks at the state-of-the-art TinyOS and the different dimensions of its design paradigm, programming model, execution model, scheduling algorithms, concurrency, memory management, hardware support platforms and other features. The addition of different features in TinyOS, makes it the operating system of choice for WSNs. Sensing nodes with TinyOS seem to show more ﬂexibility in supporting diverse types of sensing applications.
Index Terms—Wireless sensor networks, operating system, sensor nodes, energy efﬁciency.
I. INTRODUCTION
Sensing nodes in wireless sensor networks (WSNs) are smaller in size, compared to other nodes in conventional networks. These nodes sense their environment, process the sensed data and then transmit that data to their destination [1]. Among sensor nodes, mutual coordination and an exchange of huge amounts of information can be witnessed. Rapid progression in micro-electro-mechanical systems (MEMS) has made it much easier to deploy sensor nodes in a wide variety of situations, such as battleﬁelds, habitat monitoring, forecasting the weather, health, mechanics, transportation, underwater sensing, ecological sensing and other military applications [2, 3, 4, 5]. The sensors, being very small in size, have a limited battery life and resources. These limitations are taken into consideration when designing communications models, network topologies, various algorithms and operating systems (OSs) for tiny sensing nodes [6].
WSN researchers have help with different coding parameters and various languages in providing an OS for the proper functioning of sensing nodes [7, 8]. Different operating systems are now in place for sensor nodes, but Tiny Operating System (TinyOS) is acknowledged as the most suitable one

to operate in a resource-starved network like a WSN. Tiny sensing motes operate in a variety of ﬁelds. These nodes are equipped with even more limited power resources. Replacement of batteries incurs serious overhead. Therefore, one requirement is that an energy-efﬁcient OS must be designed for these sensing nodes. TinyOS is especially designed for low power sensing motes. It was ﬁrst developed as a research project, but is now acknowledged as an open OS for sensing motes [9]. There are four main requirements that compelled researchers to come out with novel, ﬂexible and concurrent versions of TinyOS for sensing motes.
1) Limited Resources: Sensing motes with limited resources and smaller sizes have very limited physical and logical resources to carry out their sensing operations. A processor of usually 1MIPS (million instructions per second) with very small memory is used in these tiny sensing motes. New advances in sensing technology are made by taking into consideration these requirements.
2) Reactive Concurrency: Sensing motes sense the data and then process that data. During processing, some type of data aggregation or compression is performed. After processing, data are transferred to other nodes or a base station (BS). From the BS, the data are utilized for further analysis. For all these operations, it is a requirement for the OS of the sensing nodes to be highly concurrent. Reactive concurrency enables the OS to handle real-time tasks for the sensing operation.
3) Low Power: Sensing motes are installed in various locations. Their replacement is not an easy task. Therefore, changing or charging the batteries incurs serious overhead. For sensing motes to operate untethered, a continuous power supply is mandatory. Therefore, TinyOS was designed by taking into consideration the limited power of sensing motes. TinyOS is not only an energy-efﬁcient OS; it also helps other sensing applications to conserve energy in their sensing operations.

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

4) Flexibility: It is necessary for the OS of sensing motes to be ﬂexible enough to support novel and diverse sensing applications. TinyOS supports modularity and a large number of hardware platforms.
TinyOS was ﬁrst developed in 2000 in University of California, Berkeley. It was started as the research project and was used only by the researchers. In late 2000, a systematic architectural directions for TinyOS was proposed [186]. TinyOS version 0.6 was introduced in 2001, and addressed certain limitations in its programming model. In January 2002, a bootcamp was arranged for TinyOS, while the core work group for TinyOS was formed in 2004. Version 2.0 and 2.0.2 were introduced in 2006 and 2007, respectively. Safe threads were added in TinyOS in 2008. Version 2.1, and 2.1.2 became available in 2010 and 2012. Currently, TinyOS development is transformed to GitHub, where the researchers can contribute to its development. Now, there are about 35,000 downloads of this free available operating system per year [12].
A monolithic architecture, novel t-kernel integration, efﬁcient power management, concurrency handling and supportive components for diverse types of communications make TinyOS a stable and self-contained OS. Robust systems were once categorized as difﬁcult to write, but evolving language extensions in TinyOS have made it an OS for embedded systems. TinyOS has made its way into well-known computing projects, such as Cisco’s smart grid systems and Xen [11, 12, 13]. This paper encompasses the detailed features of TinyOS, its architectural and component models, their development, and the main advantages it added in making sensing node operations more and more reliable, ﬂexible and robust. Our study has taken into consideration all possible aspects of TinyOS, from the programming model to its supported sensing applications. It is the ﬁrst study of TinyOS that shows new trends and its novel supportive sensing applications. Table I deﬁnes the abbreviations used extensively in the paper, while Table II shows a comparison of this study and already existing surveys on TinyOS and other OSs for WSNs.
The rest of the paper is organized as follows. Section II describes the programming model of TinyOS, which consists of concurrency and execution. Section III surveys the scheduling algorithms used for TinyOS. Section IV and Section V cover the memory and energy management techniques of TinyOS. In Section VI, energy management by TinyOS, especially in the communications process with reference to communications protocols, is discussed. Section VII describes the simulators of TinyOS. A detailed comparative view of TinyOS with other OSs for WSNs is given in Section VIII. Section IX looks at the TinyOS-supported hardware platforms. Section X lists the TinyOS-supported sensing applications, while in Section XI, limitations and modiﬁcations of TinyOS are broadly discussed.
II. PROGRAMMING MODEL
Programming TinyOS for tiny sensing nodes has various constraints. The scattered and distributed nature of nodes confronts the programmer. Different programming models have

TABLE I: ABBREVIATIONS

Symbol ADRS ASVM BS CHs CSP CSMA/CA
CTP DS DSVR DHCP EDF EATT FIFO HAL HIL HPL ICEM
IoT IPFIX LAD LEACH MAC MEMS OS QoS RTS SANETs SOSANETs SPIN
TCP TinyOS TinyOS LPL
TOSThread TOS-PRO TOSSTI
TORP
TOSSF
TOSSIM UTOS
WSNs

Description Adaptive Double Ring Scheduling Application Speciﬁc Virtual Machines Base Station Cluster Heads Communicating Sequential Processes Carrier Sense Multiple Access/Collision Avoidance Collection Tree Protocol Deadline Scheduler Destination Sequence Vector Routing Dynamic Host Conﬁguration Protocol Earliest Deadline First Energy-Aware Target Tracking First In First Out Hardware Adaptation Layer Hardware Interface Layer Hardware Presentation Layer Integrating Concurrency Control and Energy Management Internet of Things IP Flow Information Export Location-Aided Routing Low-Energy Adaptive Clustering Hierarchy Medium Access Control Micro-Electro-Mechanical Systems Operating System Quality of Service Real-Time Scheduling Sensor Actuator Networks Service-Oriented Sensor Actuator Networks Sensor Protocol for Information via Negotiation Transmission Control Protocol Tiny Operating System Tiny Operating System Low-Power Listening Tiny Operating System Threads Tiny Operating System Preemptive Original Tiny Operating System with Software Thread Integration Tiny Operating System Opportunistic Routing Protocol Tiny Operating System Scalable Simulation Framework Tiny Operating System Based-Simulator Untrusted Extensions for Tiny Operating System Wireless Sensor Networks

been adopted to provide an OS for sensing nodes. Choosing a particular programming model mainly depends upon three attributes of WSNs: ﬁrst, the nature of the sensing nodes; second, what tasks the nodes are going to perform within the group; and third, the network type [14].
An OS for sensing nodes should be more collaborative, fault tolerant and futuristic. The programming model for TinyOS follows in the footsteps of component-based programming models. One of the dialectics of C, commonly known as NesC, is behind the programming of the novel TinyOS for WSNs. The main module of NesC consists of an editor, a parser, a model generator, a simulator and a model checker. These modules of the NesC architecure are shown in Fig. 1 [15].
The whole programming model of TinyOS is a combination

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

TABLE II: Comparison between this study and available surveys

Approaches Programming Model

Scheduling

Energy Approaches

Conservation

TinyOS-based Efﬁcient Communications

Energy Network

Simulators
Comparative View of TinyOS with Other WSNs OSs TinyOS-based Supported Sensing Applications
Advanced Versions of TinyOS

Key Concepts
Interfaces Components Concurrency FIFO Other Advanced Scheduling Approaches TOSSTI
HPLP Energy Tracking Specialized TinyOS Transport Layer Protocols
TinyOS-supported Routing Protocols TinyOS-supported MAC Protocols TinyDB TinyOS Support of IP and IPv6 TinyOS for ZigBee TinyLTS TinyOS for Heterogeneous Networks TOSSIM (Basic TinyOS Simulator) Other Advanced Simulators Other OSs Include Contiki, LiteOS, SOS, MANTIS, Nano RK Basic Sensing Applications
Advanced Applications TinyOS 2.0 TinyWiﬁ Dynamic TinyOS

This Study
!!!!! ! !!!
! ! !! !!! ! !!
! !!!!

Phani et al
[!!!!11]
!
! ! ! !!

Farooq et
!al [10] !!
! !
! !

Strazdins et al [20]
! !
!!
! !

Dong et al
[!!!!8]
!

of different components [16]. These components, when categorized, fall into three abstractions: commands, events and tasks [17]. A command initiates a component to perform some type of operation, which is then narrated into a request message. An event component displays output. Communication between the components is achieved with the help of tasks. Components are also provided with the interfaces. These component interfaces fall into two classes.
1) Interfaces that the component uses. 2) Interfaces the component provides.
Interfaces also use a bidirectional feature for their operation. In addition to these component-based interfaces, TinyOS has other interfaces for its various operations [18].
Contracts [19] are now employed for the interfaces, which are used again and again. Hence, the components that are reused by the applications are now replaced by the interface contracts [21, 22, 23]. Many hardware abstractions were also added to TinyOS [24, 25]. Using NesC and then joining the components is not an easy task in coding for TinyOS. Linking models are apparently not the same for C and its dialectics

[26, 27]. Different design patterns have been introduced for software to evolve a programming model for TinyOS in NesC [28]. The programming model of TinyOS in NesC mainly focuses on concurrency and execution of tasks. These two features and their support in TinyOS are discussed below.
A. Concurrency Support
In NesC programs, components of user applications not only interact with TinyOS code but also with one another. This has been achieved with inclusion of concurrency in TinyOS. TinyOS follows an event-driven concurrency model [29, 30]. The event-driven concurrency model in TinyOS sometimes introduces certain complexities in the normal operation of sensing nodes. As sensing nodes have to operate undeterred, blocking certain components of an application can block the whole sensing operation. Race condition in the NesC compiler has already been integrated to mitigate concurrency-related problems. Application programmers now have multiple techniques for checking concurrency-related errors, out of which a process algebra known as communicating sequential processes (CSP) [31] is highly used. Another method to achieve

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

Sensor X NesC Program

Network Topology

Assertions

Editor

NesC Parser

Network Parser

Parser Assertion Parser

Hardware Model Collection

Network Model

Graphic Simulator
Simulator

Assertion Collection

Sensor Model Model Generator Collection

Counter Example

On-the-fly Model checker
Model checker

Fig. 1: Architecture of NesC (adapted from [15])

ISR

The space of executing events

Timer ADC

UAR

Process Event
Return

Scheduling Program
Head

No task and event
Tail Task 2 Task 3

Sleep

Pop the head task Of queue

Task 1

Insert task to the Tail of queue
Post Task

Run Taks Return

Space of running task

Fig. 2: TinyOS scheduler (adapted from [44])

maximum concurrency with scarce processing resources is an implementation of TinyOS threads (TOSThreads). The TinyOS concurrent model follows a synchronous and asynchronous model of execution. In TOSThreads, threads are categorized into application-level threads and kernel-level threads. Kernellevel threads are assigned with high priority and cannot be preempted by user-level threads. User-level threads cannot interact with OS-level threads, either synchronously or asynchronously [32, 33].
TOSThreads are used to change the conventional TinyOS non-preemptive behavior to preemptive behavior. The addition of these TOSThreads brings extra complexity to TinyOS. Due to this complexity, the component-based programming model with preemptive scheduling lost its efﬁciency. To address this issue in TOSThreads, another preemptive technique has been added; that approach is the TinyOS preemptive original (TOSPRO) approach. The main beneﬁt of TOS-PRO is enhanced concurrrency in TinyOS. This improvement in concurrency results in system improvements, which ﬁnally results in fast execution of real-time tasks [34].
Enhancing concurrency has been an interesting area in WSN OS design. To improve concurrency, lightweight, thread-like abstractions, called ﬁbers in concurrency modeling, are now also seen in TinyOS [35]. In recent developments, the concurrency information of expected applications is obtained before execution via Integrated Concurrency and Energy Management (ICEM) in device drivers [36].
B. Execution Model
TinyOS written in NesC has an execution model that is sensitive to interrupts. Different computational tasks are executed non-preemptively and follow the pattern of run to completion. However, the main hurdle in execution of such tasks is the occurrence of interrupts in the execution of tasks [15]. TinyOS supports different types of hardware platform in the WSN domain. These different platforms introduce their own interrupts relating to their hardware designs. Software interrupts have little overhead in execution of tasks [37].

Tiny sensing nodes with limited processing capability have to time-share a processor among applications, the OS and different communications protocols. Better execution and fast convergence in this case can be achieved when individual components are virtually partitioned. An event-driven execution model produces maximum concurrency that works within the limited resources, like energy and memory. Introduction of threads to gain more execution and concurrency also demands more memory [38, 39]. Now researchers are ﬁnding ways to predict memory and power demands by applications before they make their way into real sensing networks [40]. Different virtual machines are now in place to predict the future demands of user applications and communications protocols for memory and execution time. Application-speciﬁc virtual machines (ASVM) can go to the extent of reprogramming already deployed WSNs [41, 42]. Different visualizing toolkits for TinyOS have also been constructed to assist programmers. With these toolkits, execution time of different tasks can be predicted. In [43], a toolkit for TinyOS 2.0 was developed to predict the runnng time of different embedded applications.
III. SCHEDULING ALGORITHMS
TinyOS programmed in NesC is equipped with the basic components of events and tasks. In the initial versions of TinyOS, there was a single type of task. Therefore, a wide variety of scheduling algorithms was not needed. A simple scheduler was integrated to assist the single taskdependent TinyOS. A basic task scheduler for TinyOS was run to complete the task scheduler. It was a non-preemptive task scheduler. The basic TinyOS scheduler is shown in Fig. 2 [44]. This earlier form of task scheduler was ﬁrst in, ﬁrst out (FIFO) [8, 10, 11, 17, 20, 44, 45] . Now, WSNs have found their applications in multiple ﬁelds. Therefore, a wide variety of tasks have to be handled by the OS. With the increasing number of tasks, the number of scheduling algorithms has also increased. FIFO is now not the only scheduling parameter

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

Relevant References [8], [10], [11], [17], [20], [44], [45] [46], [47], [48]
[44], [47], [48] [48], [49], [50], [51]
[47], [48]
[47], [48], [50]
[52]
[48]
[48]

Scheduler
FIFO
Priority Scheduling
EDF
RTS
DS
PriorityBased Soft Real-Time Scheduling Job: Scheduling Policy ADRS
Co-Routine Scheduling

TABLE III: TinyOS Scheduling Policies: An Overview

Type

Concept

Advantages

NonPreemptive

First come, ﬁrst served

Simple tasks can easily be scheduled

Preemptive/Non- Critical tasks are given It can ensure QoS

Preemptive

high priority

NonPreemptive Preemptive

Priority based on execution deadline of tasks Involves many other scheduling policies

Dynamic decisions of priority Real-time trafﬁc is handled

NonPreemptive
Preemptive/NonPreemptive

Remaining execution deadline is used for priority of tasks Real-time Tasks are assigned high priority

Increases throughput and resolves overload
Increased execution of real-time tasks

Preemptive

It is a multithreading and It was designed for execu-

multitasking approach

tion of long tasks

Preemptive/NonPreemptive
Preemptive

Two queues are maintained with different priorities Multitasking is incorporated in this scheduling approach

Two queues help execute longer, smaller, and realtime tasks more efﬁciently Threads are easily managed

Limitations
Longer tasks have to wait, which causes degradation of system responsiveness
Incurs overhead in resource-scarce sensing nodes processors Real -time scheduling is not supported Other complex tasks introduce complexities to the system Low-priority jobs suffer more
Tasks other than real-time tasks suffer more
Collisions and message loss can be seen
More memory needed which burden the resource scarce sensing system Separate execution stack creates serious overhead

in TinyOS. Multiple scheduling techniques have now been integrated [44].
A. Priority Scheduling
In this technique, tasks are given priority, and that priority is based on their importance. Real-time and other network packets are now given the highest priority to ensure quality of service (QoS). TinyOS with priority scheduling is discussed elsewhere [46, 47, 48].
B. Earliest Deadline First (EDF)
In this scheduling technique, real-time sensitive trafﬁc is scheduled. Tasks are now prioritized, depending on their remaining execution times. TinyOS with EDF [44, 47, 48] shows enormous responsiveness towards time-critical data.
C. Real-Time Scheduling (RTS)
Another scheduling algorithm to handle real-time tasks and network packets is the real-time scheduling mechanism. This method employs a pre-emptive technique to execute a given task in TinyOS [49, 50]. Real-time tasks can also be scheduled by classifying them into periodic and aperiodic tasks. These periodic tasks, known as time-bounded tasks are then executed by the periodic scheduler, and aperiodic tasks can be scheduled with a time-unbound scheduler known as the aperiodic scheduler. Response time for aperiodic tasks has also improved many times over. In this category of real-time scheduling, energy is conserved many times, as compared to other scheduling techniques used in TinyOS [48, 51].

D. Deadline Scheduler (DS)
This is an enhanced version of FIFO scheduling. However, deadline is a new parameter added to the TinyOS scheduling technique. Incoming tasks are now categorized based on their deadlines [47, 48].
E. Priority-Based Soft Real-time Scheduling
Certain tasks take a lot of time in their execution. This can lead to overloading. In this situation, real-time tasks are not executed properly. To mitigate this problem, priority-based soft real-time scheduling was introduced in TinyOS for smooth execution of real-time tasks [47, 48, 50].
F. Job: A New TinyOS Based Task Scheduler
An earlier version of the TinyOS task scheduler was run to completion, non-preemptive. This introduced a problem for larger tasks because these tasks had to wait for a long time, which reduces system responsiveness. This issue was addressed with cooperative and multithreading multitasking. Job is a task scheduler for TinyOS, which incorporates cooperative and multithreading multitasking approaches for executing the larger tasks in systems [52].
G. Adaptive Double-Ring Scheduling (ADRS)
In this TinyOS scheduling method, there are two types of task cycle queue. One task cycle queue is given higher priority than the other. Real-time tasks can also be executed in ADRS, because they are placed in a task cycle queue that has a higher priority. ADRS is simulated in the TinyOS-based simulator (TOSSIM). The simulation results showed that TinyOS using ADRS provides better performance [48].

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

H. Co-Routine Scheduling
Multitasking is incorporated into TinyOS with the help of a co-routine scheduling mechanism. Tasks are labelled as routine, and each routine has its own stack. This method of having a separate execution stack is more similar to having threads in execution [48].
With the growing number of supported sensing applications in TinyOS, scheduling techniques have also been modiﬁed. Different routing techniques also introduced new packet scheduling methods to facilitate better convergence and QoS [53]. Scheduling the power in the network is also endorsed as the main scheduling research domain [54]. Details of the above-mentioned scheduling policies with their advantages and limitations are given in Table III.

UTOS

More overhead Isolation Moderate porting effort Safe execution Fault recovery Some overhead No isolation Low porting effort

IV. MEMORY MANAGEMENT AND PROTECTION

Safe execution

Safe TinyOS

WSNs consisting of tiny nodes have to operate with limited resources. The available processing power and memory are not enough. Hardware protection of memory is not available in tiny nodes to safely manage the sensed and processed data. Earlier versions of TinyOS only supported static memory allocation due to limited available space [55]. However, gradual revisions, and new enhancements in TinyOS, provide enhanced features like memory safety and memory safety checks. TinyOS 2.0 introduced more memory safety, compared to simple TinyOS 1.0 [56]. TinyOS 2.0 is used as a basis for further enhancements to provide more protection of memory. ”Safe TinyOS” was developed with a main function of providing memory safety to tiny nodes. Various memory checks formed a red line for safe execution of tasks. This red line prohibits bogus and unsafe programs from executing and, in this way, ”Safe TinyOS” provides maximum memory safety for sensing nodes [57].
Untrusted extensions for TinyOS (UTOS) is another revision in TinyOS editions for providing more memory safety, compared to ”Safe TinyOS.” In UTOS, untrusted execution of data is isolated ﬁrst and then terminated. Simpler modiﬁcations are required to transform TinyOS into UTOS. Migration from simple TinyOS to UTOS gives more memory safety, as depicted in Fig. 3 [58]. The size of the OS for WSNs can also be minimized with the help of different programming paradigms. The introduction of protothreads enabled OS developers to write the code for WSN OSs with the fewest possible lines [59]. This reduction in code length demands less memory, which is the core demand for programming a sensing-node OS.
There was also the introduction of UnStacked C in TinyOS. In this approach, applications of a sensornet that support TOSThreads can be modiﬁed in such a fashion that they can easily be transformed into stackless threads during the building process. The UnStacked C approach makes TinyOS memoryefﬁcient and conserves energy [60]. Dynamic TinyOS provides the user with a dynamic auto-update feature in TinyOS and its components, without interrupting the operations of sensing nodes [61].

TinyOS

Fault recovery via reboot
Most efficient
No isolation
No porting effort
No safety
Fault detection and recovery
Fig. 3: Transition of TinyOS from Safe to Untrusted Extensions (adapted from [58])
V. ENERGY MANAGEMENT IN TINYOS
Battery-operated tiny sensing nodes are widely distributed to sense the required data. Replacing the batteries incurs extra overhead on a resource-constrained network. Therefore, every feature of WSNs is taken into consideration while designing them [62]. Different power-saving techniques have been introduced to conserve maximum power. Sensing nodes in some cases are shut down when they are no longer needed for sensing data. Power is dynamically distributed in the whole sensing network [63]. Usually, energy conservation is focused in three major operations of the sensing nodes: processing, communications, and sensing [64, 65].
Different techniques have been incorporated in TinyOS to achieve minimum power utilization. TinyOS with software thread integration (TOSSTI) is a method in which energy is conserved in TinyOS. By the integration of software threads, TinyOS makes efﬁcient use of idle time during transmission, processing and sensing of data [66]. In TinyOS that supports high-power listening (HPL), TinyOS estimates the overall load of the sensing nodes and then dynamically allocates the required energy to the sensing nodes [67]. This can only be possible with accurate estimation of energy consumption in the sensing nodes. Sensing nodes consume energy in a

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

Applications

Energy Tracker

Scheduler

Sensor Driver

Micro controller

Sensor

Radio Driver Radio

Fig. 4: Energy-tracking technique by TinyOS (adapted from [71])

variety of ways [68, 69]. TinyOS, in this case, is the most efﬁcient OS because it estimates the energy consumed by the sensing nodes, by TinyOS itself, and by its components. TinyOS supports various methods of estimating the energy consumption for different applications. One of the methods is the energy tracking system.
In this method, energy-tracking components are added in the TinyOS programming model. These energy-tracking components track the energy consumption of various components in the sensing nodes. Energy tracking of the processor, the transmission module and the sensing module is done with the help of TinyOS. The energy-tracking method is shown in Fig. 4 [70, 71]. Different energy conservation techniques have been implemented using TinyOS. One of the techniques, called energy-aware target tracking (EATT), is used to track the energy consumption and was developed only for TinyOS [72].
VI. TINYOS AND ENERGY-EFFICIENT COMMUNICATIONS
Sensor nodes in WSNs sense data and then transfer them to the BS. This communication is designed to be energy-efﬁcient to save the maximum amount of energy in the system. Signal propagation, reception, packet transmission, idle and sleep behavior of sensing motes are modelled to be energy-efﬁcient [73]. The OS in this regard plays a crucial role. TinyOS, with its advanced components, favors energy-efﬁcient communications. Different mechanisms are supported by TinyOS to estimate the consumption of energy. Accurate consumption of energy for communications helps to estimate the network lifetime and the stability of the whole network. TinyOSs supportive behavior for energy-efﬁcient WSN communications (with relevant references) is shown in Fig. 5.
A. TinyOS Support for Communications Protocols
TinyOS provides compatibility for energy-efﬁcient protocols. A large number of communications protocols are wellsupported in TinyOS. Protocols at the medium access control (MAC) layer, transport layer and network layer are speciﬁcally designed to consume less power. TinyOS, being the most widely used OS for WSNs, is so ﬂexible that it supports the maximum number of energy-efﬁcient protocols.

1) TinyOS Support for Transport Layer Protocols: Protocols for the transport layer have been designed to conserve energy under the limited resources of WSNs. Protocols of the transport layer are well-supported by TinyOS. TinyOS seems to enhance the performance of protocols in the sensing operation. A hybrid, dynamic, reliable protocol was designed for the transport layer, and its performance was measured with TinyOS [74]. Another widely used transport layer protocol is the post-orderbased protocol. This protocol is suitable not only for the transport layer but also for the routing layer. The postorderbased protocol is implemented in TinyOS, and shows the best results with this event-driven OS [75].
2) TinyOS Support for Network Layer Protocols: Instead of conventional routing protocols, energy-efﬁcient routing protocols have been designed for WSNs. So WSN researchers have developed robust and energy-saving routing protocols [76, 77, 78]. TinyOS provides support for these routing protocols to save the maximum amount of energy [79].
Opportunistic routing has been introduced in WSNs. This routing approach seems to conserve more energy in WSNs [80, 81]. A very speciﬁc TinyOS-based opportunistic routing protocol, named the TinyOS opportunistic routing protocol (TORP), was proposed to conserve energy. This approach selects the forwarding nodes in a more efﬁcient way and then forwards data to nearby nodes, and hence, conserves energy in the system. TORP has enhanced network lifetime, scalability, throughput and energy efﬁciency, compared to other conventional routing protocols [82]. Low-energy adaptive clustering hierarchy (LEACH) [83] is the network layer protocol for WSNs. It is a conventional routing protocol for WSNs. The LEACH protocol has been tested on TinyOS. The implementation of LEACH under TinyOS shows that LEACH performs better in conjunction with TinyOS [84]. The LEACH protocol is extensively implemented on TinyOS. It also shows better performance with the TOSSIM simulator. Other routing protocols have also been derived from the LEACH protocol and have been implemented in TinyOS [85]. Routing protocols for ad hoc networks show smooth operation with TinyOS. Comparisons of energy efﬁciency for different routing protocols are made by implementing them under TinyOS. Location-aided routing (LAD) and destination sequence vector routing (DSVR) were implemented using TinyOS. TinyOS supports the energy-efﬁcient communications of these routing protocols [86]. Sensing nodes in WSNs share network trafﬁc load with other nodes in the network. Various load-balancing routing approaches have been proposed for WSNs. A load balancing routing scheme presented by Daabaj [87] enables the sensor nodes to balance the load and provides an energyefﬁcient routing scheme. In this approach, the load-balancing routing algorithm forms a tree-like forwarding table and tracks the packets. Power consumption in energy-balanced routing protocols is measured in TinyOS with dynamic power scaling. With its implementation in TinyOS, dynamic power scaling provides optimal power usage during routing operations [88]. The sensor protocol for information via negotiation (SPIN) is a data-centric routing protocol for WSNs. SPIN follows

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal
TinyOS Support for Energy efficient Communication

TinyOS support for Network protocols

TinyDB [96][97][98]
[99][100] [101]

ZigBee Protocol Stack [107][108][109] [110 ][111]

TinyOS Based Hybrid Networks
[113]

Routing Protocols [82][84][85] [86][87][88] [89]

Transport layer Protocols [74][75]

TinyLTS [112]

TinyOS Based Heterogeneous
Networks [114 ]

IP and IPv 6 [102][103] [104][105]
[106]

MAC Protocols [90][91] [92][93] [94]

Fig. 5: TinyOS-based energy efﬁcient communications

the energy-efﬁcient event-driven delivery model. This routing protocol is implemented using TinyOS and shows the best results in improved network life and stability [89].
3) TinyOS Support for MAC Layer Protocols: Different energy-efﬁcient MAC layer protocols have been designed and tested with TinyOS. Carrier sense multiple access/collision avoidance (CSMA/CA) is extensively used in WSNs. This protocol gives optimal performance with TinyOS. Improved versions of CSMA/CA were also tested on TinyOS-supported simulators, such as TOSSIM and PowerTOSSIM [90]. B-MAC is a well-known second layer protocol that is speciﬁcally designed for TinyOS. This MAC layer protocol has a sleep procedure to stabilize the network. Energy conservation in the MAC layer enhances the overall energy of the sensing nodes [91]. Another protocol in the MAC layer in TinyOS is TinyOS low-power listening (TinyOS LPL). This is an efﬁcient energysaving MAC protocol designed only for TinyOS [92]. X-MAC works well with TinyOS for duty cycled WSNs. In X-MAC, energy is conserved more by employing a shorter preamble. This shorter length preamble makes it the protocol of choice. It was tested with TinyOS, and TinyOS seems to be more compatible with this new version of a MAC protocol [93]. Different versions of MAC protocols introduced compatibility issues. Each MAC layer protocol is suitable for some speciﬁc application or set of applications. These issues introduce the problem of compatibility between protocols. This, in turn, badly affects communications between sensing nodes. To overcome compatibility issues, a MultiMAC protocol stack was introduced in WSNs. This MultiMAC stack is fully supported and developed under TinyOS. With the help of this approach, interoperability problems at this layer are resolved.

The MultiMAC protocol stack initially comprised three wellknown MAC protocols: CSMA/CA, LPL-MAC and TDMA MAC. This stack is more ﬂexible and scalable, because it can support other MAC layer protocols, as well [94].
4) Support for IP and IPv6: Sensing motes, as compared to other network nodes, did not use the conventional internet protocol (IP) addressing scheme. However, new research has enabled tiny sensing motes to use both IP and IPv6 [102, 103]. With the help of IP communications, low-power sensing nodes using TinyOS can communicate directly with conventional IP networks. Both the IETF 6LoWPAN and RoLL research groups have come out with a new benchmark, which focuses on implementation of IPv6 in WSNs with the help of TinyOS [104, 105, 106].
There are certain limitations regarding the use of IP in WSNs. These limitations hindered the use of IP for WSNs. Now various modiﬁcations have been introduced in WSNs OSs architecture to make it suitable for IP. The main challenges faced by WSNs OSs for using IP are discussed as follows [228].
• Large IP header overhead is considered not suitable for tiny low power sensing nodes OS. Sensing nodes radio communication module consumes much energy while transmitting and receiving the IP packet. IP header packet size is 20 bytes for IP and 40 bytes for IPv6. To address this challenge, various header compression approaches are used by the WSNs to use IP and IPv6. TinyOS supports various header compression techniques to make the implementation of IP on WSNs [102].
• Addressing scheme of conventional IP network relies on global IP address that uses dynamic host conﬁguration

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

protocol (DHCP) in case of IPv4, and stateless address auto-conﬁguration (SAA) in IPv6, which in turn, creates large overhead for low bandwidth and energy scarce sensing nodes. TinyOS seems to provide the compatibility between the data-centric routing in WSNs and address centric routing of IP networks [103]. • Compared to IP network, WSNs have very limited battery life. The replacement of battery is not an option in many cases such as battleﬁeld implementation. IP consumes larger bandwidth for convergence and controlling the network topology compared to WSNs. Hence, various novel energy efﬁcient routing protocols have been designed separately for WSNs with less code size. TinyOS supports an efﬁcient energy tracking mechanism for implementation of IP in WSNs.
While residing within these limitations, various approaches have been adopted to introduce interoperability in the sensing nodes architecture and transmission control protocol and the internet protocol (TCP/IP) stack. Two approaches which are adopted for compatibility are the proxy-based and the sensor node stack-based [95]. With the introduction of internet of things (IoT), the sensing nodes that are now termed as the data producing nodes, use the sensor stack-based approach for communication with the internet. TinyOS supports the sensor stack-based approach by employing the efﬁcient inlined functions in its programming model. The optimization of programming model of TinyOS gives the energy efﬁcient solution for this stack-based approach.
Interoperability of TCP/IP for sensing nodes was ﬁrsts introduced in [229] by introducing the micro IP (uIP) and lightweight IP (lwIP) TCP/IP stacks for small sensing motes. These uIP and lwIP TCP/IP stacks are tested with TinyOS. TinyOS provides energy efﬁcient implementation of these TCP/IP stacks on sensing nodes while using the MICAz hardware platforms. A WSNs application known as intrusion detection ﬁrst used the IP-based sensing nodes for its sensing operation [230]. In this application, embedded sensor board (ESB) was used on Contiki operating system and later on TinyOS. Both the contiki OS and TinyOS give the optimal compatibility for both the address centric routing of TCP/IP protocol stack and data centric routing protocols of WSNs.
In [231], the IPv6 and IPv4 have been compared for their implementation in WSNs. Despite the 128 bit address space of IPv6, IPv6 is more ﬂexible and has advantages when it is used for WSNs. SAA approach of IPv6 and larger address space to cover large networks make it best ﬁt for emerging WSNs for IoT. TinyOS coding is edited with respect to SAA approach of IPv6.
To make the IPv6 compatible for TinyOS-supported sensing nodes, the 6LoWPAN working group (6LoWPAN WG) has developed an intermediate layer to incorporate IPv6 into 802.15.4 [232]. The overhead created by IPv6 header is minimized with the introduction of compression mechanis in 6LoWPAN. The header compression mechanism 1 and 01 (HC1 and HC01) are supported by TinyOS programming

model. In addition to compression, the fragmentation technique also divides the IPv6 packets into several 802.15.4 frames, hence makes the IPv6 suitable for low power tiny sensing nodes.
In WSNs, various protocols communicate with one another with the help of message passing. TinyOS supports active message passing in message-oriented communications. These active messages obtain the help of ”Split Control” to manage energy in the whole network [95]. TinyOS makes WSN communications reliable and fault-tolerant by supporting messagebased communications. With the passage of time, TinyOS has witnessed many developments in its structure to make WSN communications energy-efﬁcient.
B. TinyDB
In the communications process, sensing nodes using TinyOS use features of TinyDB. With the help of TinyDB, sensing motes extract useful information from the network. It is actually the query-processing system that conserves the energy in the system and made the programming task much easier. To extract the information, low-level code does not have to be written separately for TinyOS, because TinyDB with a structured query language (SQL) type of interface provides query processing. The following features were added with the integration of TinyDB in TinyOS [96, 97, 98, 99].
• Network layout: TinyDB manages the whole network topology. The whole communications network layout is maintained in TinyDB.
• Efﬁcient query handling: Time-critical and non-critical data, as mentioned by Mayer et al. [100], can also be provided to end users with TinyDB.
• Data protection: Sensing motes sense data and then transfer them to the BS [101]. In this transfer, data integrity and protection under TinyOS is provided with the help of TinyDB.
• Smooth communications: Sensor network communications is more reliable and smoother with the help of TinyDB.
C. Support of IEEE 802.15.4/ZigBee Protocol Stack
The IEEE 802.15.4/Zigbee protocol stack is now used by sensing applications. WSNs with ZigBee applications are gaining more and more importance. TinyOS is utilized in various sensing applications with the integration of ZigBee. MICAz platforms are considered more useful when using ZigBee with TinyOS [107, 108, 109]. ZigBee was also tested on different hardware platforms running TinyOS [110]. Porting TinyOS from one platform to another platform with ZigBee does not introduce many complexities, compared to other protocol stacks [111].
D. TinyLTS
TinyLTS is an extension of TinyOS. Through the help of TinyLTS, network-related logging and tracing can be achieved. Through logging and tracing, network applications can be monitored and analyzed without any other separate logging

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

tools. TinyLTS can get into the applications main components and gives an idea of their behavior. TinyLTS can also separate dynamic and static information at compile time [112].
E. TinyOS Implementation for Hybrid Networks
WSNs can be implemented in a wider variety of ﬁelds than wired networks. These low-power sensing nodes cannot perform high levels of computation for various applications, such as in industry. So, wired support sensing nodes are implemented for advanced sensing applications. These hybrid networks of wireless and wired nodes have been simulated under TinyOS. TinyOS seems to support energy-efﬁcient communications in these hybrid networks [113].
F. TinyOS Implementation for Heterogeneous Networks
Sensing nodes are different from one another in terms of their energy levels, supported hardware platforms and sensing operations. Such heterogeneous network conditions can be produced with the help of the TiQ framework. TinyOS provides a TiQ environment for operation of heterogeneous networks. TinyOS appears to be the most reliable OS for heterogeneous networks [114].
VII. SIMULATORS FOR TINYOS
Researchers can now simulate different sensing applications and OSs with virtual environments. Real hardware implementation of new applications in distributed sensor nodes is much more time-consuming and more expensive. Different virtual environments have been created to simulate different applications and OSs for WSNs [115]. TinyOS and its various applications can also be simulated on a wide variety of simulators. Instead of a TinyOS installation with real sensing nodes, various experiments can be performed by running it on simulators on a PC. A comparative view of different simulators is given in Table IV. Different simulators that help TinyOS are explained below.
A. TOSSIM
This is a widely accepted simulator for TinyOS and its various applications. It analyzes TinyOS at a very basic level. TOSSIM can ﬁnd many bugs in TinyOS and its various applications. Large numbers of nodes running TinyOS can be simulated using it [116, 117, 118]. TOSSIM is used for many applications to test their operational behavior. Some of the widely used applications that utilize TOSSIM for testing are given below.
• Different routing algorithms are ﬁrst simulated using TOSSIM. Multihop routing algorithms are usually simulated on TOSSIM [119].
• Distributed binary consensus algorithms are extensively used in WSNs for ﬁnding dead nodes [120]. TOSSIM is widely used by these algorithms to check their operation [121]. TOSSIM also provides support for various other algorithms [119, 177].
• Collection tree protocol (CTP) is an extensively used routing protocol for WSNs. It is an energy-efﬁcient

routing protocol for efﬁcient data collection, processing and transmission of processed data. TOSSIM is used in simulations of CTP. CTP is highly compatible with this simulation environment [122]. • Hopﬁeld neural networks simulation is performed in TOSSIM. TOSSIM, in this case, provides a parallel and distributed computation environment for simulation of neural networks [123]. • Heterogeneous and large-scale WSNs can be simulated with the help of TOSSIM. It is the only TinyOS-based simulator that provides simulations of heterogeneous networks. For this purpose, a simple if and then control structure is proposed in TOSSIM [124]. • Time complexity, or the running time of applications, can be assessed with the help of TOSSIM. TinyOS-based applications can now be assessed for their execution time to avoid any bottlenecks in systems. For this purpose, the number of time periods is estimated and then the time complexity of the application is assessed [125]. • Different visualizers have been added in TOSSIM. These visualizers add not only graphical support to TOSSIM, but provide simulation of real-time applications. Having 3D visualizers for real-time applications makes it the simulator of choice for TinyOS real-time applications [126].
TOSSIM is considered the de facto simulator for TinyOS applications. Furthermore, TOSSIM has also undergone many developmental changes, such as adding new RF models. With these modiﬁcations, simulation of TinyOS on different hardware platforms has now become more and more easy [129].
B. Power TOSSIM
Energy-scarce WSNs with TinyOS can be simulated to predict accurate energy consumption in sensing nodes. Power TOSSIM is an extension of TOSSIM for predicting power demand for TinyOS applications [127, 128].
C. mTOSSIM
This is an advanced simulator for novel TinyOS supportive applications. In mTOSSIM, usually the battery life of sensing nodes in relation to TinyOS applications is predicted. Compared to PowerTOSSIM and TOSSIM, in mTOSSIM, the sensing environment is taken into account, such as indoor or outdoor. mTOSSIM employs an advanced radio model in its operation of predicting the battery lifetime of sensing motes [130].
D. Viptos
Viptos is a graphical simulator for TinyOS applications. Viptos is a combination of two strong simulating tools, namely, Ptolemy and TOSSIM. Viptos can simulate heterogeneous sensor nodes running TinyOS. The main contribution of Viptos is its ability to support graphical environments for simulation of TinyOS applications [133].

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

Relevant References
[116], [117], [118], [119], [120], [121], [122], [123], [124], [125], [126] [127], [128], [129]
[130], [131], [132] [133], [134], [135]
[136], [137], [138]
[139]
[118]
[140]
[141], [142]

Simulator TOSSIM

TABLE IV: Comparison of TinyOS-based Simulators

Purpose
It simulates thousands of TinyOSbased nodes with bit granularity

Command line/GUI
Command line and graphical with TinyViz

Compatibility with Hardware Platforms
All TinyOS supported platforms

Supported Applications
CTP, routing algorithms

PowerTOSSIM Estimating power consumption of sensing nodes

mTOSSIM

Estimating battery life time

Viptos QualNet TOSSF
Avrora SmartSim EmTOS

Simulating

TinyOS-based

heterogeneous

networks

Modelling

of

energy

consumption

and clock drift

Designed for

modelling

radio

signal

propagation and

node mobility

For AVR execu-

tion of instruc-

tion

Provides

comprehensive

power usage

reports

Runs whole

TinyOS

applications

as a single

module

Graphical with help of TinyViz GUI
GUI
Command line
Command line
Command line Graphical
Command line

MICA2
TeloS and MICA2 IRIS and Eyes
Skimmer and MICAz
Sky motes
TICC 2430
MICA2 and MICAz
TinyNode

Predict power consumption of communications protocols Localization, coverage range study Multi-hop routing

Mobilitybased sensing applications

Smart

dust

projects

Heterogeneous networks
TinyOS 2.0 applications can be simulated
Simulation of heterogeneous networks

Scalability Bridging

Yes

Yes

Yes

Yes

Yes

No

Yes

Yes

Yes

No

Yes

No

No

No

No

Yes

Yes

No

E. QualNet
Sensor nodes running TinyOS on the MICA2 hardware platform can be simulated using the QualNet simulator. This simulator provides accuracy and scalability when using the MICA2 hardware platform [136].
F. TOSSF
Simulator for Wireless Ad-Hoc Networks (SWAN) is a wellknown simulator for wireless ad hoc networks. TinyOS scalable simulation framework (TOSSF) is an advanced version of SWAN for simulating TinyOS, to gain more accuracy and ﬂexibility [139].
G. Avrora
AVR instructions can be simulated with the help of the Avrora simulator. This is a TinyOS-based simulator. Heterogeneous networks can also be simulated with the help of Avrora [118].
H. SmartSim
This is a TinyOS-supported simulator. SmartSim is more closely related to TOSSIM. However, the main difference lies

in its graphical interface. SmartSim is a graphical simulator that is used for simulating TinyOS-based applications [140].
I. EmTOS
EmTOS [141] is based on EmStar [142]. The wrapper library of EmTOS, which is similar to that of TOSSIM, enables TinyOS applications to run a simulation as a single module. With the help of EmTOS, heterogeneous networks can also be simulated using TinyOS features.
VIII. COMPARATIVE VIEW OF TINYOS WITH OTHER SENSORS OS
TinyOS is a widely used OS for sensing nodes. Randomly distributed sensing nodes use different hardware platforms. So, a wide variety of OSs have been developed for tiny sensing nodes [10]. Comparison of TinyOS with other OSs is based on their different characteristics and performance. This section discusses the comparative view of TinyOS based on its features and performance.

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

A. Comparative view of TinyOS based on its features
A comparative view of TinyOS against Contiki, LiteOS, SOS, MANTIS, Nano-Rk, and RETOS OSs based on different features is given in Table V. Brief details of each OS are given as follows.
B. Contiki
The Contiki OS is discussed elsewhere [8, 10, 11, 20, 92, 143, 144, 145] as an open source OS for tiny sensing motes. Its multitasking kernel made it the OS for a wide variety of sensing motes. This lightweight, portable OS has traits of preemptive multithreading, proto-threads and virtual network computing. Contiki also provides support for a wide variety of communications protocols. Compared to TinyOS, this OS has dynamic and modular support for its different programming model components. The C language was used in designing the Contiki OS, as opposed to NesC, which was used in TinyOS. Now, the advanced version of Contiki 2.2.1 provides concurrency, ContikiSec for security and a Coffee ﬁle system. Event-driven characteristics of Contiki and TinyOS make them OSs of choice for sensing nodes. These enhanced features of Contiki made it more similar to TinyOS. In contrast to TinyOS, a managed memory allocator in Contiki provides more efﬁcient memory management than TinyOS. Compared to TinyOS, Contiki OS has two types of events: asynchronous events and synchronous events.
C. LiteOS
LiteOS [8, 20, 146, 147] is the Unix-based OS for sensing motes. This OS has gained much attention due to its ability to support Unix hardware platforms. LiteC++ with class library support is the programming language of this OS. Dynamic memory allocation and the modular component mode of LiteOS make it the OS for Unix-based hardware platforms. Wireless reprogramming capability, a built-in hierarchical Unix-based ﬁle system, and a smaller footprint are the distinguishing features of LiteOS. A new version, LiteOS 1.0, has been introduced to make it more responsive to real-time trafﬁc. This new version, with the help of a virtual battery, conserves a lot of energy in systems. IRIS and MICAz are the well-known hardware platforms that are supported by LiteOS. An event-based programming model, multi-thread support, and networking support make it closer to TinyOS, but compared to TinyOS, it does not support real-time trafﬁc and does not provide concurrency.
D. SOS
SOS, discussed in several studies [8, 11, 148], was developed by Mobisys in 2005. The main motive behind its development was to introduce the OS to a WSN environment that can support multiple hardware platforms. SOS can support MICA2, MICAz, Telos and many other hardware platforms. Usually, Java-based simulators are employed for its testing before installation. Various differences exist between SOS and TinyOS. The main difference lies in the visibility or nonvisibility of components during compilation. Components of

TinyOS are not visible when they are compiled into binary code, whereas components of SOS do not disappear after compilation. Also, SOS does not provide a real-time guarantee, concurrency, multi-thread support, a compact ﬁle system and remote debugging. These features are well supported in TinyOS. The new version of SOS is 2.0.1. This advanced version supports a virtual battery and energy-efﬁcient network message passing, and it has a modular structure. SOS uses dynamic memory management, just like TinyOS.
E. MANTIS
Event-driven TinyOS is quite different from the multithreaded MANTIS OS. MANTIS is quite predictable and is used for a network that has to be idle for a long time [8, 10, 11, 149, 150]. MANTIS was developed under the MONET project of 2005, and the main purpose of its development was to ensure enhanced multithreading in a WSN OS. Binary semaphores and counting semaphores were introduced in MANTIS to ensure concurrency, just like in TinyOS. Compared to TinyOS, it supports dynamic memory allocation, a modular component model, and an event-based programming model. Wireless reprogramming, remote debugging, communications security and an improved ﬁle system are absent in the MANTIS OS. It also supports a wide variety of hardware platforms, just like TinyOS.
F. Nano-RK
In several studies [8, 11, 151], the main features of NanoRK and its characteristic differences compared to TinyOS are discussed. It supports the time-sensitive applications of WSNs in more efﬁcient ways, and Nano-RK was developed for handling of real-time tasks. A more sensitive and efﬁcient task-scheduling technique has also been integrated into this OS. Resources are reserved in this OS to ensure timely and guaranteed delivery of network packets. Nano-RK has more similarity to TinyOS in that it has the same real-time handling of tasks, static memory management, monolithic system model, multi-thread support, and concurrency control. Compared to TinyOS, Nano-Rk does not have an efﬁcient ﬁle system, remote debugging, and communications security. The current version of Nano-RK supports sockets, like abstractions for network communications.
G. RETOS
RETOS [8, 152, 153] was developed under a project of IPSN in 2007. Multi-threading for sensing motes is the main contribution of this OS. User-mode and kernel-mode handling of tasks is also incorporated in RETOS. RETOS supports the design and development of various sensing applications because it was used as a code checker for new sensing applications that run on it. It is now widely used in network communications due to the presence of a three-layer network architecture module. A wireless reprogramming capability, multi-threading, and dynamic memory allocation makes it more similar to TinyOS, whereas remote debugging, a compact ﬁle system and enhanced features for energy conservation are

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

Features Relevant References
Publication year
Static/Dynamic System Monolithic or Modular System Networking Support Real-time Guarantee Language Support Event-Based Programming Multi-Thread Support Wireless Reprogramming File System
Remote Debugging Simulators
Communication Security Hardware Platforms
Shell
Resource Sharing
Energy Consumption
Concurrency Supported Sensing Applications
Advance Versions

TABLE V: Comparative view between TinyOS, and other WSN OSs

TinyOS This study
ASPLOS 2000 Static

Contiki [8], [10], [11], [20], [92], [143], [144], [145] EmNets 2004 Dynamic

LiteOS [8], [20], [146], [147]
IPSN 2008
Dynamic

SOS [8], [11], [148]
MobiSys 2005 Dynamic

MANTIS [8], [10], [11], [149], [150]
MONET 2005 Dynamic

Nano-RK [8], [11], [151]
RTSS 2005
Static

Monolithic

Modular

Modular

Modular

Modular

Monolithic

Active message ulP,ulP6,Rime File-Assited Message

”comm”

Socket

No

No

No

No

No

Yes

NesC

C

LiteC++

C

C

C

Yes

Yes

Yes

Yes

Yes

No

Partial (through Yes

Yes

No

Yes

Yes

tiny threads)

Yes

Yes

Yes

Yes(Modular) No

No

Single level(ELF, Matchbox) Yes (Clairvoyant)
TOSSIM, Power TOSSIM, Viptos, Qualnet, TOSSF TinySec

Coffee
No
Cooja, MSPSim Netsim
ContikiSec

Hierarchical Unix-like Yes(DT)
Through AVRORA
Not available

No No Java SOS
Not available

No
Yes(Node MD) XMOS
Not available

No
No
AVR Studio 4
Not available

MICA2, MICAz,

TelosB/TMote

Sky,

Intel-

Mote2, eyes,

tinynode, IRIS,

shimmer, TI

CC2430 (testing)

Not available

Virtualization and completion events

HPL, TOSSTI, EATT

Yes Habitat monitoring, medical, industry, tracking, management TinyOS 2.0

ESB,

MICAz,

TelosB/Tmote IRIS

Sky

Unix-like shell runs on sensor mote Serialized access

Shell that runs on base station Through synchronization primitives

Chameleon architecture, Microcontrller is put in sleep mode Yes IP Net, Badgers

Smaller footprint saves energy
No Unix-based applications

Contiki 2.2.1 LiteOS 1.0

MICA2, MICAz, TelosB/Tmote Sky, XYZ

MICA2, MICAz, Telos, MANTIS nymph

Not available
Serializesd access

Unix-like shell runs on sensor mote Through semaphores

Virtual battery

Puts the scheduler in Sleep mode

No Navigation, Obstacle detection,

Yes Fire net

SOS version MANTIS 1.0

2.0.1

beta

MICAz, FireFly
Not available
Serialized access through mutexes and semaphores Guaranteed and controlled access to CPU saves energy Yes Surveillance and environmental monitoring, Nano-Rk 1.0

RETOS [8], [152], [153]

IPSN 2007
Dynamic
Modular
Three-layer architecture Posix 1003.1b C
No
Yes
Yes
No
No
Not available

Not available

MICAz,

TelosB/TMote

Sky,

TI

CC2430

Shell runs on mote(CH)
Virtualization

Support through multi-hop networking
No Motor controller, localization
RETOS 1.4

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

TABLE VI: Reduction in code due to inlining and its effect on TinyOS performance (adapted from [27])

Application
Surge Mate TinyDB

Inlined code size 14794 25040 64910

Noninlined code re-

code

duction

size

16984 12%

27458 9%

71724 10%

Data size
1188 1710 2894

CPU reduction
15% 34% 30%

not addressed in RETOS. The latest version of RETOS is 1.4, which supports a wide variety of hardware platforms and virtualization.
H. Comparative view of TinyOS based on its performance
TinyOS developers employ various techniques and design approaches in programming model of TinyOS to improve its performance. By adopting the various approaches and modiﬁcations in NesC code, a signiﬁcant improvement in various performance metrics have been witnessed. TinyOS program size, random-access memory (RAM) usage, energy consumption, application code length, and central processing unit (CPU) utilization are the performance metrics that have been discussed in literature for performance comparison of TinyOS with other OSs [8]. The effects on performance metrics with respect to different coding paradigms have been discussed below.
1) Inlining in TinyOS code: Inlining a function in NesC code as discussed in [28] improves the performance of TinyOS while minimizing various overheads such as code size, complex components, and wiring overheads. CPU utilization and energy consumption are minimized to a great extent by inlining the code. Code is reduced by inlining a function with the help of single call site. Multiple call sites can extend the code which really affects the optimization of TinyOS. Table VI shows the performance of TinyOS with respect to CPU utilization when the inlining reduces the code of different applications such as surge, mate, and TinyDB.
With the help of inlining, sensing tasks are made smaller in size. Smaller sensing tasks are well supported in TinyOS compared to other OSs of WSNs. For example, MANTIS has 17.15% longer execution time for small task compared to TinyOS. This improved performance of TinyOS is also due to the efﬁcient packet forwarding mechanism adopted by NesC [225].
2) Dynamic TinyOS: Sensing nodes are installed in a location where their replacements and their components update during runtime incur serious overhead. TinyOS updates and software exchanges cannot be done during sensing operations. For OS updates and component exchanges, sensing operations have to be shut down. This was a drawback of OSs for WSNs, including TinyOS. However, dynamic TinyOS feature in programming model of TinyOS lets developers update, and even exchange, the TinyOS components and software dynamically without interrupting the sensing operation. This turns out to be more efﬁcient for memory, and a more energyefﬁcient approach for TinyOS applications [61]. The increase

TABLE VII: Reduction in CPU cycles, boundary crossing of 7 modules, and timer overhead due to TinyOS code optimization (adapted from [27])

Cycles Work Boundary crossing Noninterrupt Interrupt Total

Optimized 371 109
8
101 480

Unoptimized 520 258

Reduction 29% 57%

194

95%

64

-36%

778

38%

in performance of TinyOS (saving factor) with respect to energy while using TinyDB for various applications such as sense, blink, and oscilloscope is given in Table VIII.
When compared with OSs of WSNs, TinyOS shows more performance in conserving the energy of the network. For example, with the node at the position (n = 8) in tree and executing a sensing task of (ls = 1ms) size (where n represents the position of any sensing node in a binary tree, and ls is the duration for executing the task as deﬁned in [225]), TinyOS shows 7.6% improvement in energy saving compared to MANTIS OS [225].
3) Incremental programming of TinyOS code: TinyOS code has been edited to provide the incremental network programming for WSNs. Unlike the dynamic programming as discussed in previous subsection, developers now use an algorithm named as Rsync in incremental programming. The sensing motes now can transmit their modiﬁed code during transmission without interrupting the sensing operation. With the use of Rsync algorithm, TinyOS shows 9.1% improvement in performance compared to LiteOS for changing the source code by implementing incremental programming in multi-hop WSNs [226,146].
4) Optimization of NesC code: Cross-components in NesC code are optimized by imposing the restrictions on component model to perform the static analysis. Call-graph for any application is constructed by NesC that excludes the unreachable code and hence improves the performance. This optimization of TinyOS code results in reduction in memory usage [27] and CPU cycles. Table VII shows the reduction in CPU cycles in the timer event, while optimizing the code of TinyOS. A total of 38% reduction in CPU cycles, 57% reduction in overhead of boundary crossing of 7 modules, and 29% reduction in overhead that is created by timer event can be achieved with optimization of TinyOS code.
5) Component model of TinyOS code: Which component of TinyOS code will handle which application, is decided by the component model of TinyOS code. Usually, the TinyOS code is divided into application code and the OS code. The OS code which consists of scheduler and radio stack handles the application code with the help of component model. Component model efﬁciently uses the code and assigns minimum OS code to execute each application. TinyOS source code contains 108 code modules and 64 modules for conﬁguration. Every module has an average of 120 lines. It shows the efﬁcient component

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

TABLE VIII: Performance in energy conservation enhances due to dynamic updates in TinyOS (adapted from [61])

Application Blink
Sense
Oscilloscope

Component OS-Comp Blink Leds Scheduler OS-Comp Sense Leds Scheduler OS-Comp Oscilloscope Led Scheduler

Size (B) 6616 824 1728 1980 17040 940 1728 2576 39328 2008 1720 3728

Transfer energy 465.1 57.93 121.48 139.19 1197.11 66.08 121.48 181.09 2764.75 141.16 120.91 262.07

Deluge size 33726 33726 33726 33726 34074 34074 34074 34074 34504 34504 34504 34504

Saving factor 5.1 40.9 19.5 17 2 36.25 19.7 13.2 0.87 17.1 20.0 9.25

TABLE IX: TinyOS uses less modules and lines compared to application modules and lines. (adapted from [27])

Application Modules

Surge

31

Mate

35

TinyDB 65

OS Modules (% of full OS) 27 (25%)

Lines 2860

28 (25%) 4736

38 (35%) 11681

OS Lines (% of full OS) 2160 (14%) 2524 (17%) 4160 (28%)

Platform independent applications

HIL MicaZ

HIL Common

HAL MicaZ

HIL

HIL Common

TelosB

HAL TelosB

model of TinyOS, which carries smaller code size. Table IX shows that the component model of TinyOS assigns minimum possible code to each of three applications run by TinyOS. This effective component model makes TinyOS not only the memory efﬁcient but also the energy efﬁcient, as less energy is consumed for execution of applications [27]. Performance comparison with respect to memory usage metric is made with MANTIS in [225]. An experimental application is executed on PIC16[227] processor while using TinyOS and MANTIS. TinyOS comes out to be 4kB less in memory usage compared to MANTIS. This reduction in memory usage is due to the reduction in code performed by component model of TinyOS code.
IX. TINYOS SUPPORTED HARDWARE PLATFORMS AND
THEIR FIELD IMPLEMENTATION
WSNs consisting of tiny motes perform three distinguishing tasks, compared to other conventional network nodes. These nodes are to sense, process and then transmit data to other connected nodes or to some other aggregating destination. These nodes work in a ﬂat topology and, sometimes, in a clustered topology. These topological advances enable sensor nodes to conserve more and more energy [158, 159, 160]. Highly dense and resource-constrained networks of these sensing motes require hardware platforms that meet their requirements [161]. Design of the OS plays a crucial role in the sensing operation. TinyOS is considered to be more compatible with many hardware platforms that are designed for WSNs [162]. A variety of hardware platforms are supported by TinyOS. Different hardware platforms with their features are presented in Table X. To port from one hardware platform to another, TinyOS developers have come out with a hardware abstraction

HPL MicaZ

HPL CC2420

HPL HPL TelosB CC2420

MicaZ

TelosB

Fig. 6: Platform-independent Applications (adapted from [163])

architecture. TinyOS hardware abstractions can be broadly classiﬁed into three layers [25, 163, 164]. These layers are as follows.
1) Hardware Interface Layer (HIL): This comprises hardware-independent components, interfaces and events.
2) Hardware Presentation Layer (HPL): This is close to the hardware layer. Components in this layer are not picked by applications but are used by hardware in some particular tasks.
3) Hardware Adaptation Layer (HAL): This layer favors hardware functionality, and is closer to the HPL.
Different layers within different hardware abstractions of hardware platforms are shown in Fig. 6 and Fig. 7. Hardware abstractions clearly show that certain applications are hardware-independent and others are hardware-dependent on different hardware platforms running TinyOS. Below are some hardware platforms that are supported by TinyOS.
• MICA is a platform that supports TinyOS. MICA, which is a very small hardware structure, usually in inches, can be used in multihop routing, and is a widely used platform [165]. Some other advanced versions of MICA

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

Relevant References horizontal line [8], [125], [157], [162], [165], [166] [8], [125], [157], [162]
[8], [20], [157], [162]
[162]
[8], [162]
[162]
[32], [162]

Hardware Platform MICA2

TABLE X: TinyOS-based Supported Hardware Platforms

CPU

Power

Memory

I/O Sensors Radio

ATMEGA 128

.036mW sleep and 60mW active

4K RAM and 128K Flash

Large expansion connector

76Kbps

MICAz

ATMEGA 128

TelosB/TMote Motorola HCS08

.030mW sleep and 60mW active

4K RAM and 128K Flash

Large expansion connector

250Kbps

.001mW sleep and 32mW active

4K RAM

USB and 250Kbps Ethernet

Rene Intel-Mote2

ATMEL 8535
ARM 7TDMI 12- 48MHz

.036mW sleep and 60mW active 1mW idle and 120mW active

512B RAM and 8K Flash
64KB SRAM and 512KB Flash

Large expansion connector UART, USB, GPIO, 12C, SPI

10Kbps
Bluetooth 1.1

BT Node Stargate

ATMEL Mega 128L 7.328Mhz
Intel PXA255

50MW idle and 285MW active
.040mW sleep and 8x0mW active

128KB Flash 4KB EEPROM and 4KB SRAM 64KNSRM

Expandable connectors

Bluetooth

2PCMICA/CF, Serial

com ports, connection

Ethernet,

to sensor

USB

network

Remarks
Primary TinyOS development platform

Supports

IEEE

802.15.4 standard.

Allows higher layer

ZigBee standard

Supports

IEEE

802.15.4 standard.

Allows higher layer

ZigBee standard.

1.8V operation

Primary TinyOS de-

velopment platform

Multihop

using

scatternets,

easy

connections to PDAs,

phones, TinyOS 1.0,

1.1.

Cell phones, Supports

TinyOS, multihop

using

multiple

radios/nodes

Flexible I/O and small form factor power management.

Platform dependent applications
HIL IRIS
HAL IRIS
HPL IRIS
IRIS
Fig. 7: Platform-dependent Applications (adapted from [163])
are now deployed in health and other ﬁelds. These new releases of MICA enhance the use of TinyOS in different dimensions. • MICA2-based platform extensions are available and use TinyOS [166]. MICA2 is the primary TinyOS design and development platform. It supports almost all the TinyOSsupported sensing applications. • MICAz [157, 162, 125, 8] hardware platforms enable TinyOS to support the IEEE 802.15.4 standard and other higher-layer ZigBee standards. • Telos [8, 20, 157, 162] is the hardware platform that

is designed for power conservation. Telos works well with TinyOS and saves power, which enhances network lifetime. It also supports the IEEE 802.15.4 standard. Usually, a 1.8V operation is supported in Telos. • Rene [162] is the hardware-dependent hardware platform that runs TinyOS. Rene motes are generally employed in the medical sciences [168]. • Intel-Mote2 [8, 162] is the Linux-based TinyOS platform, which is very useful for many sensing applications. The main feature of this platform is that it can also be used for non-TinyOS-based sensing motes. • BT Node [162] is the TinyOS-supported hardware platform that is especially designed for cellular phones supporting sensing applications that run TinyOS. Also, this hardware facilitates multihop communications. • Stargate [32, 162] is the most energy-efﬁcient hardware platform, newly developed for sensing motes. It supports serial connections to sensor networks.
A. TinyBench
In WSNs, there is no standardized approach for evaluating hardware platforms of sensing motes. Hardware platforms are selected based on their supported applications and other features. A standardized benchmark procedure is missing for categorizing hardware platforms. However, TinyOS developers have come out with a new TinyOS-based benchmark for hardware platforms of sensing motes. This benchmark is named TinyBench. This is a single-node standardized benchmark

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

TABLE XI: TinyOS and other OSs and their ﬁeld implementations (adapted from [20])

S.NO 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40

Sensing Field Habitats Mineﬁelds
Battleﬁelds Lines in the sand Counter-snipers Electro-shepherds
Virtual fences Oil tankers
Enemy vehicles Trove games Elder RFIDs
Murphy potatoes Firewxnet AlarmNet
Ecuador volcano Pet games Plugs B-Live Biomotion AID-N Fireﬁghting Rehabil CargoNet
Fence monitors BikeNet BriMon IP net
Smart homes SVATS
Hitchhiker Daily morning
Heritage AC meter Coal mines
ITS Underwater PipeProbe
Badgers Mount St. Helens volcano
Tunnels

OS Used TinyOS Customized Linux TinyOS TinyOS TinyOS Unknown Linux Unknown TinyOS TinyOS TinyOS TinyOS MANTIS OS TinyOS TinyOS TinyOS Custom Custom No OS Other TinyOS TinyOS Custom ScatterWeb TinyOS TinyOS Contiki TinyOS TinyOS TinyOS TinyOS TinyOS TInyOS TinyOS Custom Custom Custom Contiki TinyOS TinyOS

based on TinyOS applications [170]. Sensing nodes are employed in a variety of ﬁelds. Different
OSs are used in different sensing mechanisms. Some OSs are more responsive to a particular environment where others do not perform well. TinyOS is employed in a variety of ﬁelds to enhance sensing operations. An overview of TinyOS versus other OSs with their implementations in different ﬁelds is given in Table XI [20]. Fig. 8 [20] shows an analysis of usage of OSs in WSNs. TinyOS is more widely deployed than any other OS. More than 60 percent of the sensing ﬁelds employ TinyOS due to its ﬂexibility in the architecture.
X. TINYOS AND ITS SUPPORTED SENSING APPLICATIONS
TinyOS is an open OS for WSNs. Component-based TinyOS is a widely used OS, compared to other OSs in WSNs. TinyOS supports many sensing applications. Table XII shows the various TinyOS supported sensing applications and relevant references. Some of the widely used sensing applications that TinyOS supports are discussed below.

A. TinyOS for Water-Monitoring Applications
Water monitoring has gained a lot of attention in the sensing world. Water levels are measured to keep levels of water ﬂow optimal. Water distribution networks are now monitored with the aid of sensing motes, which has resulted in increased efﬁciency of water distribution systems. Water waste is now kept to a minimum with the help of sensor nodes [171]. TinyOS supports many water monitoring applications. Water is remotely monitored with the help of TinyOS-supported applications that involve monitoring of both water quality and quantity. For remote water quantity monitoring, ﬂooding routing protocols have been developed. Water quality sensors are employed to perform real-time monitoring for water contaminants [172]. Water quantity is measured with the help of smart water meters. These smart meters use ZigBee or M-Bus platforms. M-Bus implementations using TinyOS are very useful for water meterreading applications. TinyOS shows support for a wide variety of water-monitoring applications [173]. Underwater applications, such as seismic monitoring, are also very well supported by TinyOS. Underwater communications protocols, especially routing protocols, work well with TinyOS [174, 175]. Other communications networks, such as software-deﬁned networks, also employ TinyOS for underwater communications [176].
B. TinyOS Support for Medical Applications
WSNs are now widely utilized in various medical applications. With the implementation of sensors in the medical ﬁeld, WSNs have gained a lot of attention. Different medical applications are now provided by WSNs [178, 179]. TinyOS seems to be the perfect OS for different biological sensing applications. Neural interfaces with TinyOS help to capture nerve signals during an electroencephalogram (EEG) [180]. Brain neural signals are sensed by TinyOS-based sensing motes. There are applications that not only sense neural signals but also provide neural recording [181, 182]. A new NesCTinyOS model has been proposed for distributed and parallel computation of neural networks. This new model includes initialization of a neural network, and relaxation and convergence of neural computation [183]. Many of the TinyOS-based sensing motes use the MICAz platform for accurate measuring of signals [166]. TinyOS is also the OS of choice for electrocardiogram (ECG) monitoring. This specially designed TinyOS-based ECG monitor uses the 868 MHz ISM frequency band [184].
C. TinyOS Supported Management Systems for WSNs
Sensing nodes are equipped with limited resources. If the whole sensing and communications operation is not properly managed, then it will result in considerable degradation of the whole network. Network lifetime decreases, and earlier death of nodes happens in the network. So systematic management of the network is required for WSNs [185, 186, 187]. Different management methods in WSNs are employed to efﬁciently utilize network resources. DISON, supported by TinyOS, is a

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

Fig. 8: Usage of different OSs (adapted from [20])

generic management system for sensor nodes. The management job is done by one of the nodes in the network, and then the job is taken over by another node after a certain time period. This saves the energy of nodes in the network [188]. TinyOS is an efﬁcient OS that conserves power in the system by properly managing energy [36, 63, 189]. Limited resources of sensor nodes results in poor QoS. However, TinyOS provides better QoS management with limited network resources [190]. 6LoWPAN mobility management is handled very efﬁciently with the help of TinyOS. This open source OS manages the mobility of IP-based WSNs and enhances throughput of the whole network. [191]. WSN management can also be achieved with implementation of the IEEE 1451 standard. The introduction of a transducer for efﬁcient transmission of information under the IEEE 1451 standard, and further implementation of this standard in TinyOS, provides reliable network management for sensing motes [192].

TinyOS-based environment monitoring applications have been developed to consistently monitor the environment. Greenhouse gases, glaciers, and global-warming monitoring applications are developed and tested with TinyOS. TinyOS, in these cases, comes out to be more efﬁcient and reliable than any other OS for WSNs [200, 201]. WiseNet is a specially designed TinyOS-based wireless network for sensors. Wisenet is designed for monitoring the environment. Environmental factors such as light, temperature and humidity can be sensed well with TinyOS-based WiseNet. WiseNet maintains a database. Sensing nodes sense and forward data to servers, from where the data are taken for further analysis [202]. CC2430 sensing nodes implemented with TinyOS can also be used for measuring temperature and for monitoring switchgear assemblies. The switchgear assemblies encounter voltage changes. So TinyOS enables these nodes to detect voltage ﬂuctuations and temperature very precisely [203].

D. TinyOS Supportive Applications for Detecting Security Threats in WSNs
Sensing nodes are randomly distributed. Location of these nodes is far away from the BS. Tiny motes sense data and then forward them to the BS, which is located at some distance. In this transmission, sensing node data can undergo various attacks. Data integrity and authenticity is lost when WSNs come under these attacks. Various classiﬁcations of attack have been discussed in the literature on sensing nodes [193, 194, 195]. Studies of different attacks have been performed on TinyOS. TinyOS minimizes threats of many attacks, and hence, it comes out to be a more secure and reliable OS for sensing nodes. Wireless injection attacks, denial of service attacks and man-in-the-middle attacks have been studied on TinyOS to minimize the effect of these attacks [196].
E. TinyOS-based Environment Monitoring Applications
Environmental awareness has compelled researchers to come out with environmentally friendly tools. Environment degrading factors are monitored regularly. WSNs provide environment monitoring to save the environment from different degradation factors. Carbon emissions and glacier monitoring are tackled well by sensing motes [4, 197, 198, 199]. Many

F. TinyOS-based Agricultural Applications
Now, WSNs have found their way into agriculture. Agricultural productivity can be increased many times over with the help of sensing nodes. The effect of weather on crops, of water levels on crops, the effects of fertilizers, and initial seed growth can be monitored with the help of sensing motes [204, 205, 206]. TinyOS-based applications have been developed that can be implemented on farms. TinyOS-based motes have been widely used for monitoring agricultural productivity [207].
G. TinyOS-based Solar PowerGeneration Monitoring Applications
Renewable energy resources have gained a lot of attention in the modern energy-scarce world. These resources must be utilized with the utmost care to make them available for a longer period of time. Sensor networks are usually employed for monitoring these resources. Solar energygeneration based on photovoltaic cells can also use TinyOS. TinyOS in these applications precisely monitors the whole generation process [208, 209].
H. TinyOS-based Habitat Monitoring Applications
TinyOS is widely deployed in monitoring habitats. Habitat monitoring is an important application of WSNs. Through

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

TABLE XII: TinyOS Supported Sensing Applications

No.

TinOS-Supported Sensing Applications

Relevant References

1

TinyOS for Water Monitoring Applications

[172], [173], [174], [175], [176]

2

TinyOS Support for Biological Applications

[166], [180], [181], [182], [183], [184]

3

Management Systems for Sensor Networks

[36], [63], [188], [189], [190], [191], [192]

4 TinyOS Supportive Applications for Detecting Security Threats in WSNs

[196]

5

TinyOS-based Environment Monitoring Applications

[200], [201], [202], [203]

6

TinyOS-based Agricultural Applications

[207]

7

TinyOS based Solar power generation monitoring applications

[208], [209]

8

TinyOS-based Habitat monitoring applications

[212], [213], [214]

9

TinyOS Implementations on FPGA Systems

[217], [218]

10

TinyOS Support for SANETs

[219]

habitat monitoring, sensing nodes collect data related to residential areas and other biological habitats [210, 211]. TinyOSbased applications can be used for monitoring local harmonics. Through monitoring local harmonics, electricity issues can be resolved very efﬁciently [212]. Physical systemmonitoring applications, such as cyber physicalsystem monitoring, have also gained attention. For this purpose, the IP ﬂow information export (IPFIX) protocol was introduced for physical systems. This protocol has been implemented in TinyOS and was named TinyIPFIX. This is the provision of IoT applications, and TinyOS supports this combination of sensors and IoT implementation [213]. A more efﬁcient TinyOS-based localization system was introduced [214]. This TinyOS-based application is an energy-efﬁcient localization system, which uses an accelerometer. Nodes request the location of people, frequently and infrequently, depending upon whether people are running or standing still. Usually, TinyOS-based TelosB sensing-node platforms are employed in these operations.
I. TinyOS Implementations on FPGA Systems
A ﬁeld programmable gate array (FPGA) is an integrated circuit that provides the customer with facility of conﬁguration, so customers can conﬁgure these chips according to their own demands. FPGA systems are now used in WSNs [215, 216]. TinyOS is the only OS that has been made so ﬂexible that it can easily be implemented on an FPGA system. Implementations of TinyOS on FPGA systems require few modiﬁcations in the code of TinyOS. TinyOS also seems to be very energy-efﬁcient when ported to FPGA systems [217, 218].
J. TinyOS support for SANETs
Sensor actuator networks (SANETs) have gained entry into many ﬁelds. SANETs are applied in agriculture, industry and in medical ﬁelds. SANETs can be employed for speciﬁc applications. For these purposes, TinyOS is adjusted to make it speciﬁc for that one ﬁeld. TinyOS also supports ServiceOriented SANETs (SOSANETs). A new design of TinyOS, named TinySOA, is employed for this purpose [219].
XI. TINYOS LIMITATIONS AND MODIFICATIONS
TinyOS is a widely accepted OS for sensing nodes. However, it also faces many limitations. Certain limitations are discussed below.

A. Limitations of TinyOS
TinyOS is a widely used OS for WSNs. It has attracted many researchers and is being employed in many sensing motes. However, that does not mean that TinyOS supports all application tasks. There are certain limitations that TinyOS faces during the execution of tasks. Improper execution of tasks can lead to burdens and loads on the processor, which in turn, leads to inefﬁciency of the system [46]. Following are certain limitations faced by TinyOS.
1) Abnormal tasks in the job queue are not efﬁciently handled in TinyOS. Sometimes, abnormal tasks can hinder the execution of follow-up tasks. This can lead to extra burdens and loads on the processor [50].
2) TinyOS cannot handle a high frequency of local tasks. When the frequency of local tasks increases, it can lead to loss of other tasks .
3) Baud rate is highly affected when the execution of some tasks takes a lot of time, compared to other tasks. In this way, the execution of real tasks is affected. TinyOS cannot properly handle these situations [46].
4) TinyOS applications are considered difﬁcult to construct, debug and handle [43].
5) While TinyOS performs well with static applications, TinyOS does not provide good performance for dynamic applications. Also, complex applications are not well supported in TinyOS [220]. Most of the limitations are addressed with certain extensions and modiﬁcations in the programming structure of TinyOS. TinyOSs advanced versions and various extensions are given below.
B. TinyOS Advanced Versions and Extensions
With the growing demand for TinyOS, many new features were added. Many requirements for sensing nodes were not addressed in TinyOS when it was ﬁrst developed. So users demanded that certain modiﬁcations and enhancements be incorporated.
1) TinyOS 2.0: The programming model of TinyOS 1.x was reconﬁgured and redesigned for TinyOS 2.0. Version 1.x encountered certain limitations. These limitations were addressed with enhanced features in 2.x, but this also introduced certain compatibility issues in TinyOS and its supported applications. TinyOS 2.0 advanced features are given below [221].

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

• Hardware abstractions were added in TinyOS 2.0. These hardware abstractions were named the hardware abstraction architecture, which can be further subdivided into three layers. This architecture enables TinyOS 2.0 to support a larger number of hardware platforms.
• In addition to a non-preemptive FIFO task scheduler in 1.x, TinyOS 2.0 has come up with a different scheduling approach. TinyOS enables programmers and developers to introduce a scheduler of their choice. Normally, in TinyOS 2.0, every task has its own reserved slot in the task queue.
• TinyOS 2.0 has an advanced and improved boot sequence. The StdControl interface of 1.x was partitioned into Init and StdControl interfaces in TinyOS 2.0. These two interfaces make the boot sequence more responsive by supporting start and stop commands.
• TinyOS 2.0 is written in the NesC 1.2 programming language. The programming model of TinyOS 2.0 is made in such a way that its components support virtualization in more reliable way.
• TinyOS 2.0 provides plenty of timer interfaces. Timers are an important feature for sensing motes. So, TinyOS 2.0 is considered more responsive, due to having plenty of timers.
• Provision of a message t buffer in TinyOS 2.0 makes it more effective in sensing operations. There is plenty of space in this type of buffer, so it can handle a large number of packets.
• TinyOS 2.0 also provides efﬁcient energy conservation methods. Usually, the power control mechanism of the microcontroller and the power control method of the device makes it more suitable for tiny sensing motes.
2) TinyWiﬁ (Extension of TinyOS): TinyWiﬁ is characterized as a Linux-based TinyOS. Sensor nodes and other sensing applications that are Linux-based can directly be implemented with the help of TinyWiﬁ.This has saved developers time in further re-implementation of Linux-based sensing nodes. With the provision of TinyWiﬁ, Linux-based PCs and other handheld devices can be implemented on it. The primary purpose of TinyWiﬁ is to use IEEE 802.11 communication protocols [163, 222, 223, 224].
XII. CONCLUSIONS
In this paper, we present the most widely used OS for WSNs, TinyOS. We have encompassed the main features of TinyOS. Contributions of this paper are multiple. This survey has shown not only the contemporary state of the art for TinyOS, but also the different developmental phases and revisions it has undergone. Its event-driven concurrency model, simple programming layout in NesC, and faster execution make it the OS of choice for tiny sensing nodes. We have shown that energy efﬁciency in TinyOS and the best scheduling algorithms, like real-time scheduling and priority scheduling, have made TinyOS operate the best in resourceconstrained sensing environments. This paper has also pointed out that TinyOS code is very simple and short and takes

less memory, compared to other conventional OSs. Memory management and protection with the help of TinyOS is simple and more novel. Less memory requirements for TinyOS installations and its applications has made it the OS for sensor nodes. TinyOS is so ﬂexible that it provides support for the majority of energy-efﬁcient routing protocols. Different simulators for TinyOS were also discussed in our research paper. A comparative view of TinyOS with other renowned OSs for WSNs shows that TinyOS supports more features compared to other OSs for WSNs. TinyOSs support for a wide range of sensing applications, such as habitat monitoring and medical applications, has made it the OS of choice for WSNs. By going through the different features of TinyOS, it is clear that TinyOS is the OS for sensing networks that provides more accuracy and ﬂexibility for sensing node applications to run.
ACKNOWLEDGEMENT
This research was supported by Basic Science Research Program through the National Research Foundation of Korea (NRF) funded by the Ministry of Education (NRF2015R1D1A1A01058751).
REFERENCES
[1] Bharathidasan, Archana, and Vijay Anand Sai Ponduru. ”Sensor networks: An overview.” Department of Computer Science. University of California (2002).
[2] Chong, Chee-Yee, and Srikanta P. Kumar. ”Sensor networks: evolution, opportunities, and challenges.” Proceedings of the IEEE 91, no. 8 (2003): 1247-1256.
[3] Xu, Ning. ”A survey of sensor network applications.” IEEE Communications Magazine 40, no. 8 (2002): 102-114.
[4] Estrin, Deborah, Lewis Girod, Greg Pottie, and Mani Srivastava. ”Instrumenting the world with wireless sensor networks.” In Acoustics, Speech, and Signal Processing, 2001. Proceedings.(ICASSP’01). 2001 IEEE International Conference on, vol. 4, pp. 2033-2036. IEEE, 2001.
[5] Martinez, Kirk, Jane K. Hart, and Royan Ong. ”Environmental sensor networks.” Computer 37, no. 8 (2004): 50-56.
[6] Akyildiz, Ian F., Weilian Su, Yogesh Sankarasubramaniam, and Erdal Cayirci. ”Wireless sensor networks: a survey.” Computer networks 38, no. 4 (2002): 393-422.
[7] Margi, Cntia B., Bruno Trevizan de Oliveira, Gustavo T. de Sousa, M. A. Simplicio, Paulo SLM Barreto, Tereza Cristina MB Carvalho, M. Naslund, and Richard Gold. ”Impact of OS on wireless sensor networks (security) applications and testbeds.” In Computer Communications and Networks (ICCCN), 2010 Proceedings of 19th International Conference on, pp. 1-6. IEEE, 2010.
[8] Dong, Wei, Chun Chen, Xue Liu, and Jiajun Bu. ”Providing OS support for wireless sensor networks: challenges and approaches.” Communications Surveys and Tutorials, IEEE 12, no. 4 (2010): 519-530.
[9] Levis, Philip Alexander. ”Tinyos: An open operating system for wireless sensor networks (invited seminar).” In Mobile Data Management, 2006. MDM 2006. 7th International Conference on, pp. 63-63. IEEE, 2006.
[10] Farooq, Muhammad Omer, Sadia Aziz, and Abdul Basit Dogar. ”State of the Art in Wireless Sensor Networks OS: A Survey.” In Future Generation Information Technology, pp. 616-631. Springer Berlin Heidelberg, 2010.
[11] Phani, Adi Mallikarjuna Reddy V. AVU, D. Janakiram Kumar, and G. Ashok Kumar. ”OS for Wireless Sensor Networks: A Survey Technical Report.” (2007).
[12] Levis, Philip. ”Experiences from a decade of TinyOS development.” InProceedings of the 10th USENIX conference on OS Design and Implementation, OSDI, vol. 12, pp. 207-220. 2012.
[13] Gu, Lin, and John A. Stankovic. ”t-kernel: Providing reliable OS support to wireless sensor networks.” In Proceedings of the 4th international conference on Embedded networked sensor systems, pp. 1-14. ACM, 2006.

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

[14] Sugihara, Ryo, and Rajesh K. Gupta. ”Programming models for sensor networks: A survey.” ACM Transactions on Sensor Networks (TOSN) 4, no. 2 (2008): 8.
[15] Zheng, Manchun, Jun Sun, Yang Liu, Jin Song Dong, and Yu Gu. ”Towards a model checker for nesc and wireless sensor networks.” In Formal Methods and Software Engineering, pp. 372-387. Springer Berlin Heidelberg, 2011.
[16] Bucur, Doina, and Marta Kwiatkowska. ”On software veriﬁcation for sensor nodes.” Journal of Systems and Software 84, no. 10 (2011): 16931707.
[17] Raman, Sharan. ”TinyOS-An OS for Tiny Embedded Networked Sensors.” Paper Presentation for Advanced OS Course, Spring(2002).
[18] Gao, Rui, Hong Zhou, and Gang Su. ”Structure of wireless sensors network based on TinyOS.” In Control, Automation and Systems Engineering (CASE), 2011 International Conference on, pp. 1-4. IEEE, 2011.
[19] Archer, Will, Philip Levis, and John Regehr. ”Interface contracts for TinyOS.” In Proceedings of the 6th international conference on Information processing in sensor networks, pp. 158-165. ACM, 2007.
[20] Strazdins, Girts, Atis Elsts, Krisjanis Nesenbergs, and Leo Selavo. ”Wireless Sensor Network OS Design Rules Based on Real-World Deployment Survey.” Journal of Sensor and Actuator Networks 2, no. 3 (2013): 509-556.
[21] Levis, Philip, Sam Madden, Joseph Polastre, Robert Szewczyk, Kamin Whitehouse, Alec Woo, David Gay et al. ”TinyOS: An OS for sensor networks.” In Ambient intelligence, pp. 115-148. Springer Berlin Heidelberg, 2005.
[22] Mottola,Luca, and Gian Pietro Picco. ”Programming wireless sensor networks: Fundamental concepts and state of the art.” ACM Computing Surveys (CSUR)43, no. 3 (2011): 19.
[23] Gay, David, Philip Levis, David Culler, and Eric Brewer. ”nesC 1.3 language reference manual.” (2009).
[24] Handziski, Vlado, Joseph Polastre, Jan-Hinrich Hauer, and Cory Sharp. ”Flexible hardware abstraction of the TI MSP430 micro controller in TinyOS.” In Proceedings of the 2nd international conference on Embedded networked sensor systems, pp. 277-278. ACM.
[25] Handziski, Vlado, Joseph Polastre, J. Hauer, Cory Sharp, Adam Wolisz, and David Culler. ”Flexible hardware abstraction for wireless sensor networks.” In Wireless Sensor Networks, 2005. Proceeedings of the Second European Workshop on, pp. 145-157. IEEE, 2005.
[26] Levis, Philip. ”TinyOS programming.” available in http://www. tinyos. net/tinyos-2. x/doc/pdf/tinyos-programming. pdf (2006).
[27] Gay, David, Philip Levis, Robert Von Behren, Matt Welsh, Eric Brewer, and David Culler. ”The nesC language: A holistic approach to networked embedded systems.” In Acm Sigplan Notices, vol. 38, no. 5, pp. 1-11. ACM, 2003.
[28] Gay, David, Phil Levis, and David Culler. ”Software design patterns for TinyOS.”ACM SIGPLAN Notices 40, no. 7 (2005): 40-49.
[29] Levis, Philip, Samuel Madden, David Gay, Joseph Polastre, Robert Szewczyk, Alec Woo, Eric A. Brewer, and David E. Culler. ”The Emergence of Networking Abstractions and Techniques in TinyOS.” In NSDI, vol. 4, pp. 1-1. 2004.
[30] Iyengar, S. Sitharama, Nandan Parameshwaran, Vir V. Phoha, N. Balakrishnan, and Chuka D. Okoye. ”Tiny operating system (TinyOS).” Fundamentals of Sensor Network Programming: Applications and Technology: 92-97.
[31] McInnes, Allan I. ”Using CSP to model and analyze TinyOS applications.” InEngineering of Computer Based Systems, 2009. ECBS 2009. 16th Annual IEEE International Conference and Workshop on the, pp. 79-88. IEEE, 2009.
[32] Klues, Kevin, Chieh-Jan Mike Liang, Jeongyeup Paek, Razvan Musaloiu-Elefteri, Philip Levis, Andreas Terzis, and Ramesh Govindan. ”TOSThreads: thread-safe and non-invasive preemption in TinyOS.” In SenSys, vol. 9, pp. 127-140. 2009.
[33] Bucur, Doina, and Marta Kwiatkowska. ”Towards software veriﬁcation for TinyOS applications.” In Proc. 9th ACM/IEEE International Conference on Information Processing in Sensor Networks (IPSN 2010), Computing Laboratory, Oxford University, UK, pp. 400-401. 2009.
[34] Lindgren, Per, Henrik Makitaavola, Johan Eriksson, and Jens Eliasson. ”Leveraging tinyos for integration in process automation and control systems.” In IECON 2012-38th Annual Conference on IEEE Industrial Electronics Society, pp. 5779-5785. IEEE, 2012.
[35] Welsh, Matt, and Geoffrey Mainland. ”Programming Sensor Networks Using Abstract Regions.” In NSDI, vol. 4, pp. 3-3. 2004.

[36] Klues, Kevin, Vlado Handziski, Chenyang Lu, Adam Wolisz, David Culler, David Gay, and Philip Levis. ”Integrating concurrency control and energy management in device drivers.” In ACM SIGOPS OS Review, vol. 41, no. 6, pp. 251-264. ACM, 2007.
[37] Hill, Jason, and David Culler. A wireless embedded sensor architecture for system-level optimization. UC Berkeley Technical Report, 2002.
[38] Hill, Jason Lester. ”System architecture for wireless sensor networks.” PhD diss., University of California, 2003.
[39] Levis, Philip. ”TinyOS: Getting Started.” (2002). [40] Alizai, Muhammad Hamad, Olaf Landsiedel, and Klaus Wehrle. ”Mod-
eling Execution Time and Energy Consumption in Sensor Node Simulation.” PIK-Praxis der Informationsverarbeitung und Kommunikation 32, no. 2 (2009): 127-132. [41] Levis, Philip, David Gay, and David Culler. ”Active sensor networks.” In Proceedings of the 2nd conference on Symposium on Networked Systems Design and Implementation-Volume 2, pp. 343-356. USENIX Association, 2005. [42] Kothari, Nupur, Todd Millstein, and Ramesh Govindan. ”Deriving state machines from TinyOS programs using symbolic execution.” In Information Processing in Sensor Networks, 2008. IPSN’08. International Conference on, pp. 271-282. IEEE, 2008. [43] Dalton, Andrew R., Sally K. Wahba, Sravanthi Dandamudi, and Jason O. Hallstrom. ”Visualizing the runtime behavior of embedded network systems: A toolkit for TinyOS.” Science of Computer Programming 74, no. 7 (2009): 446-469. [44] Borges, Vijay, Omkar Raikar, Vinit Desai, and Priya Dalvi. ”A Comparative Study of TinyOS Scheduling Strategies and Future Scope. [45] Levis, Philip, and Cory Sharp. ”Schedulers and tasks.” TinyOS Extension Proposal (TEP) 106 (2011). [46] Subramonian, Venkita, Huang-Ming Huang, Seema Datar, and Chenyang Lu. ”Priority scheduling in TinyOS: A case study.” Department of Computer Science, Washington University, St. Louis. MO (2003). [47] Lei, Tao, Xiang-mo Zhao, and Fei Hui. ”A TinyOS scheduling strategy and its implementation.” (2011). [48] Yu, Min, Si Ji Xiahou, and Xin Yu Li. ”A survey of studying on task scheduling mechanism for TinyOS.” In Wireless Communications, Networking and Mobile Computing, 2008. WiCOM’08. 4th International Conference on, pp. 1-4. IEEE, 2008. [49] Ateﬁ, Kayvan, Mohammad Sadeghi, and Arash Ateﬁ. ”Real-Time Scheduling Strategy for Wireless Sensor Networks OS.” International Journal of Distributed and Parallel Systems (IJDPS) Vol 2 (2011). [50] Zhao, Yan, Qianping Wang, Wei Wang, Dong Jiang, and Yiwen Liu. ”Research on the priority-based soft real-time task scheduling in TinyOS.” In Information Technology and Computer Science, 2009. ITCS 2009. International Conference on, vol. 1, pp. 562-565. IEEE, 2009. [51] Tak, Sungwoo, Heekyum Kim, and Taehoon Kim. ”A Study on RealTime Scheduling for Low-Power Sensor Node Platforms.” In Computer and Information Technology (CIT), 2012 IEEE 12th International Conference on, pp. 169-176. IEEE, 2012. [52] Khezri, Meysam, Mehdi Agha Sarram, and Fazlollah Adibniya. ”Simplifying Concurrent Programming of Networked Embedded Systems.” In Parallel and Distributed Processing with Applications, 2008. ISPA’08. International Symposium on, pp. 993-998. IEEE, 2008. [53] Chen, Min, Victor CM Leung, Shiwen Mao, and Ming Li. ”Cross-layer and path priority scheduling based real-time video communications over wireless sensor networks.” In Vehicular Technology Conference, 2008. VTC Spring 2008. IEEE, pp. 2873-2877. IEEE, 2008. [54] Hohlt, Barbara, and Eric Brewer. ”Network power scheduling for TinyOS applications.” In Distributed Computing in Sensor Systems, pp. 443-462. Springer Berlin Heidelberg, 2006. [55] Hill, Jason Lester. ”Electronic access control, tracking and paging system.” U.S. Patent 7,367,497, issued May 6, 2008.. [56] Alliance, TinyOS. ”TinyOS 2.1 adding threads and memory protection to TinyOS.” In Proceedings of the 6th ACM conference on Embedded network sensor systems, pp. 413-414. ACM, 2008. [57] Cooprider, Nathan, Will Archer, Eric Eide, David Gay, and John Regehr. ”Efﬁcient memory safety for TinyOS.” In Proceedings of the 5th international conference on Embedded networked sensor systems, pp. 205-218. ACM, 2007. [58] Regehr, John, Nathan Cooprider, Will Archer, and Eric Eide. ”Memory safety and untrusted extensions for tinyos.” In In submission. 2006. [59] Dunkels, Adam, Oliver Schmidt, Thiemo Voigt, and Muneeb Ali. ”Protothreads: simplifying event-driven programming of memoryconstrained embedded systems.” In Proceedings of the 4th international

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

conference on Embedded networked sensor systems, pp. 29-42. Acm, 2006. [60] McCartney, William P., and Nigamanth Sridhar. ”Stackless preemptive multi-threading for TinyOS.” In Distributed Computing in Sensor Systems and Workshops (DCOSS), 2011 International Conference on, pp. 1-8. IEEE, 2011. [61] Munawar, Waqaas, Muhammad Hamad Alizai, Olaf Landsiedel, and Klaus Wehrle. ”Dynamic tinyos: Modular and transparent incremental code-updates for sensor networks.” In Communications (ICC), 2010 IEEE International Conference on, pp. 1-6. IEEE, 2010. [62] Min, Rex, Manish Bhardwaj, Seong-Hwan Cho, Eugene Shih, Amit Sinha, Alice Wang, and Anantha Chandrakasan. ”Low-power wireless sensor networks.” InVLSI Design, 2001. Fourteenth International Conference on, pp. 205-210. IEEE, 2001. [63] Sinha, Amit, and Anantha Chandrakasan. ”Dynamic power management in wireless sensor networks.” Design and Test of Computers, IEEE 18, no. 2 2001: 62-74. [64] Akilandeswari, N., B. Santhi, and B. Baranidharan. ”A SURVEY ON ENERGY CONSERVATION TECHNIQUES IN WIRELESS SENSOR NETWORKS.”Journal of Agricultural and Biological Science 8, no. 4 2013. [65] Anastasi, Giuseppe, Marco Conti, Mario Di Francesco, and Andrea Passarella. ”Energy conservation in wireless sensor networks: A survey.” Ad Hoc Networks7, no. 3 2009: 537-568. [66] Purvis, Zane D., and Alexander G. Dean. ”TOSSTI: Saving Time and Energy in TinyOS with Software Thread Integration.” In Real-Time and Embedded Technology and Applications Symposium, 2008. RTAS’08. IEEE, pp. 354-363. IEEE, 2008. [67] Landsiedel, Olaf, Klaus Wehrle, and Stefan Gtz. ”Accurate prediction of power consumption in sensor networks.” In Proc. of the Second Workshop on Embedded Networked Sensors. 2005. [68] Halgamuge, Malka N., Moshe Zukerman, Kotagiri Ramamohanarao, and Hai L. Vu. ”An estimation of sensor energy consumption.” Progress In Electromagnetics Research B 12 (2009): 259-295. [69] Li, Suet-Fei, Roy Sutton, and Jan Rabaey. ”Low power OS for heterogeneous wireless communication system.” In Compilers and OS for low power, pp. 1-16. Springer US, 2003. [70] Abbate, Stefano, Marco Avvenuti, Daniel Cesarini, and Alessio Vecchio. ”Estimation of energy consumption for tinyos 2. x-based applications.” Procedia Computer Science 10 (2012): 1166-1171. [71] Abbate, Stefano, Marco Avvenuti, Alessandro Biondi, and Alessio Vecchio. ”Estimation of energy consumption in wireless sensor networks using TinyOS 2. x.” In Consumer Communications and Networking Conference (CCNC), 2011 IEEE, pp. 842-843. IEEE, 2011. [72] Sarna, Supreet Kaur, and Mukesh Zaveri. ”EATT: energy aware target tracking for wireless sensor networks using TinyOS.” In Computer Science and Information Technology (ICCSIT), 2010 3rd IEEE International Conference on, vol. 1, pp. 187-191. IEEE, 2010. [73] Dezfouli, Behnam, Marjan Radi, Shukor Abd Razak, Tan Hwee-Pink, and Kamalrulnizam Abu Bakar. ”Modeling low-power wireless communications.” Journal of Network and Computer Applications (2014). [74] Sharma, Bhisham, and Trilok C. Aseri. ”A hybrid and dynamic reliable transport protocol for wireless sensor networks.” Computers and Electrical Engineering (2015). [75] Shekhar, Shashank, Ranjeet Mishra, R. K. Ghosh, and R. K. Shyamasundar. ”Post-order based routing and transport protocol for wireless sensor networks.” Pervasive and Mobile Computing 11 (2014): 229-243. [76] H.Srikanth,Kama, ”theEnergy Efﬁcient Routing Protocol for Wireless Sensor Networks”International Journal of Advanced Computer Research (ISSN (print):2249-7277 ISSN (online):2277-7970) Volume-3 Number-2 Issue-10 June-2013. [77] Rao, BV Manikyala, S. Pallam Setty, and G. Lavanya Devi. ”Energy Efﬁcient Routing Protocols In Wireless Sensor Networks.” IJCC 2, no. 1 (2013). [78] Balamurugan, A. ”AN ENERGY EFFICIENT FITNESS BASED ROUTING PROTOCOL IN WIRELESS SENSOR NETWORKS.” ICTACT Journal on Communication Technology 5, no. 1 (2014). [79] Akkaya, Kemal, and Mohamed Younis. ”A survey on routing protocols for wireless sensor networks.” Ad hoc networks 3, no. 3 (2005): 325349. [80] Zhu, Hongzi, and Minglu Li. ”Opportunistic Routing Protocols.” In Studies on Urban Vehicular Ad-hoc Networks, pp. 41-74. Springer New York, 2013.

[81] Biswas, Sanjit, and Robert Morris. ”Opportunistic routing in multihop wireless networks.” ACM SIGCOMM Computer Communication Review 34, no. 1 (2004): 69-74.
[82] Carnley, James, Bo Sun, and S. Kami Makki. ”Torp: Tinyos opportunistic routing protocol for wireless sensor networks.” In Consumer Communications and Networking Conference (CCNC), 2011 IEEE, pp. 111-115. IEEE, 2011.
[83] Heinzelman, Wendi Rabiner, Anantha Chandrakasan, and Hari Balakrishnan. ”Energy-efﬁcient communication protocol for wireless microsensor networks.” InSystem Sciences, 2000. Proceedings of the 33rd Annual Hawaii International Conference on, pp. 10-pp. IEEE, 2000.
[84] Hou, Guofeng, K. Wendy Tang, and Eric Noel. ”Implementation and analysis of the LEACH protocol on the TinyOS platform.” In ICT Convergence (ICTC), 2013 International Conference on, pp. 918-923. IEEE, 2013.
[85] Liang, Yuguo. ”Study of protocol for wireless sensor network based on TinyOS.” In Computer Design and Applications (ICCDA), 2010 International Conference on, vol. 2, pp. V2-602. IEEE, 2010.
[86] Khan, S., S. Basharat, M. S. H. Khiyal, and S. A. Khan. ”Investigating Energy Consumption of Localized and Non Localized Ad hoc Routing Protocols in TinyOS.” In Multitopic Conference, 2006. INMIC’06. IEEE, pp. 355-358. IEEE, 2006.
[87] Daabaj, Khaled. ”Load-balanced routing scheme for TinyOS-based wireless sensor networks.” In Wireless Information Technology and Systems (ICWITS), 2010 IEEE International Conference on, pp. 1-4. IEEE, 2010.
[88] Wang, Wei, Jong-Hoon Youn, and Hamid R. Sharif. ”The Implementation of an Energy Balanced Routing Protocol with Dynamic Power Scaling in TinyOS.” In Sensor Networks, Ubiquitous, and Trustworthy Computing, 2006. IEEE International Conference on, vol. 2, pp. 262267. IEEE, 2006.
[89] Rehena, Zeenat, Krishanu Kumar, Sarbani Roy, and Nandini Mukherjee. ”SPIN implementation in TinyOS environment using nesC.” In Computing Communication and Networking Technologies (ICCCNT), 2010 International Conference on, pp. 1-6. IEEE, 2010.
[90] Bertocco, M., G. Gamba, A. Sona, and S. Vitturi. ”Performance measurements of CSMA/CA-based wireless sensor networks for industrial applications.” In Instrumentation and Measurement Technology Conference Proceedings, 2007. IMTC 2007. IEEE, pp. 1-6.
[91] Demirkol, Ilker, Cem Ersoy, and Fatih Alagoz. ”MAC protocols for wireless sensor networks: a survey.” Communications Magazine, IEEE 44, no. 4 (2006): 115-121.
[92] Ko, JeongGil, Nicolas Tsiftes, Adam Dunkels, and Andreas Terzis. ”Pragmatic low-power interoperability: ContikiMAC vs TinyOS LPL.” In Sensor, Mesh and Ad Hoc Communications and Networks (SECON), 2012 9th Annual IEEE Communications Society Conference on, pp. 9496. IEEE, 2012.
[93] Buettner, Michael, Gary V. Yee, Eric Anderson, and Richard Han. ”X-MAC: a short preamble MAC protocol for duty-cycled wireless sensor networks.” In Proceedings of the 4th international conference on Embedded networked sensor systems, pp. 307-320. ACM, 2006.
[94] Van Den Akker, Daniel, and Chris Blondia. ”MultiMAC: A multiple MAC network stack architecture for TinyOS.” In Computer Communications and Networks (ICCCN), 2012 21st International Conference on, pp. 1-5. IEEE, 2012.
[95] Levis, Philip. ”Packet protocols.” TinyOS Enhancement Proposal 116 (2007).
[96] Madden, Sam, Joe Hellerstein, and Wei Hong. ”TinyDB: In-network query processing in tinyos.” Version 0.4, September (2003).
[97] Madden, Samuel R., Michael J. Franklin, Joseph M. Hellerstein, and Wei Hong. ”TinyDB: an acquisitional query processing system for sensor networks.” ACM Transactions on database systems (TODS) 30, no. 1 (2005): 122-173.
[98] Di Felice, Paolino, Massimo Ianni, and Luigi Pomante. ”A spatial extension of TinyDB for wireless sensor networks.” In Computers and Communications, 2008. ISCC 2008. IEEE Symposium on, pp. 10761082. IEEE, 2008.
[99] Mayer, Kevin, Ken Taylor, and A. N. U. Campus. ”TinyDB by remote.” In World Conf. On Integrated Design and Process Tech., Austin, Texas, pp. 3-6. 2003.
[100] Manjeshwar, Arati, and Dharma P. Agrawal. ”APTEEN: A hybrid protocol for efﬁcient routing and comprehensive information retrieval in wireless sensor networks.” In Parallel and Distributed Processing Symposium, International, vol. 2, pp. 0195b-0195b. IEEE Computer Society, 2002.

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

[101] Afsar, M. Mehdi, and Mohammad-H. Tayarani-N. ”Clustering in sensor networks: A literature survey.” Journal of Network and Computer Applications 46 (2014): 198-226.
[102] Rodrigues, Joel JPC, and Paulo ACS Neves. ”A survey on IP Based wireless sensor network solutions.” International Journal of Communication Systems 23, no. 8 (2010): 963-981.
[103] Bhunia, Suman Sankar, Dilip Kanti Sikder, Sarbani Roy, and Nandini Mukherjee. ”A comparative study on routing schemes of IP based wireless sensor network.” In Wireless and Optical Communications Networks (WOCN), 2012 Ninth International Conference on, pp. 1-5. IEEE, 2012.
[104] Ko, JeongGil, Stephen Dawson-Haggerty, Omprakash Gnawali, David Culler, and Andreas Terzis. ”Evaluating the Performance of RPL and 6LoWPAN in TinyOS.” In Workshop on Extending the Internet to Low Power and Lossy Networks (IP+ SN). 2011.
[105] Saad, Leila Ben, Cedric Chauvenet, and Bernard Tourancheau. ”IPv6 (Internet Protocol version 6) heterogeneous networking infrastructure for energy efﬁcient building.” Energy 44, no. 1 (2012): 447-457.
[106] Kumar, Vijay, George Oikonomou, Theo Tryfonas, Dan Page, and Iain Phillips. ”Digital investigations for IPv6-based Wireless Sensor Networks.” Digital Investigation 11 (2014): S66-S75.
[107] Cunha, Andr, Anis Koubaa, Ricardo Severino, and Mrio Alves. ”OpenZB: an open-source implementation of the IEEE 802.15. 4/ZigBee protocol stack on TinyOS.” In Mobile Adhoc and Sensor Systems, 2007. MASS 2007. IEEE Internatonal Conference on, pp. 1-12. IEEE, 2007.
[108] Baronti, Paolo, Prashant Pillai, Vince WC Chook, Stefano Chessa, Alberto Gotta, and Y. Fun Hu. ”Wireless sensor networks: A survey on the state of the art and the 802.15. 4 and ZigBee standards.” Computer communications 30, no. 7 (2007): 1655-1695.
[109] Ergen, Sinem Coleri. ”ZigBee/IEEE 802.15. 4 Summary.” UC Berkeley, September 10 (2004): 17.
[110] Clemotte, Alejandro, E. A. Vargas, and S. L. Toral. ”A Zigbee target system running TinyOS.” In Power Electronics and Motion Control Conference (EPE/PEMC), 2012 15th International, pp. LS4e-5. IEEE, 2012.
[111] Mozumdar, Mohammad Mostaﬁzur Rahman, Francesco Gregoretti, Luciano Lavagno, and Laura Vanzago. ”Porting application between wireless sensor network software platforms: TinyOS, MANTIS and ZigBee.” In Emerging Technologies and Factory Automation, 2008. ETFA 2008. IEEE International Conference on, pp. 1145-1148. IEEE, 2008.
[112] Sauter, Robert, Olga Saukh, Oliver Frietsch, and Pedro Jos Marrn. ”TinyLTS: Efﬁcient network-wide logging and tracing system for TinyOS.” In INFOCOM, 2011 Proceedings IEEE, pp. 2033-2041. IEEE, 2011.
[113] Anastasopoulos, Angelos, Dimitris Tsitsipis, Spilios Giannoulis, and Stavros Koubias. ”Implementation and evaluation of a hybrid network utilizing TinyOS-based systems and Ethernet.” In Emerging Technologies and Factory Automation, 2007. ETFA. IEEE Conference on, pp. 441-447. IEEE, 2007.
[114] Wang, Yi-Tao, and Rajive Bagrodia. ”Scalable emulation of TinyOS applications in heterogeneous network scenarios.” In Mobile Adhoc and Sensor Systems, 2009. MASS’09. IEEE 6th International Conference on, pp. 140-149. IEEE, 2009.
[115] Musznicki, Bartosz, and Piotr Zwierzykowski. ”Survey of Simulators for Wireless Sensor Networks.” International Journal of Grid and Distributed Computing 5, no. 3 (2012).
[116] Levis, Philip, and Nelson Lee. ”Tossim: A simulator for tinyos networks.” UC Berkeley, September 24 (2003).
[117] Levis, Philip, Nelson Lee, Matt Welsh, and David Culler. ”TOSSIM: Accurate and scalable simulation of entire TinyOS applications.” In Proceedings of the 1st international conference on Embedded networked sensor systems, pp. 126-137. ACM, 2003.
[118] Zhao, Liu, Cui Xiao-yan, Chen Meng-xiao, and Zhang Wei. ”The design and implement of automated transfer based on TinyOS.” In Microwave, Antenna, Propagation and EMC Technologies for Wireless Communications, 2009 3rd IEEE International Symposium on, pp. 748750. IEEE, 2009.
[119] Notani, Shailesh A. ”Performance simulation of multihop routing algorithms for ad-hoc wireless sensor networks using TOSSIM.” In Advanced Communication Technology, 2008. ICACT 2008. 10th International Conference on, vol. 1, pp. 508-513. IEEE, 2008.
[120] Kar, Soummya, and Jos MF Moura. ”Distributed consensus algorithms

in sensor networks: Quantized data and random link failures.” Signal Processing, IEEE Transactions on 58, no. 3 (2010): 1383-1400. [121] Abdaoui, Abderrazak, and Tarek M. El-Fouly. ”TOSSIM and distributed binary consensus algorithm in wireless sensor networks.” Journal of Network and Computer Applications 41 (2014): 451-458. [122] Nath, Rudradeep. ”A TOSSIM based implementation and analysis of collection tree protocol in wireless sensor networks.” In Communications and Signal Processing (ICCSP), 2013 International Conference on, pp. 484-488. IEEE, 2013. [123] Li, Jiakai, and Gursel Serpen. ”TOSSIM simulation of wireless sensor network serving as hardware platform for Hopﬁeld neural net conﬁgured for max independent set.” Procedia Computer Science 6 (2011): 408412. [124] Li, Jiakai, and Gursel Serpen. ”Simulating Heterogeneous and LargerScale Wireless Sensor Networks with TOSSIM TinyOS Emulator.” Procedia Computer Science 12 (2012): 374-379. [125] Serpen, Gursel, and Jiakai Li. ”Assessing Time Complexity of Applications for TinyOS-Mica Wireless Sensor Networks in TOSSIM Emulator.” Procedia Computer Science 12 (2012): 380-385. [126] Gupta, Atrayee, and Sarbani Roy. ”Design and Implementation of Visualizers for TinyOS.” Procedia Technology 10 (2013): 409-416. [127] Shnayder, Victor, Mark Hempstead, Bor-rong Chen, and Matt Welsh. ”Powertossim: Efﬁcient power simulation for tinyos applications.” (2004). [128] Safaei, Mahmood, Abdul Samad Haji Ismail, and Abdul Samad Haji Ismail. ”Visualization, Data Analyzing and Energy Usage Analysis in Wireless Sensor Network Based on TinyOs and PowerTossimZ.” International Journal of Computer Communications and Networks (IJCCN) 1, no. 1 (2011). [129] Suh, Changsu, Jung-Eun Joung, and Young-Bae Kot. ”New RF models of TinyOS simulator for IEEE 802.15. 4 standard.” In Wireless Communications and Networking Conference, 2007. WCNC 2007. IEEE, pp. 2236-2240. IEEE, 2007. [130] Mora-Merchan, J. M., D. F. Larios, Julio Barbancho, Francisco Javier Molina, Jos Luis Sevillano, and Carlos Len. ”mTOSSIM: A simulator that estimates battery lifetime in wireless sensor networks.” Simulation Modelling Practice and Theory 31 (2013): 39-51. [131] Dron, Wilfried, Simon Duquennoy, Thiemo Voigt, Khalil Hachicha, and Patrick Garda. ”An emulation-based method for lifetime estimation of wireless sensor networks.” In Distributed Computing in Sensor Systems (DCOSS), 2014 IEEE International Conference on, pp. 241-248. IEEE, 2014. [132] Pughat, Anuradha, and Vidushi Sharma. ”A review on stochastic approach for dynamic power management in wireless sensor networks.” Human-centric Computing and Information Sciences 5, no. 1 (2015): 1-14. [133] Cheong, Elaine, Edward A. Lee, and Yang Zhao. ”Viptos: a graphical development and simulation environment for tinyos-based wireless sensor networks.” In SenSys, vol. 5, pp. 302-302. 2005. [134] Teng, Guodong, Kougen Zheng, and Wei Dong. ”A survey of available tools for developing wireless sensor networks.” In Systems and Networks Communications, 2008. ICSNC’08. 3rd International Conference on, pp. 139-144. IEEE, 2008. [135] Taylor, Heather. ”Multihop Routing Simulation of TinyOS-Based Wireless Sensor Networks in Viptos.” (2006). [136] Varshney, Maneesh, Defeng Xu, Mani Srivastava, and Rajive Bagrodia. ”sQualNet: A scalable simulation and emulation environment for sensor networks.” In Proceedings of the International Conference on Information Processing in Sensor Networks, New York, NY, USA. Citeseer, p. 24. 2007. [137] Singh, Chandresh Pratap, O. P. Vyas, and Manoj Kumar Tiwari. ”A survey of simulation in sensor networks.” In Computational Intelligence for Modelling Control and Automation, 2008 International Conference on, pp. 867-872. IEEE, 2008. [138] Rajendran, Venkatesh, Katia Obraczka, and Jose Joaquin Garcia-LunaAceves. ”Energy-efﬁcient, collision-free medium access control for wireless sensor networks.” Wireless Networks 12, no. 1 (2006): 63-78. [139] Perrone, L. Felipe, and David M. Nicol. ”A scalable simulator for TinyOS applications.” In Simulation Conference, 2002. Proceedings of the Winter, vol. 1, pp. 679-687. IEEE, 2002. [140] Safaei, Mahmood, and Abdul Samad Haji Ismail. ”SmartSim: graphical sensor network simulation based on TinyOS and TOSSIM.” In Intelligent Systems, Modelling and Simulation (ISMS), 2012 Third International Conference on, pp. 611-615. IEEE, 2012.

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

[141] Girod, Lewis, Thanos Stathopoulos, Nithya Ramanathan, Jeremy Elson, Deborah Estrin, Eric Osterweil, and Tom Schoellhammer. ”A system for simulation, emulation, and deployment of heterogeneous sensor networks.” In Proceedings of the 2nd international conference on Embedded networked sensor systems, pp. 201-213. ACM, 2004.
[142] Girod, Lewis, Jeremy Elson, Alberto Cerpa, Thanos Stathopoulos, Nithya Ramanathan, and Deborah Estrin. ”EmStar: A Software Environment for Developing and Deploying Wireless Sensor Networks.” In USENIX Annual Technical Conference, General Track, pp. 283-296. 2004.
[143] Reusing, Tobias. ”Comparison of OS tinyos and contiki.” Sens. NodesOperation, Netw. Appli.(SN) 7 (2012).
[144] Dunkels, Adam, Bjorn Gronvall, and Thiemo Voigt. ”Contiki-a lightweight and ﬂexible operating system for tiny networked sensors.” In Local Computer Networks, 2004. 29th Annual IEEE International Conference on, pp. 455-462. IEEE, 2004.
[145] Oikonomou, George, and Iain Phillips. ”Experiences from porting the Contiki operating system to a popular hardware platform.” In Distributed Computing in Sensor Systems and Workshops (DCOSS), 2011 International Conference on, pp. 1-6. IEEE, 2011.
[146] Cao, Qing, Tarek Abdelzaher, John Stankovic, and Tian He. ”The liteos operating system: Towards unix-like abstractions for wireless sensor networks.” In Information Processing in Sensor Networks, 2008. IPSN’08. International Conference on, pp. 233-244. IEEE, 2008.
[147] Cao, Qing, and Tarek Abdelzaher. ”LiteOS: a lightweight operating system for C++ software development in sensor networks.” In Proceedings of the 4th international conference on Embedded networked sensor systems, pp. 361-362. ACM, 2006.
[148] C.-C. Han, R. Kumar, R. Shea, E. Kohler, and M. Srivastava, A dynamic operating system for sensor nodes, in Proc. ACM MobiSys, 2005.
[149] Bhatti, Shah, James Carlson, Hui Dai, Jing Deng, Jeff Rose, Anmol Sheth, Brian Shucker, Charles Gruenwald, Adam Torgerson, and Richard Han. ”MANTIS OS: An embedded multithreaded OS for wireless micro sensor platforms.” Mobile Networks and Applications 10, no. 4 (2005): 563-579.
[150] Abrach, Hector, Shah Bhatti, James Carlson, Hui Dai, Jeff Rose, Anmol Sheth, Brian Shucker, Jing Deng, and Richard Han. ”MANTIS: System support for multimodal networks of in-situ sensors.” In Proceedings of the 2nd ACM international conference on Wireless sensor networks and applications, pp. 50-59. ACM, 2003.
[151] A. Eswaran, A. Rowe, and R. Rajkumar, Nano-RK: An energy-aware resource-centric RTOS for sensor networks, in Proc. IEEE RTSS, 2005.
[152] H. Cha, S. Choi, I. Jung, H. Kim, and H. Shin, RETOS: Resilient, expandable, and threaded operating system for wireless sensor networks, in Proc. ACM/IEEE IPSN, 2007.
[153] Cha, Hojung, Sukwon Choi, Inuk Jung, Hyoseung Kim, Hyojeong Shin, Jaehyun Yoo, and Chanmin Yoon. ”The RETOS operating system: kernel, tools and applications.” In Proceedings of the 6th international conference on Information processing in sensor networks, pp. 559-560. ACM, 2007.
[154] Duffy, Cormac, Utz Roedig, John Herbert, and Cormac Sreenan. ”An experimental comparison of event driven and multi-threaded sensor node OS.” In Pervasive Computing and Communications Workshops, 2007. PerCom Workshops’ 07. Fifth Annual IEEE International Conference on, pp. 267-271. IEEE, 2007.
[155] Park, Seungmin, Jin Won Kim, Kee-Young Shin, and Daeyoung Kim. ”A nano OS for wireless sensor networks.” In Advanced Communication Technology, 2006. ICACT 2006. The 8th International Conference, vol. 1, pp. 4-pp. IEEE, 2006.
[156] Chien, Thang Vu, Hung Nguyen Chan, and Thanh Nguyen Huu. ”A comparative study on OS for Wireless Sensor Networks.” In Advanced Computer Science and Information System (ICACSIS), 2011 International Conference on, pp. 73-78. IEEE, 2011.
[157] Farooq, Muhammad Omer, and Thomas Kunz. ”OS for wireless sensor networks: A survey.” Sensors 11, no. 6 (2011): 5900-5930.
[158] Kumar, Dilip, Trilok C. Aseri, and R. B. Patel. ”EEHC: Energy efﬁcient heterogeneous clustered scheme for wireless sensor networks.” Computer Communications 32, no. 4 (2009): 662-667.
[159] Younis, Ossama, Marwan Krunz, and Srinivasan Ramasubramanian. ”Node clustering in wireless sensor networks: Recent developments and deployment challenges.” Network, IEEE 20, no. 3 (2006): 20-25.
[160] Smaragdakis, Georgios, Ibrahim Matta, and Azer Bestavros. SEP: A

stable election protocol for clustered heterogeneous wireless sensor networks. Boston University Computer Science Department, 2004. [161] Tonneau, Anne-Sophie, Nathalie Mitton, and Julien Vandaele. ”How to choose an experimentation platform for wireless sensor networks? A survey on static and mobile wireless sensor network experimentation facilities.” Ad Hoc Networks (2015). [162] Hill, Jason, Mike Horton, Ralph Kling, and Lakshman Krishnamurthy. ”The platforms enabling wireless sensor networks.” Communications of the ACM 47, no. 6 (2004): 41-46. [163] Kirchen, Bernhard, Muhammad Hamad Alizai, Ing Klaus Wehrle, and Ing Stefan Kowalewski. ”Tinywiﬁ: Enabling linux platform support in tinyos.” Bachelor Thesis, RWTH Aachen University (2010). [164] Handziski, Vlado, Joseph Polastre, Jan-Hinrich Hauer, Cory Sharp, Adam Wolisz, David Culler, and David Gay. ”Hardware abstraction architecture.” 2007-02-22). http://www. tinyos. net/tinyos-2. x/doc/tep2 (2012). [165] Hill, Jason L., and David E. Culler. ”Mica: A wireless platform for deeply embedded networks. ” Micro, IEEE 22, no. 6 (2002): 12-24. [166] Farshchi, Shahin, Paul H. Nuyujukian, Aleksey Pesterev, Istvan Mody, and Jack W. Judy. ”A TinyOS-enabled MICA2-BasedWireless neural interface.” Biomedical Engineering, IEEE Transactions on 53, no. 7 (2006): 1416-1424. [167] Polastre, Joseph, Robert Szewczyk, and David Culler. ”Telos: enabling ultra-low power wireless research.” In Information Processing in Sensor Networks, 2005. IPSN 2005. Fourth International Symposium on, pp. 364-369. IEEE, 2005. [168] Agre, Jonathan R., Loren P. Clare, Gregory J. Pottie, and Nikolai P. Romanov. ”Development platform for self-organizing wireless sensor networks.” In AeroSense’99, pp. 257-268. International Society for Optics and Photonics, 1999. [169] Paczesny, Tomasz, Tomasz Tajmajer, Jaroslaw Domaszewicz, and Aleksander Pruszkowski. ”ProxyMotes: Linux-based TinyOS Platform for Non-TinyOS Sensors and Actuators.” In Parallel and Distributed Processing with Applications (ISPA), 2012 IEEE 10th International Symposium on, pp. 255-261. IEEE, 2012. [170] Hempstead, Mark, Matt Welsh, and David Brooks. ”Tinybench: The case for a standardized benchmark suite for tinyos based wireless sensor network devices.” In Local Computer Networks, 2004. 29th Annual IEEE International Conference on, pp. 585-586. IEEE, 2004. [171] Lin, Min, Yan Wu, and Ian Wassell. ”Wireless sensor network: Water distribution monitoring system.” In Radio and Wireless Symposium, 2008 IEEE, pp. 775-778. IEEE, 2008. [172] Chung, Wan-Young, and Jae-Ho Yoo. ”Remote water quality monitoring in wide area.” Sensors and Actuators B: Chemical (2015). [173] Sikora, Axel, Philipp Digeser, Martin Klemm, Marco Tubolino, and Rico Werner. ”Model based development of a TinyOS-based Wireless M-Bus implementation.” In Wireless Systems (IDAACS-SWS), 2012 IEEE 1st International Symposium on, pp. 91-94. IEEE, 2012. [174] Heidemann, John, Wei Ye, Jack Wills, Affan Syed, and Yuan Li. ”Research challenges and applications for underwater sensor networking.” In Wireless Communications and Networking Conference, 2006. WCNC 2006. IEEE, vol. 1, pp. 228-235. IEEE, 2006. [175] Heidemann, John, Milica Stojanovic, and Michele Zorzi. ”Underwater sensor networks: applications, advances and challenges.” Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences 370, no. 1958 (2012): 158-175. [176] Noh, Youngtae, Dustin Torres, and Mario Gerla. ”Software-deﬁned underwater acoustic networking platform and its applications.” Ad Hoc Networks (2015). [177] Al-Nakhala, Noor, Ryan Riley, and Tarek Elfouly. ”Distributed algorithms in wireless sensor networks: an approach for applying binary consensus in a real testbed.” Computer Networks (2015). [178] Britton, Matthew, Venus Shum, Lionel Sacks, and Hamed Haddadi. ”A biologically-inspired approach to designing wireless sensor networks.” In Wireless Sensor Networks, 2005. Proceeedings of the Second European Workshop on, pp. 256-266. IEEE, 2005. [179] Sohraby, Kazem, Daniel Minoli, and Taieb Znati. Wireless sensor networks: technology, protocols, and applications. John Wiley and Sons, 2007. [180] Farshchi, Shahin, Istvan Mody, and Jack W. Judy. ”A TinyOS-based wireless neural interface.” In Engineering in Medicine and Biology Society, 2004. IEMBS’04. 26th Annual International Conference of the IEEE, vol. 2, pp. 4334-4337. IEEE, 2004.

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal

[181] Farshchi, Shahin, Paul H. Nuyujukian, Aleksey Pesterev, Istvan Mody, and Jack W. Judy. ”A tinyos-based wireless neural sensing, archiving, and hosting system.” In Neural Engineering, 2005. Conference Proceedings. 2nd International IEEE EMBS Conference on, pp. 671-674. IEEE, 2005.
[182] Farshchi, Shahin, Aleksey Pesterev, Paul Nuyujukian, Eric Guenterberg, Istvan Mody, and Jack W. Judy. ”Embedded neural recording with TinyOS-based wireless-enabled processor modules.” Neural Systems and Rehabilitation Engineering, IEEE Transactions on 18, no. 2 (2010): 134141.
[183] Li, Jiakai, and Gursel Serpen. ”nesC-TinyOS model for parallel and distributed computation of max independent set by Hopﬁeld network on wireless sensor network.” Procedia Computer Science 6 (2011): 396401.
[184] Kiing-Ing, Wong. ”A light-weighted, low-cost and wireless ecg monitor design based on tinyos operating system.” In Information Technology Applications in Biomedicine, 2007. ITAB 2007. 6th International Special Topic Conference on, pp. 165-168. IEEE, 2007.
[185] Tolle, Gilman, and David E. Culler. ”Design of an applicationcooperative management system for wireless sensor networks.” In EWSN, vol. 5, pp. 121-132. 2005.
[186] Hill, Jason, Robert Szewczyk, Alec Woo, Seth Hollar, David Culler, and Kristofer Pister. ”System architecture directions for networked sensors.” In ACM SIGOPS operating systems review, vol. 34, no. 5, pp. 93-104. ACM, 2000.
[187] Stallings, William, Goutam Kumar Paul, and Moumita Mitra Manna. Operating systems: internals and design principles. Vol. 3. Upper Saddle River, NJ: Prentice Hall, 1998.
[188] Cao, Trang Minh, Boris Bellata, and Miquel Oliver. ”Design of a generic management system for wireless sensor networks.” Ad Hoc Networks 20 (2014): 16-35.
[189] Hu, Siquan, Yanchao Yu, and Lun Xie. ”Comparing Power Management Strategies of Android and TinyOS.” In Circuits, Communications and System (PACCS), 2011 Third Paciﬁc-Asia Conference on, pp. 1-4. IEEE, 2011.
[190] Peterson, Nina, Lohith Anusuya-Rangappa, Behrooz A. Shirazi, Renjie Huang, Wen-Zhan Song, Michael Miceli, Devin McBride, Ali Hurson, and Richard LaHusen. ”Tinyos-based quality of service management in wireless sensor networks.” In System Sciences, 2009. HICSS’09. 42nd Hawaii International Conference on, pp. 1-10. IEEE, 2009.
[191] Bhunia, Suman Sankar, Soumen Kumar Das, Sarbani Roy, and Nandini Mukherjee. ”Mobility management in IP based Wireless Sensor Network using TinyOS.” In Sensing Technology (ICST), 2012 Sixth International Conference on, pp. 759-764. IEEE, 2012.
[192] Guevara, J., E. Vargas, F. Brunetti, F. Barrero, and L. Aranda. ”A Framework for WSN using TinyOS and the IEEE1451 standard.” In Communications (LATINCOM), 2011 IEEE Latin-American Conference on, pp. 1-5. IEEE, 2011.
[193] Roosta, Tanya, Shiuhpyng Shieh, and Shankar Sastry. ”Taxonomy of security attacks in sensor networks and countermeasures.” In The ﬁrst IEEE international conference on system integration and reliability improvements, vol. 25, p. 94. 2006.
[194] Karlof, Chris, and David Wagner. ”Secure routing in wireless sensor networks: Attacks and countermeasures.” Ad hoc networks 1, no. 2 (2003): 293-315.
[195] Raymond, David R., and Scott F. Midkiff. ”Denial-of-service in wireless sensor networks: Attacks and defenses.” Pervasive Computing, IEEE 7, no. 1 (2008): 74-81.
[196] Zhu, Xiaoliang, and Yunfang Chen. ”Research of wireless injection attacks based on TinyOS.” In Consumer Electronics, Communications and Networks (CECNet), 2013 3rd International Conference on, pp. 525528. IEEE, 2013.
[197] Hart, Jane K., and Kirk Martinez. ”Environmental Sensor Networks: A revolution in the earth system science?.” Earth-Science Reviews 78, no. 3 (2006): 177-191.
[198] Jang, Won-Suk, William M. Healy, and Miroslaw J. Skibniewski. ”Wireless sensor networks as part of a web-based building environmental monitoring system.” Automation in Construction 17, no. 6 (2008): 729736.
[199] Simic, Slobodan N., and Shankar Sastry. ”Distributed environmental monitoring using random sensor networks.” In Information Processing in Sensor Networks, pp. 582-592. Springer Berlin Heidelberg, 2003.
[200] Gao, Rui, Hong Zhou, and Gang Su. ”A wireless sensor network environment monitoring system based on TinyOS.” In Electronics and

Optoelectronics (ICEOE), 2011 International Conference on, vol. 1, pp. V1-497. IEEE, 2011. [201] Delamo, Manuel, Santiago Felici-Castell, Juan J. Prez-Solano, and Andrew Foster. ”Designing an open source maintenance-free Environmental Monitoring Application for Wireless Sensor Networks.” Journal of Systems and Software 103 (2015): 238-247. [202] Patnode, David, Joseph Dunne, Aleksander Malinowski, and Donald Schertz. ”WISENET-TinyOS based wireless network of sensors.” In Industrial Electronics Society, 2003. IECON’03. The 29th Annual Conference of the IEEE, vol. 3, pp. 2363-2368. IEEE, 2003. [203] Bin, Cai, Jin Xinchao, Yan Shaomin, Yang Jianxu, Zhao Xibin, and Zou Guowei. ”Application research on temperature WSN nodes in switchgear assemblies based on TinyOS and ZigBee.” In Electric Utility Deregulation and Restructuring and Power Technologies (DRPT), 2011 4th International Conference on, pp. 535-538. IEEE, 2011. [204] Wang, Ning, Naiqian Zhang, and Maohua Wang. ”Wireless sensors in agriculture and food industryRecent development and future perspective.” Computers and electronics in agriculture 50, no. 1 (2006): 1-14. [205] Wark, Tim, Peter Corke, Pavan Sikka, Lasse Klingbeil, Ying Guo, Chris Crossman, Philip Valencia, Dave Swain, and Greg Bishop-Hurley. ”Transforming agriculture through pervasive wireless sensor networks.” Pervasive Computing, IEEE 6, no. 2 (2007): 50-57. [206] Pierce, F. J., and T. V. Elliott. ”Regional and on-farm wireless sensor networks for agricultural systems in Eastern Washington.” Computers and electronics in agriculture 61, no. 1 (2008): 32-43. [207] Montoya, Francisco G., Julio Gmez, Alejandro Cama, Antonio ZapataSierra, Felipe Martnez, Jos Luis De La Cruz, and Francisco ManzanoAgugliaro. ”A monitoring system for intensive agriculture based on mesh networks and the android system.” Computers and Electronics in Agriculture 99 (2013): 14-20. [208] YeJihua, WANG Wen.”Research and Design of Solar Photovoltaic Power Generation Monitoring System Based on TinyOS”.In The 9th International Conference on Computer Science and Education (ICCSE 2014) August 22-24, 2014. [209] Peng Jishen, Li Wenshuai, Li QiiuXiang, Research and Design of Solar Photovoltatic Power Generation Wireless Remote Monitoring System[J].Computer Measurement and Control ,2012 ,20 (12). [210] Mainwaring, Alan, David Culler, Joseph Polastre, Robert Szewczyk, and John Anderson. ”Wireless sensor networks for habitat monitoring.” In Proceedings of the 1st ACM international workshop on Wireless sensor networks and applications, pp. 88-97. ACM, 2002. [211] Szewczyk, Robert, Eric Osterweil, Joseph Polastre, Michael Hamilton, Alan Mainwaring, and Deborah Estrin. ”Habitat monitoring with sensor networks.” Communications of the ACM 47, no. 6 (2004): 34-40. [212] Tarifa, Jos Antonio, Juan Manuel Escano, Miguel Angel Molina, and Carlos Bordons. ”Local measurement of harmonics through a sensor network based on TinyOS.” In SICE Annual Conference (SICE), 2012 Proceedings of, pp. 1029-1034. IEEE, 2012. [213] Schmitt, Corinna, Thomas Kothmayr, Benjamin Ertl, Wen Hu, Lothar Braun, and Georg Carle. ”TinyIPFIX: An efﬁcient application protocol for data exchange in cyber physical systems.” Computer Communications (2014). [214] Chen, Lu, Rui Yan, and Zhixian Ma. ”TinyOS-based localization system design using accelerometer.” In Communication Technology (ICCT), 2013 15th IEEE International Conference on, pp. 511-518. IEEE, 2013. [215] Monmasson, Eric, and Marcian N. Cirstea. ”FPGA design methodology for industrial control systemsA review.” Industrial Electronics, IEEE Transactions on 54, no. 4 (2007): 1824-1842. [216] Stelte, Bjrn. ”Toward development of high secure sensor network nodes using an fpga-based architecture.” In Proceedings of the 6th International Wireless Communications and Mobile Computing Conference, pp. 539543. ACM, 2010. [217] That, Dai-Hai Ton, Anh-Vu Dinh-Duc, and Khoi Phan-Dinh. ”Implementation of TinyOS on FPGA system.” In TENCON 2010-2010 IEEE Region 10 Conference, pp. 1456-1459. IEEE, 2010. [218] Park, Ieryung, Hosoon Shin, Jihan Park, Eungu Jung, and Dongsoo Har. ”Improvement of TINYOS Implementation for Small Memory FPGA System.” In XIII-IBERCHIP Workshop, IWS. 2007. [219] Rezgui, Abdelmounaam, and Mohamed Eltoweissy. ”Service-oriented sensoractuator networks: Promises, challenges, and the road ahead.” Computer Communications 30, no. 13 (2007): 2627-2648. [220] Ramachandran, Gowri Sankar, Sam Michiels, Wouter Joosen, Danny Hughes, and Barry Porter. ”Analysis of sensor network operating system

1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

This article has been accepted for publication in a future issue of this journal, but has not been fully edited. Content may change prior to final publication. Citation information: DOI 10.1109/JSEN.2016.2519924, IEEE Sensors Journal
performance throughout the software life cycle.” In Network Computing and Applications (NCA), 2013 12th IEEE International Symposium on, pp. 211-218. IEEE, 2013. [221] Levis, Philip. ”TinyOS 2.0 Overview.” (2006). [222] Alizai, Muhammad Hamad, Hanno Wirtz, Bernhard Kirchen, and Klaus Wehrle. ”Portable wireless-networking protocol evaluation.” Journal of Network and Computer Applications 36, no. 4 (2013): 1230-1242. [223] Alizai, Muhammad Hamad, Hanno Wirtz, Bernhard Kirchen, Tobias Vaegs, Omprakash Gnawali, and Klaus Wehrle. ”TinyWiﬁ: Making network protocol evaluation portable across multiple phy-link layers.” In Proceedings of the 6th ACM international workshop on Wireless network testbeds, experimental evaluation and characterization, pp. 1926. ACM, 2011. [224] Alizai, Muhammad Hamad, Bernhard Kirchen, J gila Bitsch Link, Hanno Wirtz, and Klaus Wehrle. ”TinyOS meets wireless mesh networks.” In Proceedings of the 8th ACM Conference on Embedded Networked Sensor Systems, pp. 429-430. ACM, 2010. [225] Duffy, Cormac, Utz Roedig, John Herbert, and Cormac J. Sreenan. ”Technical Report CS-2006-27-11: A Performance Analysis of MANTIS and TinyOS.” [226] Jeong, Jaein, and David Culler. ”Incremental network programming for wireless sensors.” In Sensor and Ad Hoc Communications and Networks, 2004. IEEE SECON 2004. 2004 First Annual IEEE Communications Society Conference on, pp. 25-33. IEEE, 2004. [227] C. Lynch, F.OReilly. PIC-based Tiny OS Implementation. In proc. 2nd European Workshop on Sensor Networks, Istanbul, Feb 2005, pp 378385. [228] Dunkels A, Alonso J, Voigt T. Making TCP/IP viable for wireless sensor networks. Work-in-Progress Session of the First European Workshop on Wireless Sensor Networks (EWSN 2004), Berlin, Germany, 2004. [229] Dunkels A. Full TCP/IP for 8 bit architectures. Proceedings of the First ACM/Usenix International Conference on Mobile Systems, Applications and Services (MobiSys 2003), San Francisco, CA, 2003. [230] Dunkels A, Voigt T, Bergman N, Jonsson M. The design and implementation of an IP-based sensor network for intrusion monitoring. Swedish National Computer Networking Workshop, Karlstad, Sweden, 2004. [231] Sa Silva J, Ruivo R, Camilo T, Pereira G, Boavida F. IP in wireless sensor networks issues and lessons learnt. Third International Conference on Communication Systems Software and Middleware Workshops (COMSWARE 2008), Banglore, India, January 2008; 496502. [232] Montenegro G, Kushalnagar N, Hui J, Culler D. Transmission of IPv6 Packets over IEEE 802.15.4 Networks. Internet Engineering Task Force, Request for Comments 4944, September 2007.
1530-437X (c) 2015 IEEE. Personal use is permitted, but republication/redistribution requires IEEE permission. See http://www.ieee.org/publications_standards/publications/rights/index.html for more information.

