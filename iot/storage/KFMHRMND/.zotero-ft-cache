Low-cost LoRa IoT device:! a step-by-step tutorial! ! !
RESSACS’2016! IRD, Bondy!
!
May 10 th, 2016!
Prof. Congduc Pham!
http://www.univ-pau.fr/~cpham!
Université de Pau, France!
!

Prepare the board!
You either have an Arduino UNO or an Arduino MEGA2650
2	


SS GND

Now the radio module:! modtronix inAir9!
Connect the SPI pins (MOSI, MISO,SCLK) with F/F wires and the SS pin with a F/M wire. Try to use different colors. I use the following colors: MOSI (blue), MISO (green), SS (white), SCLK (orange). Then connect also the radio VCC (red) with a F/M wire and the radio GND (black or any other dark color) also with a F/M wire.
3	


MOSI MISO SCLK VCC

Serial Peripheral Interface (SPI)!
4	


Connecting the radio module!
Now, just connect the corresponding SPI pins of the radio module to the SPI pins on the board which are on the ICSP header. SS goes to digital 2. Then connect also the VCC (red) and the GND (black) of the radio board to the 3.3v and the GND of the board. The 3.3v pin of the board gets 3.3v from the on-board voltage regulator.
5	


Getting, compiling & uploading the software!
6	


Getting the software: ! a simple sender!
Fisrt, you will need the Arduino IDE 1.6.6 or later (left). Then get the LoRa library from our github: https://github.com/CongducPham/LowCostLoRaGw (right). Get into the Arduino folder and get both Arduino_LoRa_Gateway and SX1272 folders. Copy Arduino_LoRa_Gateway into your “sketch” folder and SX1272 into “sketch/libraries”
7	


Make it a sender!
Uncomment the statement #define IS_SEND_GATEWAY
8	


Compiling!
Open the Arduino_LoRa_Gateway sketch and select the Arduino UNO or MEGA 2560 depending on the board you have Then, click on the « verify » button
9	


Uploading!
Connect the USB end to your computer and the USB port should be detected in the Arduino IDE. Select the serial port for your device. It may have another name than what is shown in the example. Then click on the « upload » button
10	


Serial monitor!
You can see the output from the sensor if it is connected to your computer. Use the Arduino IDE « serial monitor » to get such output, just to verify that the sensor is running fine, or to debug new code. Be sure to use 38400 baud.
11	


Use the interactive sender!

q Interactive end-device
Hello world!

Command

Action

/@M1#

0set0LoRa0mode01

/@C12#

0use0channel012

/@PL/H/M/x/X# 0set0power0to0Low,0High,0Max,0extreme0(PA_BOOST),0eXtreme0(+20dBm)

/@A9#

0set0node0addr0to09

/@ACK#hello0w/ack0s0 ends0"hello0w/ack"0and0request0an0ACK

/@ACKON#

0enables0ACK0(for0all0messages)

/@ACKOFF#

0disables0ACK

/@CAD#

0performs0an0SIFS0CAD,0i.e.030or060CAD0depending0on0the0LoRa0mode

/@CADON3# 0uses030CAD0when0sending0data0(normally0SIFS0is030or060CAD,0DIFS=3SIFS)

/@CADOFF#

0disables0CAD0(IFS)0when0sending0data

/@RSSI#

0toggles0checking0of0RSSI0before0transmission0and0after0CAD

/@EIFS#

0toggles0for0extended0IFS0wait

/@T5000#

0send0a0message0at0regular0time0interval0of05000ms.0Use0/@T0#0to0disable0periodic0sending

/@TR5000#

0send0a0message0at0random0time0interval0between0[2000,05000]ms.

/@Z200#

0sets0the0packet0payload0size0to02000for0periodic0sending

/@S50#

0sends0a050B0user0payload0packet0filled0with0'#'.0The0real0size0is055B0with0the0protocol0header

/@D56#

0set0the0destination0node0to0be056,0this0is0permanent,0until0the0next0D0command

/@D56#hello 0send0"hello"0to0node056,0destination0addr0is0only0for0this0message

/@D1#/@M1# 0send0the0command0string0"/@M1#"0to0node010(i.e.0gateway)

Enter hello world and press ENTER

/@ACK#hello
You can get SNR of both uplink and downlink
12	


Getting the software: a temperature sensor!
Fisrt, you will need the Arduino IDE 1.6.6 or later (left). Then get the LoRa library from our github: https://github.com/CongducPham/LowCostLoRaGw (right). Get into the Arduino folder and get Arduino_LoRa_Simple_temp. Copy Arduino_LoRa_Simple_temp into your “sketch” folder. Compile then Upload as previously.
13	


Compiling!
Open the Arduino_LoRa_Simple_temp sketch and select the Arduino UNO or MEGA 2560 depending on the board you have Then, click on the « verify » button
14	


More platforms are supported!!

Ideetron Nexus

Teensy3.1/3.2

LoRa radios that our library already supports

HopeRF RFM92W/95W Libelium LoRa

Modtronix inAir9/9B

NiceRF LoRa1276

Long-Range communication library (mostly sending functions)
15	


LoRa radios that our library already supports

HopeRF RFM92W/95W Libelium LoRa

Modtronix inAir9/9B

NiceRF LoRa1276

Arduino Uno

Arduino MEGA2560

Arduino Due w/Libelium Multiprotocol shield

Arduino Nano
Ideetron Nexus RFM95W

Arduino Pro Mini Teensy3.2

Arduino Due
16	


Sending to a gateway!

17	


Default configuration!
\!#4#18.5
The default configuration in the Arduino_LoRa_Simple_temp example is: Send packets to the gateway (one or many if in range) LoRa mode 1 Node short address is 8
18	


Gateway to cloud!
Data received at the gateway will be pushed to IoT clouds. We provide python script examples for many IoT cloud platforms. Most of clouds with REST API can be easily integrated. In this example, data will be pushed to the ThingSpeak cloud on field index 4.
19	


Use your own cloud!
Go to https://thingspeak.com/ Create your own ThingSpeak account (Sign Up) And create a new channel, called it ressac2016_lora_test for instance
20	


Get the API key of your channel!
The write key is the key that will allow you to write data to your ThingSpeak channel
21	


Change the sensor to send to your channel!
Get your ThnigSpeak channel’s API write key: i.e. SGSH52UGPVAUYG3S Change "\\!#%d#TC/%s » into "\\!SGSH52UGPVAUYG3S#%d#TC/%s" Compile and upload.
22	


Using the interactive sender!
Assume your API write key is SGSH52UGPVAUYG3S Enter \!SGSH52UGPVAUYG3S#1#TC/20.5 Try field value from 1 to 8. Try other value: i.e. 31.5
23	


