Contiki: sensors and
actuators
Antonio Li√±√°n Colina

‚Ä¢ Architectures: 8-bit, 16-bit, 32-bit ‚Ä¢ Open Source (source code openly
available) ‚Ä¢ IPv4/IPv6/Rime networking ‚Ä¢ Devices with < 8KB RAM ‚Ä¢ Typical applications < 50KB Flash ‚Ä¢ Vendor and platform independent ‚Ä¢ C language ‚Ä¢ Developed and contributed by Universities,
Research centers and industry contributors ‚Ä¢ +10 years development

Zolertia RE-Mote

Zolertia RE-Mote (Zoul inside)
‚Ä¢ ARM Cortex-M3, 32MHz, 32KB RAM, 512KB FLASH
‚Ä¢ Double Radio: ISM 2.4GHz & 863-925MHz, IEEE 802.15.4-2006/e/g
‚Ä¢ Hardware encryption engine and acceleration
‚Ä¢ USB programing ready ‚Ä¢ Real-Time Clock and Calendar ‚Ä¢ Micro SD slot and RGB colors ‚Ä¢ Shutdown mode down to 150nA ‚Ä¢ USB 2.0 port for applications ‚Ä¢ Built-in LiPo battery charger to work with
energy harvesting and solar panels ‚Ä¢ On-board RF switch to use both radios over
the same RP-SMA connector ‚Ä¢ Pads to use an external 2.4GHz over U.Fl
connector, o solder a chip antenna

01-basics
examples/zolertia/tutorial/01-basics

Sensors
A sensor is a transducer whose purpose is to sense or detect a characteristic of its environment, providing a corresponding output, generally as an electrical or optical signal, related to the quantity of the measured variable.
examples/zolertia/tutorial/01-basics

examples/zolertia/tutorial/01-basics

Analogue sensors
Analogue sensors typically require being connected to an ADC (Analogue to Digital Converter) to translate the analogue (continuous) reading to an equivalent digital value in millivolts.
examples/zolertia/tutorial/01-basics

https://www.renesas.com/en-us.html

examples/zolertia/tutorial/01-basics

The quality and resolution of the measure depends on both the ADC resolution (10-12 bits in the Z1 and RE-Mote) and the sampling frequency. As a rule of thumb, the sampling frequency must be at least twice that of the phenomenon you are measuring. i.e human speech (which may contain frequencies up to 8 kHz), sample at 16 kHz.
examples/zolertia/tutorial/01-basics

The ADC provides a count value (the analogue sensor quantized value). Depending on the sensor we may want to use the count value, or its equivalent voltage value.

Ì†µÌ∞¥Ì†µÌ∞∑Ì†µÌ∞∂ √ó Ì†µÌ±âÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ì Ì†µÌ∞¥Ì†µÌ∞∑Ì†µÌ∞∂ √ó 3000 Ì†µÌ±öÌ†µÌ±â Ì†µÌ∞¥Ì†µÌ∞∑Ì†µÌ∞∂ Ì†µÌ±• 3000 Ì†µÌ±öÌ†µÌ±â

Ì†µÌ±âÌ†µÌ±ñÌ†µÌ±õ = Ì†µÌ∞¥Ì†µÌ∞∑Ì†µÌ∞∂Ì†µÌ±üÌ†µÌ±íÌ†µÌ±† = (1 ‚â™ 12) =

4096

The higher the resolution, higher the sampling time and the size of the value.
The accuracy and required resolution helps to choose the number of required bits to quantized

examples/zolertia/tutorial/01-basics

Normally the conversion formula (to obtain the actual measuring units, i.e lux or celsius from the voltage value) are provided by the sensor manufacturer. In other cases, it is required to obtain by measuring and correlating with another calibrated source. Depending on the accuracy on the sensor, we would either use actual units (i.e 1024 lux), or just characterize thresholds (i.e dark, bright). For the later, using a cheap sensor might be enough for the application requirements.
examples/zolertia/tutorial/01-basics

examples/zolertia/tutorial/01-basics

Digital sensors
A digital sensor is an electronic or electrochemical sensor, where data conversion and transmission are done digitally. Digital sensors are normally interfaced over a digital communication protocol such as I2C, SPI, 1-Wire, Serial or depending on the manufacturer, a proprietary protocol normally on a ticking clock.
examples/zolertia/tutorial/01-basics

http://www.pctestinstruments.com/

examples/zolertia/tutorial/01-basics

The default configuration matches the I2C, but it can be reconfigured as SPI, even UART. Pins in the ARM Cortex-M3 CC2538 can be multiplexed to different controllers
examples/zolertia/tutorial/01-basics

Digital sensors allow a more extended set of commands (turn on, turn off, configure interrupts, resolution, etc). With a digital light sensor for example, you could set a threshold value and let the sensor send an interrupt when reached, without the need for continuous polling. Remember to check the specific sensor information and data sheet for more information.
examples/zolertia/tutorial/01-basics

Sensors in Contiki
Contiki defines a common API to implement and use both sensors and actuators. Normally platform-specific sensor implementations are located in the platform‚Äôs /dev folder. Contiki has ADC, I2C, SPI and UART libraries, normally sensor and actuators implementations use these, so the porting effort is greatly minimized.
examples/zolertia/tutorial/01-basics

Macro to define a sensor Sensor structure and API

core/lib/sensors.h

Default sensors constants and macros platforms/zoul/dev/zoul-sensors.c

General structure to link the defined sensors SENSORS structure expanded
platforms/zoul/dev/zoul-sensors.c

General structure to link the defined sensors How to use the adc_zoul API:
examples/zolertia/tutorial/01-basics/06-adc.c

General structure to link the defined sensors
You can enable one or more sensors at the same time. Pins in the PORT A (PA) are used as ADC. The ADC can be configured using mask values
examples/zolertia/tutorial/01-basics/06-adc.c

General structure to link the defined sensors
The returned value is in milliVolts with one extra precision digit, no need to convert from ADC raw count to voltage
examples/zolertia/tutorial/01-basics/06-adc.c

platforms/zoul/remote/board.h

platforms/zoul/dev/adc-zoul.c

Note 3V and 5V analogue sensors can be connected, even if the RE-Mote works at 3V. The ADC3 channel has a voltage divider

Ì†µÌ±âÌ†µÌ±éÌ†µÌ±ëÌ†µÌ±ê3(5Ì†µÌ±â)

=

Ì†µÌ±âÌ†µÌ±éÌ†µÌ±ëÌ†µÌ±ê3(3Ì†µÌ±â) 3

‚àó5

platforms/zoul/dev/adc-zoul.c

Connect an analogue sensor to the ADC1 connector (3V), and compile and program the 06-adc example:
make 06-adc.upload && make login

http://zolertia.io/product/sensors/analog-light-sensor http://www.seeedstudio.com/wiki/Grove_-_Light_Sensor

examples/zolertia/tutorial/01-basics/06-adc.c

The light sensor is covered Voltage: 0.0064-0.021V, in dark environments the sensor resistance is up to 1M‚Ñ¶, so the voltaje will decrease as shown

examples/zolertia/tutorial/01-basics/06-adc.c

Light sensor with no cover. Voltage: 2.10-2.08V, in light environments the resistance of the sensor decreases (20K‚Ñ¶ and lower), so the voltage will be higher as shown

examples/zolertia/tutorial/01-basics/06-adc.c

As we have voltage values we need the actual ADC count, for the 0.21V (dark):

ADC=

Ì†µÌ±âÌ†µÌ±ñÌ†µÌ±õ√óÌ†µÌ∞¥Ì†µÌ∞∑Ì†µÌ∞∂Ì†µÌ±üÌ†µÌ±íÌ†µÌ±† Ì†µÌ±âÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ì

=

21Ì†µÌ±öÌ†µÌ±â√ó4096 3000Ì†µÌ±öÌ†µÌ±â

=

28.672

Then use the above formula to get the sensor resistance (in K‚Ñ¶), note we use 4095 as we use a 12-bits ADC):

4095 ‚àí 28.672 √ó 10

Ì†µÌ±ÖÌ†µÌ±†Ì†µÌ±íÌ†µÌ±õÌ†µÌ±†Ì†µÌ±úÌ†µÌ±ü =

28.672

= 1418,22Ì†µÌ∞æŒ©

examples/zolertia/tutorial/01-basics/06-adc.c

An approximated formula using the curves in the LDR datasheet:
Light = 63 √ó Ì†µÌ±ÖÌ†µÌ±†Ì†µÌ±íÌ†µÌ±õÌ†µÌ±†Ì†µÌ±úÌ†µÌ±ü‚àí0.7 = 63 √ó 1418,22‚àí0.7 = 0,39 Ì†µÌ±ôÌ†µÌ±¢Ì†µÌ±•

https://forum.arduino.cc/index.php?topic=331679.0

examples/zolertia/tutorial/01-basics/06-adc.c

An approximated formula using the curves in the LDR datasheet: Light = 63 √ó Ì†µÌ±ÖÌ†µÌ±†Ì†µÌ±íÌ†µÌ±õÌ†µÌ±†Ì†µÌ±úÌ†µÌ±ü‚àí0.7 = 63 √ó 1418,22‚àí0.7 = 0,39 Ì†µÌ±ôÌ†µÌ±¢Ì†µÌ±•
What is the lux value of the light environment (the one proportional to 2.10V) in previous slides? What would be the maximum lux value?

https://forum.arduino.cc/index.php?topic=331679.0

examples/zolertia/tutorial/01-basics/06-adc.c

Light (lux) value for the previous example

ADC=

Ì†µÌ±âÌ†µÌ±ñÌ†µÌ±õ√óÌ†µÌ∞¥Ì†µÌ∞∑Ì†µÌ∞∂Ì†µÌ±üÌ†µÌ±íÌ†µÌ±† Ì†µÌ±âÌ†µÌ±üÌ†µÌ±íÌ†µÌ±ì

=

2100Ì†µÌ±öÌ†µÌ±â√ó4096 3000Ì†µÌ±öÌ†µÌ±â

=

2867.2

4095 ‚àí 2867,2 √ó 10

Ì†µÌ±ÖÌ†µÌ±†Ì†µÌ±íÌ†µÌ±õÌ†µÌ±†Ì†µÌ±úÌ†µÌ±ü =

2867,2

= 4,28Ì†µÌ∞æŒ©

Light (lux)= 63 √ó Ì†µÌ±ÖÌ†µÌ±†Ì†µÌ±íÌ†µÌ±õÌ†µÌ±†Ì†µÌ±úÌ†µÌ±ü‚àí0.7 = 63 √ó 4,28‚àí0.7 = 22,76 Ì†µÌ±ôÌ†µÌ±¢Ì†µÌ±•

Maximum lux value

10 Ì†µÌ±ÖÌ†µÌ±†Ì†µÌ±íÌ†µÌ±õÌ†µÌ±†Ì†µÌ±úÌ†µÌ±ü = 3000 = 0,003Ì†µÌ∞æŒ© Light (lux)= 63 √ó Ì†µÌ±ÖÌ†µÌ±†Ì†µÌ±íÌ†µÌ±õÌ†µÌ±†Ì†µÌ±úÌ†µÌ±ü‚àí0.7 = 63 √ó 0,003‚àí0.7 = 3675,83 Ì†µÌ±ôÌ†µÌ±¢Ì†µÌ±•

http://www.globalspec.com/

examples/zolertia/tutorial/01-basics/06-adc.c

Exponential and logarithms are processing-expensive operations.
Instead of calculating the lux values, one could use the correlated voltage or ADC count value in the application (to trigger an alarm if the room is dark), or send over the radio the ADC count and let the remote server/application to do the math

The RE-Mote has two on-board sensors: voltage level and core temperature: examples/zolertia/tutorial/01-basics/05-onboard-sensors.c

External digital sensors can be connected to the RE-Mote
https://www.sensirion.com/products/humidity-sensors/humidity-temperature-sensor-sht2x-digital-i2c-accurate/
examples/zolertia/zoul/testsht25.c

SHT21 temperature and humidity sensor (digital, I2C)
https://www.sensirion.com/products/humidity-sensors/humidity-temperature-sensor-sht2x-digital-i2c-accurate/
platforms/zoul/dev/sht25.c

Add the sensor‚Äôs library to the application‚Äôs Makefile examples/zolertia/zoul/Makefile

examples/zolertia/zoul/test-sht25.c

When enabling the sensor, the I2C is initialized and the sensor configuration loaded
platforms/zoul/dev/sht25.c

The soft reset command will restart the sensor in case of failure
The resolution can be configured for both the temperature and humidity sensors
platforms/zoul/dev/sht25.c

The I2C API is used to read and write to the sensor‚Äôs registers

The sensor‚Äôs values are converted into readable units: Celsius and Relative Humidity, with 2 precision digits

platforms/zoul/dev/sht25.c

Actuators
An actuator is a device that allow us to interact with the physical world, and change the state of a given variable. A light switch turns a light bulb on and off, an electrovalve can control the flow of water, an electronic lock can open or shut a door
examples/zolertia/tutorial/01-basics

General Input/Output Pins (GPIO)
The General input/output pins are generic pins used either as input or output (0-3.3V), useful in case you need to actuate on something, or read the digital voltage level as high/low (3.3V or 0V). Normally the electrovalves, relays, switchs are bi-state, so a GPIO pin can be used to control. The LEDs are driven by GPIOs configured as output, changing its value from high/low turns the LEDs on/off (depending if used a pull-up or pulldown resistors). The user button previously shown is a GPIO configured as input, when pressed its value changed, and its status is read by the MCU.
examples/zolertia/tutorial/01-basics

examples/zolertia/tutorial/01-basics

Each PORT has 8 PINs, numbered from 0-7 PA5 then is the PIN number 6 in PORT A
examples/zolertia/tutorial/01-basics

examples/zolertia/tutorial/01-basics

GPIOs in a PORT can be accessed via masks, as each PORT has 8 pins, it is similar to an 8-bit variable

In binary

: 00010100

In hexadecimal : 0x14

In decimal

: 20

If this were the pins in PORT B, it would mean PA2 and PA4 can be configured in a single operation

examples/zolertia/tutorial/01-basics

PIN 3 mask value would be (1 << 3), the equivalent to 8 examples/zolertia/tutorial/01-basics

examples/zolertia/tutorial/01-basics/07-gpio.c

Change the value of the PIN in the example, and toggle the LED3 (see in the previous slides which PORT/PIN values corresponds to it) If available, use a multimeter to measure the voltage values in the pins when high and low. If available, connect a relay and try to turn on and off a lamp
examples/zolertia/tutorial/01-basics/07-gpio.c

Conclusions
You should be able to:
‚Ä¢ Understand how analogue sensors and ADC works ‚Ä¢ Implement an analogue sensor, convert ADC count to voltaje
values, and convert to actual unit values ‚Ä¢ Measure the core temperature and voltaje of the RE-Mote
platform ‚Ä¢ Understand Contiki‚Äôs sensor‚Äôs API ‚Ä¢ Understand how digital sensor works ‚Ä¢ Use the grove‚Äôs analogue light sensor (P), and SHT21 digital
temperature and humidity sensor ‚Ä¢ Understand how GPIO works and the pin distribution on the RE-
Mote platform ‚Ä¢ Implement an actuator using GPIOs

Antonio Li√±√°n Colina
alinan@zolertia.com antonio.lignan@gmail.com
Twitter: @4Li6NaN LinkedIn: Antonio Li√±an Colina github.com/alignan hackster.io/alinan

