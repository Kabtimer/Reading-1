Lab 3
Rafik Zitouni ECE Paris rafik.zitouni@ece.fr

6LowPAN
Main proprieties of 6LowPan
- The maximum size available for transmitting IP packets over an IEEE 802.15.4 frame is 81 bytes
- The minimum MTU (Maximum Transmission Unit) that link layer should offer to IPv6 layer is 1280 bytes
- Mesh Routing Protocol [RFC 6550]: RPL (Routing protocol for Low Power and Lossy Networks)
- IEEE 802.15.4 defines four types of frames:
- Beacon frames - MAC command frames - Acknowledgement frames - Data frames

6LowPAN
The edge router (6 LowPAN Border Router – 6LBR)

6LowPAN
Installing router border
In Contiki :
- The border router implement serial based interface SLIP (see $tools/tunslip6) - Over serial port, contiki creates tunneled network interface - The border-router applications includes a built-in web server - Example of application is located at examples/ipv6/rpl-border-router

6LowPAN
UIP/IPv6 and RPL
Open source TCP/IP stack for 8 and 16 bits micro controllers. To enable IPv6 in contiki, you should change project-conf.h by adding: #define UIP_CONF_IPV6 1 Activate RPL routing protocol #define UIP_CONF_IPV6_RPL 1
/*Routing*/ #define UIP_CONF_ND6_SEND_RA 0 #define UIP_CONF_IP_FORWARD 0 #define RPL_CONF_STATS 0

6LowPAN
Application: rpl-border-router The border router is set as the root of the DAG after which it sets the prefix of the rest of the nodes in the network. To understand the exemple in examples/ipv6/rpl-border-router, open your program border-router.c
Border Router BR

6LowPAN
The edge router (6 LowPAN Border Router – 6LBR)
See the example in examples/ipv6/rpl-border-router $ sudo make border-router.upload && make connect-router
If you want to change to change the IP address of your router : $ make connect-router PREFIX=2001:abcd:dead:beef::1/64

6LowPAN
The edge router (6 LowPAN Border Router – 6LBR)
The address of your 6LBR is : fd00::212:4b00:60d:61f4
You can check if your router can be pinged by your host: $ ping6 fd00::212:4b00:60d:61f4
In contiki, 6LBR plays a web server. You can check if your router has neighbors with following URL : http://[fd00::212:4b00:60d:61f4]

CoAP API – Tutorial and Exercise
CoAP application:
➢For this example you need 2 motes: 1) Border Router Mote 2) CoAP server Mote
➢Copper is an Internet of Things browser on the CoAP. It allows a designer to debug existing CoAP devices. It is available on Mozilla Firefox navigator. Get the Copper (Cu) CoAP user-agent or client https://addons.mozilla.org/en-US/firefox/addon/copper-270430/ The mandatory CoAP port is 5683

CoAP API – Tutorial and Exercise

CoAP application:

Before compiling the project, check project-conf.h if you have the following code:

#undef NETSTACK_CONF_RDC

#define NETSTACK_CONF_RDC nullrdc_driver

It allows motes to manage efficiently

CoAP Server Mote

dutty cycles and battery usage

Save your TARGET and compile the server application

$ cd examples/er-rest-example/ $ sudo make savetarget TARGET=zoul $ sudo make er-example-server.upload && sudo make login
Exercise 1: 1) What is the result of the previous commands? 2) Do your server has an IPv6 address ? Give this address ? 3) Open the source code of the application and give the sub program which set this IP
address.

CoAP API – Tutorial and Exercise
Border Router Mote Save your TARGET and compile the server application
$ cd examples/ipv6/rpl-border-router/ $ sudo make savetarget TARGET=zoul $ sudo make border-router.upload && sudo make connect-router
Leave the window opened and you will get something like:

CoAP API – Tutorial and Exercise
CoAP application:
➢ From a terminal, you should be able to ping your border-router and you CoAP server using ping6. ➢On your Mozilla Firefox Navigator you use your server address coap://[fd00::0212:4b00:060d:b3ef]:5683 ➢Discover your available resources using Discover button
➢Choose your resource such as toggle and use POST, you can see how the red LED of the server mote will toggle. ➢You should get hello resources by POST and GET ➢If you enable the other resources in your server source code, you should have sensors. You should select button, and use observe to catch each push button. ➢Try to understand how to work your CoAP server..

CoAP API – Tutorial and Exercise
CoAP application:

CoAP API – Tutorial and Exercise
Exercise 2: Include in your COAP server a light sensor as resource. Your application should be able to GET the values of light sensor and print it through COAP client.

CoAP API – Tutorial and Exercise
Representational State Transfer (REST) ➢ It relies on a stateless, client-server, cacheable communications protocol ➢ RESTful applications use HTTP-like requests to post data, read data,
and delete data ➢ REST uses HTTP for CRUD (Create/Read/Update/Delete) actions ➢ CoAP software layer translate to \\:http for simplified integration of WSN
data with the web. ➢ CoAP can run on most devices that support UDP.

CoAP API – Tutorial and Exercise
Organization of the CoAP API on Contiki
apps/er-coap → The location of CoAP.
apps/rest-engine →The location of Erbium REST engine
er-coap-engine.c → Implementation of CoAP-18 version
To invoke the CoAP engine we use REST.get_query_variable();
Web services are viewed as ressources, and can be uniquely identified by their URLs. The basic REST design uses HTTP or CoAP protocol methods for CRUD operations.
POST: Create a resource GET: Retrieve a ressource PUT: Update a ressource DELETE: Delete a resource

CoAP API – Tutorial and Exercise
Server: The server offers a number of ressources -The REST is an intermediate layer between client requests and server -The REST answer by the response back containing the ressource requested
apps/rest-engine contains a corresponding macros.
Normal ressource : It is a static function that is associated with a ressource handler. It is defined in rest-engine.h

CoAP API – Tutorial and Exercise
Server: Parent ressource : It manages several sub-ressourcesis defined in URI path.
If server is not able to respond to a CON request, it simply responds with an empty ACK and client stop re-transmitting the request. After a period of time when the server is ready with a response, it send CON message.

CoAP API – Tutorial and Exercise
Server: Periodic ressource : It allows server to poll a sensor and publish a changed values to subscribed clients.
Event ressource : It is simiar to a periodic ressource, but the second handler is called by a non periodic event such as press button.

CoAP API – Tutorial and Exercise
How to initiaise the REST framework and start the HTTP and CoAP process?
For each accessible declared resource, we need to call:

Example of CoAP application:
We can see the example in /examples/er-rest-example/ressources/res-hello.c

In server side, we enable the resource by

The URI path of the resource is test/hello

CoAP API – Tutorial and Exercise
How it works the application example of CoAP
Makefile : → It Includes resources folder and files as a project directory for compilation
Makefile : → It includes the er-coap and rest-engine application
project-conf.h: → Disable TCP

CoAP API – Tutorial and Exercise
How it works the application example of CoAP The maximum buffer size
The maximum number of transactions that the node can handle
/resources → The folder contains the resources er-example-server.c → includes these ressources using extern resource_t res_light;

CoAP API – Tutorial and Exercise
How it works the application example of CoAP
res-hello.c → It defines the Hello resource
CoAP API
POST, PUT and DELETE parameters take NULL because they are not supported by this ressource

CoAP API – Tutorial and Exercise
How it works the application example of CoAP
The res_get_handler is the event callback for GET requests:
The default lenght of the reply, only Hello World! will be sent
If the len option is specified, then a number of len bytes of the message string will be sent

CoAP API – Tutorial and Exercise
How it works the application example of CoAP
If the value is a negative one, send an empty string
If len is higher than the maximum allowed, then we only send the maximum lenght value
Copy the message Set the response content type text/plain
Attach the header to the response, set the payload lenght field Attach the payload to the response

