Dynamic Adaptive Access Barring Scheme For HeavilyCongested M2M Networks

Meriam Bouzouita

Yassine Hadjadj-Aoul

Nawel Zangar

University of Rennes 1, France University of Rennes 1, France Mediatron, SUP’COM, Tunisia

Mediatron, SUP’COM, Tunisia

yhadjadj@irisa.fr

mariem.bouzouita@supcom.tn

nawel.zangar@insat.rnu.tn

Gerardo Rubino

Sami Tabbane

INRIA Rennes, France

Mediatron, SUP’COM, Tunisia

Gerardo.Rubino@inria.fr Sami.Tabbane@insat.rnu.tn

ABSTRACT
The massive deployment of Machine-to-machine (M2M) communications may overwhelm the cellular network by imposing strong constraints on the Radio Access Network (RAN). As the base station cannot accurately get the exact number of M2M arrivals, it cannot really predict the overload status. Consequently, a better estimation of this number would eﬃciently help to overcome the risk of congestion. In this paper, we proposed a novel ﬂuid model for M2M communications, which allows gaining an enhanced understanding of the dynamics of such systems. The provided analysis of the model was used to devise a new method to estimate accurately the number of M2M devices. We proposed, then, a novel implementation of the ACB process, which dynamically computes the ACB factor according to the network’s overload conditions while includes a corrective action adapting the controller action based on the mismatch existing between the computed and the targeted mean load. The simulation results show that the proposed algorithms allow improving considerably the estimation of the number of M2M devices’ arrivals, while outperforming existing techniques.
Keywords: M2M, Random access, ﬂuid model, Congestion avoidance.
1. INTRODUCTION
The next mobile generation, is planned to create a networked and smart society in which the Internet of Things (IoT) will certainly play an important role [1]. Furthermore, the success of the forthcoming 5G standard is closely related to the eﬃcient support of such devices, and particularly machine-to-machine (M2M) communications, which represent a key component of the IoT paradigm[2][3].
Owing to the massive deployment of M2M communications, in the near future, M2M devices may overwhelm the cellular network by causing congestion at both the Radio Access
Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for proﬁt or commercial advantage and that copies bear this notice and the full citation on the ﬁrst page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior speciﬁc permission and/or a fee. Request permissions from permissions@acm.org.
MSWiM ’16, November 13-17, 2016, Malta, Malta
c 2016 ACM. ISBN 978-1-4503-4502-6/16/11. . . $15.00 DOI: http://dx.doi.org/10.1145/2988287.2989174

Network (RAN) and the Core Network (CN). Nonetheless, the RAN constitutes the most claiming part because of the radio resources’ scarcity. In this way, new network access approaches are required to anticipate the congestion and the system overload by managing more eﬃciently the simultaneous Random Access (RA) of M2M devices, and hence tackling their explosive growth. This constitutes our main focus in this paper.
The congestion control problem due to competing M2M devices was considered very early as one of the priorities of the 3GPP. Indeed, the 3GPP standardizing body proposed many solutions to tackle such problem, including the Access Class Barring (ACB) concept [4], which is considered as one of the most eﬃcient ways to tackle these types of congestion [5]. These works have been precursors of many other highly eﬀective solutions, which succeeded in avoiding the congestion of the access network [6], [7]. However, these proposals present many limits when dealing with baseline congestion. Indeed, in such a condition, these techniques fail to avoid a synchronized access of M2M devices, which may results in some cases to a congestion collapse. Substantively, the base station cannot accurately estimate the number of M2M devices willing to connect and, hence, cannot predict the overload status. Consequently, a better estimation of this number would eﬃciently help to treat the congestion trouble.
The main issue addressed in this article is related to improving channel access for M2M communications in LTE-A networks and beyond. To face the identiﬁed challenges, we proposed a mechanism to better exploit channel utilization, a novel access protocol that adapts dynamically the access attempts of M2M devices according to the network congestion’s level. Hence, we propose a new approach to estimate the RA attempts under the developed dynamic access algorithm, based on M2M new arrivals and backlogged equipment’s estimation. A corrective action to the Proportional Integral Derivative (PID)[8][9] controller was added to better mismatch the estimated and the targeted payload.
The remainder of this paper is organized as follows. Section 2 is dedicated to describe a ﬂuid model for M2M networks and to study the steady-state performance of such dynamic system. Section 3 portrays our new adaptive access protocol in addition to the proposed estimation algorithm. Section 4 is dedicated to the simulation setup and the analysis of our proposition. Finally, conclusions are presented in Section 5 with a summary recapping the main advantages and achievements of the proposed access protocol.

287

2. A MODEL FOR M2M NETWORKS
2.1 A simple ﬂuid model
Having described brieﬂy how M2M devices access the mobile networks, we now direct our focus on representing the whole system using a simple ﬂuid model, described below.
Note that, for the sake of simpliﬁcation, the model represented in Fig. 1 does not consider the case where the M2M devices reach the maximal number of attempts. This phenomenon should be avoided in a properly dimensioned or controlled system. Indeed, an eﬃcient controller should minimize the number of re-attempts, whatever the number of terminals, to maximize the resources utilization. In the performance evaluation section1, it can be clearly observed that the proposed approach presents only a few abandons.

λ

x1

px1

x2

qNx2 −1 x2

µ1 x1,L

(1 − p)x1 µ2x2,L

1 − qNx2−1 x2

x1,L

x2,L

Figure 1: System model

The following quantities are used to capture the M2M devices behavior:

x1(t) number of backlogged devices at time t;

x1,L(t) number of blocked devices at time t, after having failed an ACB check and waiting for re-attempting;

x2(t) number of devices at time t having passed the ACB check and waiting to attempt the RA;

x2,L(t) the number of blocked devices at time t after a failed RA attempt and waiting to try again;

λ

the arrival rate of devices;

θ

the abandon rate after reaching maximum number

of RA attempts.

µ1

the rate of ACB re-attempts;

µ2

the rate of RA re-attempts;

p

the ACB factor.

When attempting the random access, the M2M devices contend for the N available preambles. In each RACH opportunity, these preambles are split into successful (i.e. chosen by only one device), collided (i.e. chosen by two or more devices) and idle (i.e. selected by none of the devices). In the following, we recall the average values of these quantities that we determined in [6]. These quantities will be used in the proposed model and algorithms.
Let’s deﬁne qN = 1 − 1/N . The average number of successful preambles, NS, during the RACH opportunities is given by NS = qNx2−1x2. The average number of idle preambles is NI = N qNx2 . From these expressions, we obtain the
1This will be a part of a future work to consider the dynamics related to M2M devices abandoning the system.t

expected number of failed preambles NF just by writing NF = N − (NS + NI ).
Since the number of units considered in these systems is relatively high, we will use a ﬂuid model (continuous state variables), that has the beneﬁt of simplicity. In the sequel we will describe the dynamics that deﬁne the evolution of the four state variables x1, x1,L, x2 and x2,L (all functions of time) based on the model described in Fig. 1.
The system’s dynamics is described by the following system of diﬀerential equations:

dx1 dt

= λ − x1 + µ1x1,L,

dx2 dt

= px1

+ µ2x2,L − x2,

dx1,L dt

= (1 − p)x1 − µ1x1,L,

dx2,L = dt

1 − qNx2−1 x2 − µ2x2,L.

The considered parameters are the following: N with 4 ≤ N ≤ 64, λ > 0, p with 0 < p < 1, µ1 > 0, µ2 > 0 along with the obvious constraint that x1(t), x1,L(t), x2(t) and x2,L(t) should be non-negative.

2.2 Steady-state performance analysis
To study the steady-state performance of our system, we replace the derivatives by 0. We obtain the equations for ﬁnding the stationary points of the dynamical system:

0 = λ − x¯1 + µ1x¯1,L,

(1)

0 = px¯1 + µ2x¯2,L − x¯2,

(2)

0 = (1 − p)x¯1 − µ1x¯1,L,

(3)

0 = 1 − qNx¯2−1 x¯2 − µ2x¯2,L.

(4)

From (1) and (3), we obtain

λ

x¯1

=

. p

Replacing the value of x¯1 in (1), we have

1−p λ

x¯1,L =

p

. µ1

From (2), µ2x¯2,L = x¯2 − px¯1, and from (4), µ2x¯2,L = 1 − qNx¯2−1 x¯2. Eliminating µ2x¯2,L and using the obtained expression of x¯1, we have

λ x¯2 − p p =

1 − qNx¯2−1

x¯2,

leading to the equation

x¯2qNx¯2−1 = λ.

(5)

The analysis of this nonlinear equation is a bit out of the
focus of the paper, but it is straightforward. We provide a
short summary here following a direct approach, avoiding
the classical use of the Lambert W function deﬁned on any complex number z by W (z) = w ⇐⇒ z = wew [11].
Deﬁne the function f by means of f (x) = xqx−1 for x ≥ 0,
where 0 < q < 1. We have f (0) = f (∞) = 0 and f (x) = qx−1(1 + x ln q), giving a maximum at x = x∗ = −1/ ln q,
whose value is M = −1/(eq ln q). This already gives us the
stability condition of the “right side” of the model (the “left
side”, variables x1 and x1,L, is always stable): λ ≤ M , if we use a generic q in the model, or λ ≤ −1/(eqN ln qN ) for our

288

speciﬁc value qN = 1 − 1/N . If λ < M then we have two solutions ra and rb to the equation, say 0 < ra < x∗ < rb,
where ra leads to stability and rb to instability. Knowing that 0 < ra < x∗ allows to easily ﬁnd ra numerically, for
instance using a Newton scheme.

3. DYNAMIC ACB FOR HEAVILY OVERLOADED NETWORKS
In this section, we proposed a comprehensive solution, which consists in the two following phases. The ﬁrst phase allows estimating accurately the states’ space variables (i.e. x1 and x2) based on the mathematical model developed in the previous section. These variables are used, then, in the second phase to calculate dynamically the ACB factor using an adapted PID controller for an optimized resources management.

Algorithm 1 States’ estimation

1: global: xˆ1, xˆ2, x¯2, x∗2, NS , NS∗, NF , NI , NI∗, Pacb 2:

3: function x2Estimate(n)

4: require: δ, η, α1 ∈ [0, 1], α2 > 1

5: x2,min[n] ← NS [n] + 2NF [n]

6: if NI [n] = 0 then

7:

x2,idle[n]

←

ln(

NI [n] N

)

ln qN

8:

x˜2[n] ← max(x2,min[n], x2,idle[n])

9: else

10:

if NS[n] > 20 then

11:

NS[n] = 19

12:

x2,success [n]

←

W (qN ln qN NS [n]) ln qN

13:

x˜2[n] ← max(x2,min[n], x2,success[n])

14: e[n] ← e[n − 1] + δ(x∗2 − x˜2[n])

15: x¯2 ← (1 − η)x¯2 + ηx˜2[n]

16: if NS > NS∗ then

17:

NS = NS∗

18: 19:

correction ← −N NI,min ← α1NI∗

NS −NS∗ NS∗

20:

NI,max ← α2NI∗

21: if NI ≤ NI,min then

22:

return xˆ2[n] ← x¯2 + e[n] + correction

23: else

24:

if NI ≥ NI,max then

25:

return xˆ2[n] ← x¯2 + e[n] − correction

26:

else

27:

return xˆ2[n] ← x¯2 + e[n]

28:

29: function x1Estimate(n) 30: require: = 10−6

31: if Pacb[n−1] < then

32:

return xˆ1[n] = xˆ1[n − 1]

33:

xˆ1[n]

←

xˆ2[n] −

(xˆ2[n − 1] − Pacb[n − 1]

NS [n])

34: return xˆ1[n] > 0?xˆ1[n] : xˆ1[n − 1]

In contrast with existing approaches, the enhancements we suggest, in this paper, allow a more accurate estimation of the number of M2M devices attempting the random access through an iterative convergence of the estimates to the real values for an improved resources’ management.

3.1 An accurate estimation of the states’ space variables
In realistic use cases, the eNodeB is unaware of the devices present in the states x1 and x2, as no connection is established with them yet. To remedy this situation, we propose, in the following, a methodology allowing to estimate the number of devices in these two states (see Alg. 1 for more details).
For the sake of simplicity we are referring here by NS, NI and NF to the average values calculated during 1 second (i.e. 100 RACH opportunities). The values NS∗, NI∗, and NF∗ represent the values obtained for the optimal x2 (i.e. x∗2).
During each RACH opportunity n, the eNodeB calculates the number of successful preambles NS[n], the idle ones NI [n] and the collided ones NF [n]. Given that the number of successful preambles is also equal to the expected number of devices accomplishing the RA process, and given that a failed preamble is chosen by at least two M2M devices, one can deduce the minimal x2 value (i.e. x2,min), as expressed in line 5. In presence of at least one idle preamble (i.e. NI = 0), the x2 estimate, denoted by x2,idle, is obtained using the solution to equation NI = N qNx2 , seen in previous subsection. Otherwise, it is estimated (i.e. x2,success) using expression NS = qNx2−1 with the constraint that NS[n] <= 19, in order to guarantee a real solution of the obtained Lambert W function [11], which is analyzed in previous Subsection 2.2. This will allow calculating the value of x˜2 and its moving average x¯2. Therefore, the mismatch existing between x˜2 and the optimal value x∗2 can be computed to correct the value of xˆ2.
Note that a corrective action is added when the average number of idle preambles NI during the last second is bigger or smaller than predeﬁned threshold.
Once x2 estimation is accomplished, the eNodeB can use xˆ2 and NS to estimate x1 according to the code in line 33.
3.2 Adaptive ACB calculation
In this subsection, we will describe in details the proposed adaptive ACB algorithm, named DACB, which is performed at each RACH opportunity and illustrated in Alg. 2.
In the ﬁrst phase of the DACB algorithm, the eNodeB adjusts dynamically the set point xr2ef according to the overload situation. The main idea here is to compute the moving average value of the estimate xˆ2 and to check if the value is bigger than the optimal value x∗2 (i.e. too much M2M devices in the state x2) or smaller than it (i.e. too few M2M devices in the state x2). To provide more stability, an action is taken only when the average is bigger or small than predeﬁned thresholds. Thus, when the average value is considered as too big with a risk of congestion, the controller action reinforced by reducing the targeted objective xr2ef, which enables blocking more devices from attempting the random access in the subsequent step. Besides, when the average value is considered as too small with a risk of resources’ under-utilization, the controller action is relaxed by increasing the targeted objective, which enables accepting more devices. Note that we consider only values within the interval [0; x∗2].
Once the dynamic targeted load determined, the eNodeB executes the second phase to generate the ACB factor at step n. If the average of x2 is less than x∗2 at step n, Pacb in the next step, is computed using equation in line 21, based on the estimation of xˆ1. Otherwise, the eNodeB applies a PID controller to make the total number of M2M devices x2, contending for RA, converges to the optimal value xr2ef

289

Algorithm 2 Dynamic ACB calculation (DACB)

1: global: xˆ1, xˆ2, x¯2, xr2ef, x∗2 2:

3: function refUpdate(n) 4: require: θ, β ∈ [0, 1], α > 1

5: x¯2 ← (1 − θ)x¯2 + θxˆ2[n]

6: if x¯2 > αx∗2 then

7:

xr2ef[n] ← xr2ef[n − 1] − 1

8: else

9:

if x¯2 < βx∗2 then

10:

xr2ef[n] ← xr2ef[n − 1] + 1

11: xr2ef[n] ← min max xr2ef[n], 0 , x∗2

12:

13: procedure DACB
14: n ← 1 15: x∗2 ← N 16: loop:

17: xˆ2[n] ← x2Estimate(n)

18: xˆ1[n] ← x1Estimate(n)

19: refUpdate(n)

20: if (x¯2[n] ≤ x∗2) and (xˆ1[n] = NaN) then

21:

Pacb[n]

←

xr2ef [n] xˆ1 [n]

22: else

23:

e[n] ← xr2ef[n] − xˆ2[n]

n

24:

Pacb[n] ← kpe[n] + ki e[k] + kd(e[n] − e[n − 1])

k=0

25: Pacb[n] ← min (max (Pacb[n], 0) , 1) 26: n ← n + 1

27: goto loop

determined at step n. As Pacb is a probability, we apply: min (max (Pacb, 0) , 1) in (line 25).
Both the dynamic adjustment of the set point and the ACB factor generation are repeated in the following step (i.e. next RACH opportunity).
4. PERFORMANCE EVALUATIONS
4.1 Simulations’ parameters
In this section, we evaluate the proposed solutions and highlight their technical beneﬁts. In order to evaluate the accuracy of the estimations’ and the eﬃciency of the dynamic ACB calculation’s algorithm, we built a discrete events’ simulator in C, which was validated in a previous study [6]. The developed simulator models the whole system described in section 2. Besides, we added the possibility for an M2M device to abandon the connection after reaching a maximal number of attempts Rmax = 10.
We assume that there is one eNodeB and that M2M devices are activated according to a Poisson traﬃc model where inter-arrivals are exponentially distributed. We also adopt an RACH conﬁguration where one RACH opportunity occurs every 10ms with N = x∗2 = 54 preambles at each opportunity. The simulation duration, the backoﬀ parameter, the ac-BarringTime are respectively equal to 30s, 20ms and 4s [10].
4.2 Controller efﬁciency for various loads
To show the behaviour of our proposed DACB algorithm, we compare, in this sub-section, its performance with the

PID controller for various network’s loads [8]. Let’s recall that the average load is represented here for a period of 10ms. We consider the following performance’s metrics: the average number of abandons, the average number of successful RA attempts and the average access delay. Here, we deﬁne the random access delay as the duration from the ﬁrst RA attempt until a successful access. The obtained average values and the conﬁdence intervals were computed for 50 experiments for each load value.
Fig. 2 depicts the average number of abandons for diﬀerent network loads. In relaxed network conditions, the results obtained with the PID controller are comparable to our approach (i.e. DACB ) and remain acceptable. Indeed, in such conditions there is no impact of the proposed adaptation mechanism, and the two approaches have the same behavior. When considering DACB, we note that this number remains very close to 0 even if the network’s load increases, which proves the eﬀectiveness and the stability of DACB. It can also be seen that the number of abandons increases rapidly when applying the PID controller.

Average # of abandons

6

DACB

PID

4

2

0

18

20

22

24

26

28

λ(#/10ms)

Figure 2: Evolution of the number of abandons versus λ

Another way to test the performance improvements achieved by DACB can be reached by comparing the numbers of successful RA attempts in function of network loads. The obtained results are depicted in Fig. 3. We ﬁrst observe a very small variation, with DACB, of these numbers even if the number of M2M devices increases (≥ 16). Whereas, in case of the PID controller, the number of successful RA attempts decreases gradually and becomes intolerable (around 5 devices per RACH opportunity), when the network is undergoing a heavy congestion. Nevertheless, this number remains acceptable when the network is in relaxed conditions.

# of successful RA

15

10

5

DACB

PID

0

18

20

22

24

26

28

λ(#/10ms)

Figure 3: Evolution of the average number of successful RA attempts versus λ

Another important performance parameter is the average

290

random access delay illustrated in Fig. 4. If DACB method is applied, we observe that the average delays for diﬀerent loads are not much diﬀerent and don’t exceed 45ms. Whereas, with the PID controller, we can easily observe that the delays reach 80ms when the network is in heavily congested situations. This is a direct consequence of the important number of connections’ reattempts, which is also reﬂected by the number of abandons as it can be seen in Fig. 2.

Average RA delay (ms)

80
DACB
PID
60

40

20

0

18

20

22

24

26

28

λ(#/10ms)

Figure 4: Evolution of RA delay versus λ

4.3 Estimation accuracy for various loads
We compare, in this sub-section, the accuracy of the proposed scheme with the MCSA-OE algorithm [12] for various network’s loads.
Fig. 5 depicts the evolution of the estimation error for various loads. It can be clearly seen that when the network’s load increases, the average estimation error decreases and then we obtain a more accurate estimation. In fact, when the network is more congested, x2 tends to reach stable values and then the estimation’s error is reduced. Nevertheless, the obtained average deviation remains very small near to 0 when a DACB algorithm is considered. However, this ﬂuctuation varies between 20% and 50% in case of MCSA-OE scheme.
Note that the error bars are obtained for 95% conﬁdence intervals, which show the accuracy of the obtained values.
60
DACB MCSA − OE
40

x2 estimation’s gap (%)

20

0

18

20

22

24

26

28

λ(#/10ms)

Figure 5: Evolution of the average estimation error of x2 versus λ

5. CONCLUSIONS
In this paper, we have addressed the issue of heavily congested M2M networks, where a risk of congestion collapse appears. To treat more eﬃciently this trouble and improve

the network’s performances, we have proposed a new access control strategy for M2M random accesses.
We ﬁrst presented a simple ﬂuid model for M2M devices’ accesses. Then, based on this mathematical model, we designed a novel implementation of the ACB scheme, which combines three steps performed every RA opportunity: (i) an accurate estimation of the network status, (ii) a dynamic adjustment of the model’s parameters depending on the RA congestion level (e.g. the number of RA attempts that maximize the success access probability) and (iii) ﬁnally a dynamic ACB probability’s calculation according to the expected network’s overload situations.
The simulation results showed a reduced random access delay and also a reduced number of RA preambles’ retransmissions which is one of the most important factors impacting the M2M energy consumption. Furthermore, results proved the eﬃciency of the proposed estimation method, as we obtained estimated values near to the actual ones.
6. REFERENCES
[1] M. R. Palattella et al., ”Internet of Things in the 5G Era: Enablers, Architecture, and Business Models,” in IEEE JSAC, vol. 34, no. 3, pp. 510-527, March 2016.
[2] A. Biral, M. Centenaro, A. Zanella, L. Vangelista, M. Zorzi, The challenges of M2M massive access in wireless cellular networks, Digital Com. and Networks, Vol. 1, Issue 1, Pages 1-19, 2015.
[3] R. Ratasuk, A. Prasad, L. Zexian, A. Ghosh, M. Uusitalo, Recent advancements in M2M communications in 4G networks and evolution towards 5G, ICIN 2015 , vol., no., pp.52,57, 2015.
[4] 3GPP TS 36.331 : Evolved Universal Terrestrial Radio Access (E-UTRA); Radio Resource Control (RRC); Protocol speciﬁcation V.12.5.0 Release 10, April 2015.
[5] A. Ksentini, Y. Hadjadj-Aoul, T. Taleb, Cellular-based machine-to-machine: overload control,” IEEE Network, vol.26, no.6, pp.54,60, November 2012.
[6] Bouzouita M, Hadjadj-Aoul Y, Zangar N, Rubino G and Tabbane S, Multiple Access Class Barring factors Algorithm for M2M communications in LTE-Advanced Networks, ACM/MSWIM, 2015.
[7] Arouk O., Ksentini A. and Taleb T., Group Paging-based Energy Saving for Massive MTC Accesses in LTE and Beyond Networks, IEEE JSAC, 2016.
[8] Bouzouita M, Hadjadj-Aoul Y, Zangar N, Tabbane S and Viho C, A random access model for M2M communications in LTE-advanced mobile networks, Modeling and Simulation of Computer Networks and Systems, Elsevier, 2015.
[9] Astrom K.J., Hagglund T., Advanced PID Control, ISA-The Instrumentation, Systems, and Automation Society, ISBN 1556179421, 2006.
[10] 3GPP TS 36.321, LTE; Evolved Universal Terrestrial Radio Access (E-UTRA); Medium Access Control (MAC) protocol speciﬁcation, V.11.3.0 Release 11, July 2013.
[11] Corless, R., Gonnet, G., Hare, D., Jeﬀrey, D. and Knuth, D., On the Lambert W function, Advances in Computational Mathematics (Berlin, New York: Springer-Verlag) 5: 329–359, 1996.
[12] Arouk O. and Ksentini A., Multi-Channel Slotted Aloha Optimization for Machine-Type-Communication, ACM/MSWiM, 2014.

291

