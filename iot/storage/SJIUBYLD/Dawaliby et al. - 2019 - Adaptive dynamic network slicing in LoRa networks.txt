Accepted Manuscript
Adaptive dynamic network slicing in LoRa networks Samir Dawaliby, Abbas Bradai, Yannis Pousset

PII: DOI: Reference:

S0167-739X(18)31842-9 https://doi.org/10.1016/j.future.2019.01.042 FUTURE 4735

To appear in: Future Generation Computer Systems

Received date : 31 July 2018 Revised date : 3 December 2018 Accepted date : 21 January 2019

Please cite this article as: S. Dawaliby, A. Bradai and Y. Pousset, Adaptive dynamic network slicing in LoRa networks, Future Generation Computer Systems (2019), https://doi.org/10.1016/j.future.2019.01.042

This is a PDF file of an unedited manuscript that has been accepted for publication. As a service to our customers we are providing this early version of the manuscript. The manuscript will undergo copyediting, typesetting, and review of the resulting proof before it is published in its final form. Please note that during the production process errors may be discovered which could affect the content, and all legal disclaimers that apply to the journal pertain.

Adaptive Dynamic Network Slicing in LoRa Networks
Samir Dawaliby1, Abbas Bradai, Yannis Pousset
XLIM Laboratory, 11 Boulevard Marie et Pierre Curie, Chasseneuil du Poitou, France aUniversity of Poitiers

Abstract
Knowing the heterogeneity of applications and services that need to to be supported in the internet of things (IoT), network slicing came out as a potential solution that virtually isolates 5G networks with various service requirements over a common physical network infrastructure. The latter needs to simultaneously support and isolate traﬃc issued from mobile and machine services which may require diﬀerent needs in terms of reliability, latency, and bandwidth. In this paper, network slicing is investigated in LoRa networks over ﬁxed and dynamic slicing strategies. The performance of LoRa slices is evaluated with diﬀerent spreading factor (SF) conﬁgurations. Then, a dynamic inter-slicing algorithm is proposed based on a maximum likelihood estimation that avoids resource starvation and prioritizes a slice over another depending on its QoS requirements. Moreover, a novel intra-slicing strategy is proposed that maximizes resource allocation eﬃciency of LoRa slices with regard to their delay requirements. An energy module for LoRa in NS3 is also implemented to evaluate the energy consumption of devices in each slice. Simulation results performed in realistic LoRa scenarios highlight the utility of our proposition in improving QoS requirements of IoT devices and providing isolation between slices.
Keywords: Internet of Things (IoT), wireless networks, LoRa, network slicing, resource allocation, quality of service (QoS)

1. Introduction

With the development of the ﬁfth generation (5G) wireless networks, it is expected that by 2020,

an all-connected world of humans and machines will be reached oﬀering with it the needed ﬂexibility to

manage networks with various service requirements using major arising technologies namely network

5 functions virtualization (NFV) and software deﬁned networking (SDN). With the development of the

latter, network slicing is proposed as one of the most important technologies to reach this goal by

using a collection of logical functions. Our objective is to provide isolation between multiple virtual

networks with various QoS requirements to be created on top of a common physical device, being

mutually instantiated on-demand and independently managed.

10

Low-power wide-area (LPWA) research eﬀorts direct towards LoRa technology and is considered

as one of the best emerging technologies for the internet of things (IoT). With network slicing, radio

Email addresses: samir.dawaliby@univ-poitiers.fr (Samir Dawaliby), abbas.bradai@univ-poitiers.fr (Abbas
Bradai), yannis.pousset@univ-poitiers.fr (Yannis Pousset) 1Corresponding author

Preprint submitted to Journal of Future Generations Computer Systems

November 28, 2018

resources need to be virtually reserved in an isolated and eﬃcient manner to provide speciﬁc service requirements for each slice. Three generic services are provisioned in 5G with conﬂicting quality of service (QoS) requirements (i.e., ultra-reliable low-latency communications (URLLC), enhanced mo15 bile broadband (eMBB), and massive machine-type communications (mMTC)). Service requirements in mMTC category may vary between two applications running on a single IoT device and require heterogeneous behavior mainly when it comes for example to latency and reliability. The massive number of IoT devices continuously increasing and connecting alongside mobile devices to the new generation core network (NGCN) in 5G, brings an exceptional need for network slicing and virtualiza20 tion to improve network ﬂexibility. This leads to new challenges in designing resource allocation and slicing strategies which must guarantee slicing isolation and simultaneously provide the opportunity for infrastructure providers to easily meet the required QoS for IoT devices in a cost-eﬀective manner.
1.1. Related Works
Performance evaluation over LoRa networks has been intensively reviewed by many research studies 25 in the literature [1] [2] [3]. Other research studies focused on evaluating LoRa scalability [4] while
considering co-SF interference that comes from collisions when using the same SF conﬁguration on the same channel [5] whereas others assumed that SFs on a channel are perfectly orthogonal [6] [7]. SF represents the ratio between the chirp rate and the data symbol rate and aﬀects directly the data rate and the range that a LoRa device can reach away from a LoRaWAN gateway. Moreover, co-SF 30 directly impact communication reliability, reduces the packet delivery ratio (PDR) successfully decoded at the gateway [8] and limits the scalability of a LoRa network when increasing the number of devices [9]. Therefore, the latter should be considered in any upcoming study related to SF conﬁguration strategies and network deployments. Some study examples focused on ﬁnding the optimal transmitter parameter settings that satisfy performance requirements using a developed link probing regime [10]. 35 In [11], the authors analyze several SF conﬁguration strategies where a group of LoRa devices can be conﬁgured with similar or heterogeneous SFs based on their position from the gateway. The goal is to ﬁnd the scheme that gives the best performance in terms of PDR. However, the impact of the latter conﬁguration on network slicing has not been previously tested.
Few research works recently tackled network slicing in IoT and focused on machine critical com40 munications over various wireless networks. The work in [12] introduced a slicing infrastructure for
5G mobile networking and summarized research eﬀorts to enable end-to-end network slicing between 5G use cases. Furthermore, authors in [13] and [14] adopted network slicing in LTE mobile wireless networks. The former proposed a dynamic resource reservation for machine-to-machine (M2M) communications whereas the latter present a slice optimizer component with a common objective in both 45 papers to improve QoS in terms of delay and link reliability. In a 5G wearable network, the authors took advantage of slicing technology to enhance the network resource sharing and energy-eﬃcient utilization [15]. Moreover in [16], the authors perform slicing in virtual wireless sensor networks to improve lease management of physical resources with multiple concurrent application providers. In [17], authors focused on URLLC and proposed several slicing methods for URLLC scenarios which re50 quire strong latency and reliability guarantees. Nowadays, guaranteeing service requirements in LoRa wireless access network (LoRaWAN) with traﬃc slicing remain as open research issues [18]. Therefore,
2

unlike the previous work, in this article network slicing is investigated in LoRa technology which, to the best of our knowledge, has not been treated before by the research community.

1.2. Contributions and outlines

55

Our main contribution with respect to the surveyed literature are stated as follows:

1. Network slicing is investigated over diﬀerent SF conﬁgurations in order to evaluate system per-

formance and ﬁnd the one that serves best LoRa devices in each slice.

2. A dynamic inter-slicing algorithm is proposed where the bandwidth will be similarly reserved

on all LoRa gateways based on a maximum likelihood estimation (MLE) and then the latter is

60

improved and extended with an adaptive dynamic method that considers each LoRa gateway

separately and reserves its bandwidth after applying MLE on the devices in its range. Both

dynamic slicing propositions will be compared to a straightforward ﬁxed slicing strategy in which

the GW’s bandwidth is equally reserved between slices.

3. An energy model for LoRaWAN is integrated in NS3 based on LoRa energy speciﬁcations to

65

analyze the energy consumed in each slice and an intra-slicing algorithm is proposed that meets

the QoS requirements of each slice in an isolated manner.

The remainder of this paper is organized as follows. Section II presents an overview of LoRa and describes the system model and the network slicing problem established in this paper. In Section III, the slicing algorithm is proposed and implemented over the LoRa module of NS3 simulator [19]. The 70 performance evaluation of the algorithm and simulation results are analyzed and carried out through various scenarios in Section V. Finally, Section VI concludes the paper.

2. Problem Description

2.1. LoRa Overview
LoRa is a shortcut name for Long Range and a spread spectrum modulation technique that 75 derives from chirp spread-spectrum (CSS) modulation as described in the IEEE standard 802.15.4
[20]. CSS modulation transmits symbols by encoding them into multiple signals of increasing or decreasing radio frequencies making signals more robust to multi-path interference, Doppler shifts and fading [21]. Currently, LoRa physical layer is used with LoRaWAN MAC layer despite being capable of communicating with any other MAC layer. LoRaWAN supports low-power and long-range 80 communications where IoT devices transmit directly to LoRa gateways in a star topology before forwarding data to a backbone infrastructure. Each device k adopts a speciﬁc SF conﬁguration for information transmission. LoRa spreads each symbol in a rate of 2SF chips per symbol with SF = {7, ..., 12} resulting a data rate computed as written in Eq. 1 below:

Rk,l,m

=

S

F.

Rc 2SF

=

SF.

bl,m 2SF

bits/s

(1)

where Rc denotes the chip rate and Rk,l,m the data rate achieved by a device k depending on the 85 bandwidth assigned to slice l of LoRa gateway m. Channel bandwidth varies from a region to another

from 7.8 kHz to 500 kHz. Increasing the bandwidth improves the data rate of LoRa device on the

3

Spreading Factor SF7 SF8 SF9 SF10 SF11 SF12

Sensitivity (dBm) -130.0 -132.5 -135.0 -137.5 -140.0 -142.5

Table 1: List of parameters

expanse of sensitivity. In this paper, 125 kHz bandwidth is adopted for each channel following to the European frequency regulations.
Moreover, as shown in Table 1, increasing the spreading factor reduces the transmitted data rate, 90 increases the strength of the signal and oﬀers a better sensitivity at the gateway receiver following to
the Eq. 2 below:

Pkr,xl,m

=

Pktx,l,m

gkrx,l,mgktx,l,m L

eξ

(2)

where Pkr,xl,m and Pktx,l,m denotes the received and transmitted power with a channel antenna gain expressed with gkrx,l,m and gktx,l,m respectively. L is the path loss which depends on the distance between the transmitter and the receiver and eξ is the lognormal shadowing component with ξ ∼ N (0, σ2).

95 Regarding interference, signal-to-interference-plus-noise ratio (SINR) varies based on the adopted SF

on each device. The assumptions in [19] are followed where a packet should survive interference that

comes from other LoRa transmissions. Each LoRa device experiences a SINR value computed based

on the Eq. 3 below:

SIN Ri,j = σ2 +

Pirx n∈∂j Pnrx

(3)

where Pirx is the power of the packet n under consideration sent by device with SF = i and ∂j a set of interfering packets with a common SF = j. Each element in the below matrix [22] denotes the

minimum signal power margin threshold Vi,j, with i, j ∈ {7, ..., 12}, that a packet sent with SF = i

must have in order to be decoded successfully over every interfering packet with SF = j. Hence,

packet survives interference with all interfering packets if, considering all combinations of SF, a higher

power margin value (dB) is satisﬁed than the corresponding co-channel rejection value.

SF7 SF8 SF9 SF10 SF11 SF12 SF7 −6 16 18 19 19 20 SF8 24 −6 20 22 22 22 SF9 27 27 −6 23 25 25 SF10 30 30 30 −6 26 28 SF11 33 33 33 33 −6 29 SF12 36 36 36 36 36 −6
In this paper, log-distance propagation loss model is adopted to evaluate the performance of LoRa

4

100 devices in a dense environment and is expressed following to the Eq. 4 below:

L

=

L0

+

10.n.log10(

d d0

)

(4)

where L denotes the path Loss (dB), d the length of the path (m), n represents the path loss distance

exponent, d0 the reference distance (m) and L0 the path loss at reference distance (dB).

2.2. System Model Network slicing in a LoRa-like network is considered in this work, consisting of a set of K =
105 {1, 2, ..., k} LoRa devices and M = {1, 2, ..., m} LoRa Gateways (GWs) plotted over a cell and connected to external LoRa Servers via fronthaul links. Compared to Sigfox [23], NB-IoT [24] and other IoT technologies, LoRa is more resilient to interference and jamming [25] thanks to its ability to eﬃciently trade communication range with high data-rate. Network slicing mainly brings ﬂexibility to the network by virtually reserving physical resources in order to meet the QoS requirements of each slice.
110 In IoT, each device requires speciﬁc QoS requirements in terms of delay and reliability depending on the running IoT application. A slicing framework is deﬁned that consists of a set of L virtual network slices such that L = {1, 2, ..., l} can be created on physical network hardware, more speciﬁcally on LoRa GWs, where the bandwidth of each GWs is divided into l slices with l ∈ L, as shown in Fig. 1 below. The main goal behind slicing is to virtually split the network by reserving resources for each
115 slice on the same physical device with each slice l characterized by a priority spl and a bandwidth bl,m at the GW level. A set of virtual ﬂows F is deﬁned where a device k associated to slice l generates a ﬂow fk,l,m that goes from the GW m to LoRa servers and is characterized by a utility metric Uk,l,m speciﬁed later on in this paper. LoRa GWs in range will receive the packets but only one GW slice forwards the packet to LoRa servers to avoid duplicated packets.

Figure 1: IoT Slicing architecture in LoRa Networks
5

120 2.3. Problem formulation
In this work, optimizing network slicing in IoT is a threefold problem and involves: 1) LoRa devices admission and association to slices; 2) Finding the best inter-slicing resources reservation strategy; 3) Intra-slice resources allocation. First, L slices are deﬁned based on the delay urgency factor and reliability requirements of each device. Each device is assigned next to the slice that meets best its 125 service latency requirement. It is noteworthy that in IoT, the delay urgency and reliability represents the major key factors to deﬁne the priority of a device over another without neglecting the service type and the congestion that results from the large amount of IoT devices. Next, based on throughput requirements of each slice, slicing rate is estimated to deﬁne capacity cl that needs to be reserved for each slice l. Each GW m reserves for each slice, some of its physical receiving paths and each member 130 of a slice is characterized by a speciﬁc utility value Uk,l,m. Finally in the third step, intra-slice resource allocation is optimized by assigning each device in slice l to the most eﬃcient virtual ﬂow with the highest utility metric. Let αk,l ∈ {0, 1} be a binary variable that indicates whether a device k is associated with a ﬂow fk,l,m ∈ F . The goal is to maximize the number of LoRa devices assigned to virtual ﬂows in a way that maximizes the utility function adopted by each slice members. Therefore, 135 the slicing and resource allocation problem for IoT can be formulated as

M ax

αk,lUk,l,m, ∀m ∈ M

(5)

k∈K l∈L

subject to

C1 : αk,l = 1, ∀k ∈ K

(6a)

l∈L

C2 : βk,mpk,l,m ≤ Pmmax, ∀m ∈ M, ∀l ∈ L
kK

(6b)

C3 :

αk,lβk,mrk,l,m ≤ Rlm,max, ∀l ∈ L, ∀m ∈ M

kK

(6c)

1 if device k is assigned to gateway m.

C4 : βk,m = 0 Otherwise.

(6d)

Knowing that multiple virtual network slices are isolated and built on top of a common physical gateway, (6a) ensures that each device should always choose exactly one and only network slice even if the latter was implemented on diﬀerent physical gateways. Hence in a multi-gateway scenario, the device assigned to a slice will only have the option to choose between the ﬂows that leads to the slice 140 it belongs to. The total transmission power of each GW m is limited in constraint (6b). Moreover, constraint (6c) guarantees the sum of uplink traﬃc sent by slice members do not exceed the maximum data rate capacity of the slice that can be sent through each gateway. Constraint (6d) ensures binaryassociation values βk,m between a physical IoT device k and a physical LoRa gateway m. Table 2 below summarizes the key denotations adopted in the paper.

6

Parameter
M
K
L
Kl ∂j fk,l,m Uk,l,m spl bl,m Pmmax gk,l,m eξ
αk,l βk,m
uk dk P DBk

Parameter Name the set of LoRa Gateways the set of LoRa Devices the set of Slices the set of devices associated to slice l the set of packets with SF = j virtual ﬂow for device k in slice l through GW m utility for device k in slice l on GW m slice priority of slice l bandwidth assigned for slice l over GW m maximum transmission power of GW m power gain between a GW m and a device k lognormal shadowing component admission index of device k to slice l association index of device k to GW m urgency factor for device k instant packet delay for device k packet delay budget for device k

Table 2: List of parameters

145 3. The Proposed Slicing Algorithm
In LoRa networks, the general control plane and resource management module are centralized and moved to a management and control entity (MCE) in the cloud to ensure an eﬃcient coordination of resources. Hence, LoRa servers will be the ﬁnal decision maker in assigning the devices to the appropriate slice and deﬁning the gateway that will transmit the packet following to a three-steps 150 optimization algorithm. In the ﬁrst step, each device will be assigned to the slice that meets its QoS requirements based on a balanced iterative reducing and clustering method using hierarchies (BIRCH). Next, after assigning each device to its corresponding slice, GW resources will be dynamically reserved for each slice based on a maximum likelihood estimation (MLE) before ﬁnally forwarding the packet to LoRa servers through the GW that provides the maximum utility value.

155 3.1. BIRCH-based Slicing Deﬁnition
Due to the ultra-dense nature in an IoT, BIRCH algorithm is adopted [26] which belongs to the agglomerative hierarchical clustering family and was proven as the best available clustering method for handling large datasets [27] [28]. The main goal behind this method is to deﬁne slices by checking the QoS requirements of each MTCD and moving from a large set of devices into a group of subsets with 160 similar QoS requirements. The most urgent devices are the ones that have the closest instant delay dk to their packet delay budget P DBk and are assigned the highest priority. uk denotes the urgency factor of device k with uk = dk/P DBk. Given Kl devices in a cluster l, the latter will be considered as a utility point uk of each device in a cluster with k = 1, 2, ..., Kl. Each node in the CF-tree is a cluster of subclusters deﬁned by a clustering feature CF as follows:

Kl

Kl

CF = (Kl, LS, SS) = (Kl, uk, u2k)

(7)

k=1 k=1

165

where Kl denotes the number of devices in the cluster, LS the linear sum of the Kl utility points

and SS the square sum of the Kl utility points. BIRCH dynamically builds a CF-tree, at each time a

new MTCD is inserted based on two parameters: a branching factor B and a threshold T . Each parent

7

node contains a maximum number of B childs and a single child node contains at most T entries. In this problem, B represents the number of L slices created with Kl the group of devices admitted to 170 slice l. Hence, l nodes derive from the root representing the slices created with each slice is made up of a group of subclusters. Therefore, entries in CF-tree are not considered as devices but as a set of subclusters C that belongs to slice l and groups LoRa devices with nearly similar utility points.

Pseudo-code 1 BIRCH-based Slicing Admission algorithm

Input : Set of devices K, diameter D, branching factor L, threshold T

1 begin

2 Initialize as many clusters as devices for each k ∈ K do

3

Start from root

Search for closest child node according to D

Search for closest subcluster according to D

if number of entries < T then

4

Add k to subcluster Cl,l

Update CF of Cl,l

5

else if number of childs < B then

6

Create a new subcluster Cl,l

Add k to Cl,l

Update CF of the parent node Sl

7

else if number of parents < B then

8

Split child nodes and redistribute CF entries according to closest

D

9

else

10

Split parent nodes

11

end

12 end

13 Update CF entries in CF-tree

14 end Output: Set of groups Gl(l=1,2,...,L)

As explained in Pseudo-code 1, the algorithm scans the clusters from the root (line 3) and recursively traverses down the CF-tree and chooses the closest node at each level with the smallest average inter-cluster distance D as follows:

Kl Kl+Kl
(uk − uk ) 1/2

minD = k=1 k =Kl+1 KlKl

, ∀k ∈ Kl, ∀k ∈ Kl

(8)

After deﬁning the candidate child node, a test is performed to ﬁnd the closest CF-entry and deﬁnes if the device can be added to the candidate subcluster without violating the threshold condition. If 175 so, the algorithm groups the node with the chosen entry and updates the CF-entry of the candidate subcluster (line 4). If not, a new entry is created for the node inside the candidate child node without breaking the branching factor condition (line 5-6). Otherwise, the child node is splitted and the utility points are redistributed based on the closest distance criteria to obtain a set of new subclusters that do not break the branching factor constraint (line 7-8). In case the number of childs already

8

180 reached the maximum, the parent nodes are splitted and the childs are redistributed to the closest parents (line 9-10). After inserting the CF-entry, all CF informations of the path are updated from the inserted information to the root (line 13).

3.2. Dynamic MLE-based Inter-Slicing Algorithm Knowing that the physical capacity c in terms of radio resources of a GW m is limited. The goal
185 of this scheme is to estimate and reserve the appropriate resources by ﬁnding the maximum likelihood buﬀer demands for each slice l starting by the one with the highest slicing priority. In this work, the traﬃc that needs to be uploaded follows a Poisson distribution and LoRa servers are aware of the amount of data stored in the buﬀer Bi of each slice member.
Lemma 1. Let Ti be the throughput needed by each device i, ∀i ∈ Kl captured at each slicing interval 190 time and identiﬁed by a corresponding probability distribution. For a ﬁxed physical capacity, the opti-
mum slicing strategy is to virtually reserve resources for each slice based on the mean throughput of its members.
Proof : Ti follows a Poisson distribution P(λi) where λi denotes the throughput needed by device i assigned to slice l, ∀i ∈ Kl. Let f (Ti|λi) be a probability density function similar to L(λi|Ti) that 195 represents the likelihood of λi given the observed throughput.

L(λ|T1, T2, ..., TKl ) = f (T1|λ1)f (T2|λ2)....f (Tl|λl)

L(λ|T1,

T2,

...,

TKl )

=

Kl i=1

e−λi λTi i Ti!

logL(λ|T1, T2, ..., TKl ) = log

Kl e−λi λTi i i=1 Ti!

Kl
logL(λ|T1, T2, ..., TKl ) = log
i=1

e−λi λTi i Ti!

Kl

logL(λ|T1, T2, ..., TKl ) =

− λ + Tilogλ − log(Ti!)

i=1

Kl
logL(λ|T1, T2, ..., TKl ) = Klλi + Tilogλi
i=1

To ﬁnd the maximum likelihood parameter, the ﬁrst derivative is applied and solved to zero.

Kl

∂logL(λ|T1, T2, ..., TKl ) ∂λ

=

−Kl

+

Ti
i=1
λi

=

0

Kl

Ti

λi

=

i=1
Kl

, ∀i ∈ Kl

Hence, λi represents the optimal parameter estimation which proves that the optimal slicing decision is to consider the mean throughput of each slice members. However, slices are not equal in

9

terms of priority. Therefore, the resource on GWs will be dynamically allocated to the most urgent
l
slice starting by the channel with the highest reliability. Let Θi = λi/ Ti be the slicing rate based
i=1
200 on which the algorithm reserves for each slice a capacity ci,m = cm.Θi, ∀i ∈ L. Pseudo-code 2 summarizes the intra-slicing algorithm and starts with the most critical slice (line 2). Depending on
the slicing strategy, the algorithm equally reserves the bandwidth between slices based on a straight-
forward ﬁxed slicing (FS) (line 14-16) or estimates the needed throughput λi of all slice l members in the case of Dynamic Slicing (DS) strategy, deﬁnes Θl for channels reservation and reserve a part 205 of the bandwidth on all LoRa GWs in a similar manner (line 3-7). If the adaptive dynamic slicing
(ADS) was adopted, slicing rate of each slice Θl varies from a GW to another because in this case, MLE estimates throughput of each slice members deployed in the range of the corresponding GW m
(line 8-14). The algorithm moves next to the following slice, repeats the process and stops when no
resources are left for reservation.

Pseudo-code 2 Adaptive Dynamic Intra-Slicing Algorithm

Input : Capacities cm, cn; Number of slices L; Set of Throughput Requirements Tl
1 begin
2 Put slices in decreasing order based on priority spl if method=DS then

3

for each GW m do

4

for each slice l ∈ L do

5

Apply MLE Estimation based on the throughput

required by all slice l members

Deﬁne Slicing Rate Θl and Reserve capacity cl,m

6

end

7

end

8 else if method=ADS then

9

for each GW m do

10

for each slice l ∈ L do

11

Apply MLE Estimation based on the throughput

required by slice l members in the range of GW m

Deﬁne Slicing Rate Θl and Reserve capacity cl,m

12

end

13

end

14 else

15

Reserve capacity cl,m equally between slices

16 end

17 end Output: Set of resources reserved for each slice l

210 3.3. Intra-Slicing Resource Allocation Algorithm After deﬁning and reserving the radio resources for each slice, the goal in this section is to maximize
the utility function of slice members. Here, utility function for each slice is computed based on multiple criteria weights wr and wld for reliability and load respectively manipulated using the analytical and
10

hierarchy process (AHP) approach. The latter is proved as a very decent method for multi-criteria 215 decisions and was adopted in many applications [29].
Based on the QoS table proposed in Table 3, one can note that in IoT, devices can be classiﬁed into three categories:

QCI

SLice ID

5

1

Packet Delay Budget
<100 ms

Services
Surveillance and Emergency Alerting

Percentage of IoT ﬂows
10 %

1-2 2 100-1000 ms

Health Sensors

15 %

3-4 2 100-1000 ms Home Security System

15 %

6

3

>1000 ms

Smart Metering Applications

60 %

Table 3: Application Parameters [30]

High critical communications (HCC) slice: requires the highest slicing priority due to urgency and reliability requirements of its members, i.e: surveillance, emergency alerting and alarm monitoring. Based on Eq. 9, UHCC is computed to deﬁne the utility for critical communications with σr = SIN Rk,l,m/SIN Rmax the rate of reliability of SINR that a device k achieves on a ﬂow fk,l,m over the highest ﬂow reliability that can be achieved through slice l and δr, a binary variable that guarantees a minimum threshold when searching for the highest reliability links.

UHCC = δr(σrwr + σldwld) with δr ∈ {0, 1}

(9)

Medium critical communications (MCC) slice: requires lower priority consideration and are less

critical in terms of delay. This slice presents a trade-oﬀ between reliability and load, i.e: health sensors

and home security systems.

UMCC = σrwr + σldwld

(10)

Low critical communications (LCC) slice: requires the lowest priority due to their non-guaranteed data rate and delay-tolerant QoS requirements, i.e: smart metering applications.

ULCC = σldwld

(11)

The algorithm searches in each slice for the gateway that oﬀers the most robust and reliable link with lowest delay [31], ﬁnds the highest UHCC metric and allocates resources accordingly. Increasing 220 the number of devices will decrease the reliability of links due to congestion. In some cases, the most reliable link may be overloaded due to the increasing number of devices and should not be taken into consideration. Hence in Eq. 10, UMCC is deﬁned to search for the ﬂow that gives the best tradeoﬀ solution and oﬀers the highest reliability with the lowest possible load. And ﬁnally in Eq. 11, LCC slice includes delay-tolerant devices with high packet delay budgets. Therefore, only the load is 225 considered in the latter without taking reliability into consideration.
In Fig. 2, a directed network N = (V, E) is considered, where each device k is a source node s uploading traﬃc to external server considered as sink node t such that s, t ∈ V . Moreover, each GW

11

Figure 2: Flow modeling for IoT Network Slicing

m is considered as edge node and bounded by the amount of ﬂow allowed in each slice l. In the latter, the ﬂow that maximizes the utility function of each device k is selected. Without loss of generality, t 230 is assumed that no edges enter the sources or exist sinks. For each edge, the respective utilities Uk,l,m and Uk,l,m are computed in the network based on Eq. 12 below:

Uk,l,m = Uk,l,m + Uk,l,m

(12)

Each LoRa device k assigned to slice l searches for the most eﬃcient virtual ﬂow through GW m with the objective to ﬁnd the highest utility metric Uk,l,m as shown in the Pseudo-code 3 below.

Pseudo-code 3 Max-Utility Inter-Slice Resource Allocation

Input : Set of LoRa devices K, GWs M , slices L and ca-

pacity c

1 begin

2 Initialize ﬂow utilities to null for all e ∈ E

for each slice l ∈ L do

3

Put devices in decreasing order based on uk

for each device k ∈ Kl do

4

Draw network N (V, E)

Find path with the highest utility Uk,l,m

Allocate device k to fk,l,m

Update capacity cl,m

5

end

6 end

7 end

Output: Max-Utility ﬂows allocation for LoRa devices

12

4. Performance Evaluation

235

In uplink, centralized servers enable the opportunity to make eﬃcient slicing conﬁgurations based

on data traﬃc in the buﬀer of each LoRa device. In this work, LoRa model is adopted [19] to simulate

the network in the open source NS3 simulator [32]. For additional implementation details, we invite

the readers to check the work in [33] which includes a complete description of the model and integrate

it in NS3 platform. Each simulation is replicated 50 times and results are plotted with 95% conﬁdence

240 intervals with respect to the parameters shown in the ﬁrst section of Table 4.

Simulation Parameters

Simulation Time

300 seconds

Slicing Interval Time

50 seconds

Cell Radius

10 KM

Number of replications

50

MAC retransmissions

8

LoRa devices and GWs distribution Random Uniform

Propagation loss model

Log-distance

Bandwidth

125 kHz

Spreading Factor

{7,8,9,10,11,12}

Conﬁdence intervals

95%

European ISM sub-band

863-870 MHz

Power Consumption Parameters [21]

Battery Maximum Capacity

950 mAh

LoRa Supply Voltage

3.3V

Ampliﬁer Power’s added Eﬃciency 10%

Connected (Tx/Rx-SF7)

2 dBm

Connected (Tx/Rx-SF8)

5 dBm

Connected (Tx/Rx-SF9)

8 dBm

Connected (Tx/Rx-SF10)

10 dBm

Connected (Tx/Rx-SF11-12)

14 dBm

Standby

0.09 mW

Sleep

0 mW

Table 4: Simulation Parameters

The experiment is realized in a realistic LoRa scenario where devices are choosing a random time

for transmission but periodically uploading to LoRa servers small packet payloads that varies from

10 to 20 Bytes. Simulations start with 100 devices to emulate a load of one due to the legal duty-

cycle limitations of 1% in the European region [34]. The maximum number connected to a single

gateway is limited to 1000 devices following to the scalability study in [35]. LoRa servers allow 8 MAC

retransmissions for IoT devices before deﬁning a packet delivery failure. Moreover, LoRa devices and

gateways are both placed over a cell of 10 KM radius following to a uniform random distribution. Each

device is conﬁgured with spreading factors that varies from 7-12 when uploading traﬃc to LoRa GWs.

Each GW is characterized by 8 receiving channels in the 867-868 MHz european sub-band. Based on

the Eq. 13 below, energy consumption is evaluated when the number of LoRa devices increases in

each slice.

Ek,l,m

=

ptix + pri x V + epa

.dtx/rx

(13)

13

where Ek,l,m is the energy consumed by an IoT device, V the LoRa supply voltage, epa the ampliﬁer’s added eﬃciency, dtx the duration of transmission, pri x the power of reception and ptix the power of transmission that varies between 2 and 14 dBm based on the spreading factor i adopted. An energy module for LoRa module is integrated in NS3, inspired by the one that already exists for Wiﬁ, and is 245 characterized with speciﬁc energy parameters and power model for LoRa [21] as listed in the second section of Table 4 below.
4.1. Proof of Isolation
The very ﬁrst step before investigating slicing strategies is to prove the isolation concept. Assuming that all devices are uploading packets to a single LoRa GW. The number of LoRa devices is ﬁxed to 250 20 in HCC slice and the rest of devices in the network are assigned to M CC and LCC slices. Fig. 3 proves the isolation concept because when the number of devices increases in M CC and LCC slices, HCC members were not aﬀected and the percentage of packet loss rate (PLR%) remained constant and nearly null whereas PLR increased in M CC and HCC slices in a more congested scenario.

Figure 3: Proof of Isolation

4.2. SF Conﬁguration Variation

255

In this section, the performance of LoRa slices is evaluated with diﬀerent SF conﬁgurations for a

ﬁxed number of 300 devices. Three major slicing strategies are considered, namely static conﬁguration

where all devices in the cell are conﬁgured with the same SF, dynamic − random where each device

randomly picks a SF value and ﬁnally the dynamic − adaptive where each LoRa device estimates

the best SF conﬁguration depending on the receiving power measured from the gateway. In static

260 conﬁgurations, the test is repeated for each SF value. However, regarding dynamic conﬁgurations,

a device with a powerful receiving signal picks a small SF value whereas edge nodes are generally

conﬁgured with larger SF values. Table 5 and Table 6 summarize the mean PLR% for each SF

conﬁguration with a ﬁxed and variant packet transmission intervals respectively. Packets may be lost

14

when the gateway is saturated due to the load in the network (Congestion PLR%), due to co-channel 265 rejection (Interference PLR%) or due to lack of sensitivity when the packet is out of range or when it
doesn’t reach the gateway due to an appropriate SF conﬁguration (Sensitivity PLR%).

4.2.1. Fixed Packets Transmission Period In this subsection, a decent comparison is performed between SF conﬁguration methods for a
ﬁxed packet transmission interval. Each device randomly select a time for transmission and then 270 it periodically uploads a packet each 50s. static − SF 12 scored the highest PLR percentage. By
adopting this conﬁguration, packets transmitted occupy the spectrum for the longest time on air. Therefore, the highest impact on PLR% was reached due to congestion. Packets arrive at constant intervals and cannot be decoded due to gateway saturation. It is noteworthy to mention that no packets were lost due to lack of sensitivity because increasing the spreading factor increases at its turn 275 the range and the probability for successfully decoding a packet. Unlike static − SF 12, devices with static − SF 7 conﬁguration lost more than half of the packets. However this time, the main loss was due to lack of sensitivity for packets that are mainly transmitted by edge nodes and cannot reach the gateway because SF7 oﬀers the shortest range capability between SF conﬁgurations. Following these assumptions, one can now understand why static − SF 9 could be placed as a trade-oﬀ between range 280 and spectrum occupation with the best overall PLR% between the measured static conﬁgurations. As previously mentioned, increasing SF conﬁguration also increases the time occupation of packets sent, which also increases the interference PLR% because the probability of receiving packets with the same SF conﬁguration at the same time will also increase.

Mean PLR %
Sensitivity PLR %
Congestion PLR %
Interference PLR %

Slice Name
Overall
Overall HCC MCC LCC
Overall HCC MCC LCC
Overall HCC MCC LCC

Static SF7
54.14
76.14 17.99 26.98 55.03
22.16 0.12 0.41 99.47
0.89 7.45 42.40 50.15

SF8
39.24
61.75 17.90 26.91 55.20
32.35 0.62 1.75 97.63
4.87 11.85 42.21 45.83

SF9
39.03
28.84 17.99 25.97 56.04
53.78 2.91 9.42 87.66
16.15 13.35 40.01 46.64

SF10
43.93
2.06 19.74 24.21 56.05
63.61 6.91 30.65 62.44
33.32 15.33 35.88 48.78

SF11
78.19
0 0 0 0
61.9 11.08 46.75 42.17
37.30 16.44 30.08 53.48

SF12
94.15
0 0 0 0
69.53 15.9 49.76 34.34
30.47 20.05 28.01 51.95

Dynamic Random
43.02
19.63 18.73 27.75 53.52
69.51 8.99 36.28 54.73
9.84 16.16 35.12 48.72

Adaptive
30.07
0 0 0 0
86.43 8.48 34.76 56.76
12.39 15.43 36.29 48.28

Table 5: Packet Loss Rate Variation with various SF conﬁgurations

Table 5 illustrates PLR percentage for each category in each slice. Results show that dynamic − 285 adaptive conﬁguration was the most reliable technique because SFs are dynamically conﬁgured on LoRa
devices by measuring the receiving power that a GW gets from the device depending on its position. The advantages that the latter conﬁguration present are two-fold: ﬁrst, depending on how far the device is from the gateway, a smaller distance requires a smaller SF conﬁguration and secondly, the

15

fact of adopting diﬀerent SFs conﬁguration reduces interference PLR and the probability of collisions. 290 Regardless of the adopted SF conﬁguration method, the urgency character of HCC slice members
explains the low percentage in terms of PLR compared to M CC and LCC slices. Urgent packets are not sent as often as other slices which reduces the probability of packets collision.
4.2.2. Variant Packets Transmission Interval In Fig. 4, static − SF 9 is considered as the best static SF conﬁguration and is compared to
295 dynamic − random and dynamic − adaptive SF conﬁgurations when the packets transmission period increases. PLR increases in more congested scenarios. However, it is noteworthy that regardless of the adopted conﬁguration, increasing packets transmission interval decreases the intensity and the congestion in the network. This can be shown with the decreasing behavior of all conﬁgurations for a common set of devices simulated. static − SF 9 meets the performance conﬁguration for high
300 transmission intervals which proves the utility of the former in realistic scenarios where the congestion is normally higher due to the massive number of IoT devices. Moreover, reducing congestion had the same impact on slices. Detailed results are shown in Table 6 below. For each transmission interval, it is shown how the percentage of PLR is distributed on each slice. Moreover, increasing the transmission period decreased PLR percentage in all slices while having the smallest impact on HCC slice with the
305 highest reliability requirements.

(a) PLR Variation with Static-SF9 con- (b) PLR Variation with Dynamic- (c) PLR Variation with Dynamic-

ﬁguration

Random conﬁguration

Adaptive conﬁguration

Figure 4: Performance Study with/without considering load in metric calculations

4.3. Fixed (FS) vs Dynamic (DS) vs Adaptive-Dynamic (ADS) Slicing Following to previous simulations, dynamic − adaptive SF conﬁguration is adopted which has
proved its worthiness for this study. The goal in this section is to evaluate the performance of the f ixed (F S), dynamic (DS) and the adaptive−dynamic (ADS) slicing strategy. With F S, the number 310 of receiving paths is reserved in an equal manner and is compared to DS and ADS strategies where slicing decisions are performed using MLE throughput estimation for each slice starting with the one with the highest priority. Moreover, the impact of adding load metric to utility calculations is studied for each slicing strategy when the number of LoRa devices assigned to each slice increases. Each slice in a LoRa gateway suﬀers from congestion, decreasing with it the probability of successfully decoding 315 the packet. Simulation results in Fig. 5 prove the eﬃciency of load consideration when computing
16

PLR %
Sensitivity PLR %
Congestion PLR %
Interference PLR %

PTP (s)
20 40 60 80 100
20 40 60 80 100
20 40 60 80 100

Static-SF9 HCC MCC

24.68 20.35 19.97 18.23 17.32

22.98 25.81 24.15 24.22 23.92

11.57 8.00 5.77 3.95 3.13

45.75 37.26 24.71 13.74 8.33

15.92 15.82 15.56 14.50 14.42

32.20 35.53 37.12 38.37 38.14

LCC
52.34 53.84 55.88 58.46 57.85
42.68 54.74 69.52 82.31 88.55
51.88 48.65 47.32 47.13 47.44

Dynamic-random HCC MCC LCC

18.86 18.69 18.25 18.52 18.80

26.12 27.43 27.36 26.82 26.96

55.02 53.88 54.39 54.66 54.24

10.46 8.78 8.01 6.45 5.29

39.39 36.33 31.49 29.25 23.84

50.15 54.89 60.50 64.30 70.87

16.32 15.66 14.92 15.62 15.91

35.63 34.95 36.28 36.58 36.16

48.05 49.40 48.80 47.81 47.93

Dynamic-adaptive HCC MCC LCC

0

0

0

0

0

0

0

0

0

0

0

0

0

0

0

10.93 8.88 7.92 6.30 5.11

39.30 36.73 32.38 29.40 24.16

49.77 54.39 59.70 64.30 70.73

16.12 15.43 15.14 15.63 13.93

36.77 36.98 35.81 36.20 36.53

47.11 47.59 49.05 48.17 49.55

Table 6: Packet Loss Rate Variation with various SF conﬁgurations

the mean values of slices with and without considering load in metric calculations. Being load-aware improves reliability in the network. When congestion in the network increases, the traﬃc is balanced to the corresponding slice but on a less-loaded gateway. Reliability on all slices improved especially in LCC slice because its most of its members lose previously lost their packets due to congestion. In 320 a comparison between each slicing strategy, ADS with load consideration showed the most reliable performance for HCC and M CC slice as plotted in Fig. 5a and Fig. 5b respectively. This returns for example to the case of HCC slice where the sporadic nature of packet transmissions requires low latency and high reliability with unsteady throughput needs. Therefore, an appropriate estimation of throughput improves slicing and should be considered on each GW separately because it diﬀers 325 from a gateway to another. Moreover, Fig. 5b shows that considering load in metric calculations scored approximately 50% improvement in the PLR% of LCC slice members. However, this did not prevent ADS from being the lowest reliable strategy in LCC slice. The reason returns to the fact that ADS prioritizes a slice over another and reserves for it the needed bandwidth unlike F S where the bandwidth is equally reserved between slices. LCC members do not always get the needed bandwidth 330 required for transmission when a small capacity is ﬁxed for this slice. The performance of each slice is evaluated next using ADS with a load strategy in terms of energy consumption and the percentage of devices that respected their delay deadlines.
4.3.1. Percentage of Unserved nodes The eﬃciency of ADS is mainly shown in Fig. 6 below. With ADS, LoRa devices had the highest
335 percentage of devices that respected their delay deadlines compared to DS and F S strategies with an unserved rate that never exceeded 10% of the total number of packets transmitted. This highlights the importance of including urgency priority in slicing strategies and considering reliability in intra-slice resource allocation algorithm due to its direct impact on the spreading factor conﬁguration and the spectrum occupation time.

17

(a) HCC Slice PLR Variation

(b) MCC Slice PLR Variation

(c) LCC Slice PLR Variation

Figure 5: Packet Loss Rate in each Slice with various Slicing Strategies

Figure 6: Percentage of Unserved nodes

340 4.3.2. Jain’s Fairness Index

The goal of this study is to measure the metric that identiﬁes underutilized channels in each slice

with FS, DS and ADS strategies. Based on Eq. 14, we evaluate in Fig. 7 the Jain’s fairness index of

each slicing strategy as follows:

n

( xi)2

F airnessindex =

i=1 n

(14)

n x2i

i=1

where xi denotes the normalized throughput of each IoT device and n is the total number of active devices in each slice. Jain’s fairness index varies between 0 and 1 with 1 being perfectly fair. ADS

strategy provides the best distribution compared to DS and F S strategies as plotted in Fig. 7a and

Fig. 7b below. With F S strategy, resources are divided equally between HCC,M CC and LCC slices.

345 This explains fairness results of F S that are quite similar in all simulated slices. It is noteworthy to

mention performance degradation of ADS and DS strategies when moving from urgent to less urgent

slices. This is normal due to slicing priority consideration where resource reservation algorithm begins

18

with the most critical slice. However, ADS always had a clear upper hand over DS strategy in urgent slices except for LCC slice where less channels are reserved for its members as shown in Fig. 7c below.

(a) HCC Slice Fairness index

(b) MCC Slice Fairness index

(c) LCC Slice Fairness index

Figure 7: Fairness Evaluation in each Slice with various Slicing Strategies

350 4.3.3. Energy Consumption When increasing the number of nodes, the total energy consumed increases for all the simulated
slices, as plotted in Fig. 8 below. However, HCC slice always consumed less energy even when the number of its LoRa members increased. This returns to relation between SF and TP conﬁguration shown in in the second section of Table 4. Increasing SF will increase the transmission power and the 355 energy consumption of a slice member. Therefore, the consideration of reliability in utility calculations forces delay-sensitive devices to take the most reliable path with the lowest spreading factor values and transmission power compared to M CC and LCC slices.

Figure 8: Mean Energy Consumption Variation
19

5. Conclusion
In this paper, network slicing is evaluated in LoRa technology with the goal of maximizing utilities 360 in each LoRa slice. Therefore, static slicing is improved with an adaptive dynamic inter-slicing algo-
rithm that was proposed based on a maximum likelihood estimation. An intra-slicing algorithm is also introduced that improves resource allocation to meet the QoS requirements of each slice. Numerical results show the eﬀectiveness of the proposed adaptive dynamic slicing strategy and how it outperformed static and dynamic slicing and improved the eﬃciency of LoRa devices in terms of reliability, 365 energy consumption and the percentage of satisﬁed devices with regard to their delay requirements. However, there’s still a room to improve the proposed slicing strategy in terms of reliability and energy consumption. It would be interesting to focus in the future on improving the energy eﬃciency in LoRa network slicing, by optimizing LoRa parameters conﬁguration without degrading the QoS performance in the network.

370 References

1. Wixted, A.J., Kinnaird, P., Larijani, H., Tait, A., Ahmadinia, A., Strachan, N.. Evaluation of lora and lorawan for wireless sensor networks. In: SENSORS, 2016 IEEE. IEEE; 2016:1–3.

2. Li, L., Ren, J., Zhu, Q.. On the application of lora lpwan technology in sailing monitoring

system. In: Wireless On-demand Network Systems and Services (WONS), 2017 13th Annual

375

Conference on. IEEE; 2017:77–80.

3. Vatcharatiansakul, N., Tuwanut, P., Pornavalai, C.. Experimental performance evaluation of lorawan: A case study in bangkok. In: Computer Science and Software Engineering (JCSSE), 2017 14th International Joint Conference on. IEEE; 2017:1–4.

4. Mikhaylov, K., Pet¨aj¨aj¨arvi, J., Janhunen, J.. On lorawan scalability: Empirical evaluation of

380

susceptibility to inter-network interference. In: Networks and Communications (EuCNC), 2017

European Conference on. IEEE; 2017:1–6.

5. Georgiou, O., Raza, U.. Low power wide area network analysis: Can lora scale? IEEE Wireless Communications Letters 2017;6(2):162–165.

6. Bor, M.C., Roedig, U., Voigt, T., Alonso, J.M.. Do lora low-power wide-area networks scale?

385

In: Proceedings of the 19th ACM International Conference on Modeling, Analysis and Simulation

of Wireless and Mobile Systems. ACM; 2016:59–67.

7. Bor, M., Vidler, J.E., Roedig, U.. Lora for the internet of things. International Conference on Embedded Wireless Systems and Networks 2016;.

8. Croce, D., Gucciardo, M., Tinnirello, I., Garlisi, D., Mangione, S.. Impact of spreading

390

factor imperfect orthogonality in lora communications. In: International Tyrrhenian Workshop

on Digital Communication. Springer; 2017:165–179.

9. Waret, A., Kaneko, M., Guitton, A., Rachkidy, N.E.. Lora throughput analysis with imperfect spreading factor orthogonality. arXiv preprint arXiv:180306534 2018;.

20

10. Bor, M., Roedig, U.. Lora transmission parameter selection. International Conference on

395

Distributed Computing in Sensor Systems 2017;.

11. Lim, J.T., Han, Y.. Spreading factor allocation for massive connectivity in lora systems. IEEE Communications Letters 2018;22(4):800–803.

12. Nakao, A., Du, P., Kiriha, Y., Granelli, F., Gebremariam, A.A., Taleb, T., Bagaa, M.. End-toend network slicing for 5g mobile networks. Journal of Information Processing 2017;25:153–163.

400 13. Gadallah, Y., Ahmed, M.H., Elalamy, E.. Dynamic lte resource reservation for critical m2m deployments. Pervasive and Mobile Computing 2017;40:541–555.

14. Rezende, P.H., Madeira, E.R.. An adaptive network slicing for lte radio access networks. In: Wireless Days (WD), 2018. IEEE; 2018:68–73.

15. Hao, Y., Tian, D., Fortino, G., Zhang, J., Humar, I.. Network slicing technology in a 5g

405

wearable network. IEEE Communications Standards Magazine 2018;2(1):66–71.

16. Delgado, C., Canales, M., Ort´ın, J., G´allego, J.R., Redondi, A., Bousnina, S., Cesana, M.. Joint application admission control and network slicing in virtual sensor networks. IEEE Internet of Things Journal 2018;5(1):28–43.

17. Kalør, A.E., Guillaume, R., Nielsen, J.J., Mueller, A., Popovski, P.. Network slicing for ultra-

410

reliable low latency communication in industry 4.0 scenarios. arXiv preprint arXiv:170809132

2017;.

18. Adelantado, F., Vilajosana, X., Tuset-Peiro, P., Martinez, B., Melia-Segui, J., Watteyne, T.. Understanding the limits of lorawan. IEEE Communications Magazine 2017;55(9):34–40.

19. Magrin, D., Centenaro, M., Vangelista, L.. Performance evaluation of lora networks in a

415

smart city scenario. In: Communications (ICC), 2017 IEEE International Conference on. IEEE;

2017:1–7.

20. Group, I..W., et al. Ieee standard for local and metropolitan area networkspart 15.4: Low-rate wireless personal area networks (lr-wpans). IEEE Std 2011;802:4–2011.

21. Blenn, N., Kuipers, F.. Lorawan in the wild: Measurements from the things network. arXiv

420

preprint arXiv:170603086 2017;.

22. Goursaud, C., Gorce, J.M.. Dedicated networks for iot: Phy/mac state of the art and challenges. EAI endorsed transactions on Internet of Things 2015;.

23. Zuniga, J.C., Ponsard, B.. Sigfox system description. LPWAN@ IETF97, Nov 14th 2016;.

24. Ratasuk, R., Vejlgaard, B., Mangalvedhe, N., Ghosh, A.. Nb-iot system for m2m communi-

425

cation. In: Wireless Communications and Networking Conference (WCNC), 2016 IEEE. IEEE;

2016:1–5.

21

25. Cattani, M., Boano, C.A., R¨omer, K.. An experimental evaluation of the reliability of lora longrange low-power wireless communication. Journal of Sensor and Actuator Networks 2017;6(2):7.

26. Zhang, T., Ramakrishnan, R., Livny, M.. Birch: an eﬃcient data clustering method for very

430

large databases. In: ACM Sigmod Record ; vol. 25. ACM; 1996:103–114.

27. Zhang, T., Ramakrishnan, R., Livny, M.. Birch: A new data clustering algorithm and its applications. Data Mining and Knowledge Discovery 1997;1(2):141–182.

28. Fahad, A., Alshatri, N., Tari, Z., Alamri, A., Khalil, I., Zomaya, A.Y., Foufou, S., Bouras,

A.. A survey of clustering algorithms for big data: Taxonomy and empirical analysis. IEEE

435

transactions on emerging topics in computing 2014;2(3):267–279.

29. Vaidya, O.S., Kumar, S.. Analytic hierarchy process: An overview of applications. European Journal of operational research 2006;169(1):1–29.

30. AlQahtani, S.A.. Analysis and modelling of power consumption-aware priority-based schedul-

ing for m2m data aggregation over long-term-evolution networks. IET Communications

440

2017;11(2):177–184.

31. Rogier,

B..

Network performance : Links between latency throughput

and packet loss.

2016.

URL: https://www.performancevision.com/blog/

network-performance-links-between-latency-throughput-and-packet-loss/.

32. NSNAM, . ns-3.28 Documentation. https://www.nsnam.org/ns-3-28/; 2018. [Online; accessed

445

27-November-2018].

33. Magrin, D.. LoRaWAN Module Documentation. https://github.com/signetlabdei/lorawan/ blob/master/doc/lorawan.rst; 2016. [Online; accessed 27-November-2018].

34. Augustin, A., Yi, J., Clausen, T., Townsley, W.M.. A study of lora: Long range & low power networks for the internet of things. Sensors 2016;16(9):1466.

450 35. Haxhibeqiri, J., Van den Abeele, F., Moerman, I., Hoebeke, J.. Lora scalability: A simulation model based on interference measurements. Sensors 2017;17(6):1193.

22

Samir Dawaliby
Samir Dawaliby was born in 1991. He received his Master’s degree in network security and quality engineering from the University of Burgundy, in 2016. He is currently working toward the Ph.D. degree at the XLIM Laboratory. His research interests are in the areas of communications, machine-to-machine communications, internet of things and wireless networking, with emphasis on cross-layer design, optimal resource allocation, quality of service provisioning and link adaptation. Abbas Bradai
Abbas BRADAI [S’09, M’12] is currently working as an associate professor at university of Poitiers and a member of the XLIM research institute (CNRS UMR 7252) since September 2015. He received his Ph.D. from university of Bordeaux, France, in 2012. His research interests include multimedia communications over wired and wireless networks, IoT, software defined network and virtualization. He is/was involved in many French and European projects (FP7, H2020) such as ENVISION and VITAL. Yannis Pousset
Pousset Yannis was born in 1971. He received the Ph.D. degree in mobile radio communication from the University of Poitiers, in 1998. Since 2012, he is professor at the University of Poitiers in the department of electrical engineering. He develops its research activities in the XLIM laboratory. His research interests include the study of adaptive links related to the optimal transmission of multimedia content over realistic spatio-temporal radio channel.

Highlights
• Network slicing investigation over different SFs configuration in order to evaluate system performance and find the one that serves best LoRa devices in each slice.
• Dynamic inter-slicing proposition to reserve bandwidth of LoRa gateways based on a maximum likelihood estimation
• Extension of dynamic inter-slicing with an adaptive dynamic inter-slicing algorithm. • Integration of energy model for LoRaWAN in NS3 based on LoRa energy specifications. • An intra-slicing algorithm proposition that meets the QoS requirements of each slice in an isolated
manner. • Evaluation of different SF configurations for appropriate slicing decisions. • Performance comparison between network slicing strategies to analyze the energy consumed in
each slice.

