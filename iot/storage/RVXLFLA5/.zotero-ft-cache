Platform for eﬃcient and secure data collection and exploitation in intelligent vehicular networks
Tarek Bouali
To cite this version:
Tarek Bouali. Platform for eﬃcient and secure data collection and exploitation in intelligent vehicular networks. Databases [cs.DB]. Universit´e de Bourgogne, 2016. English. <NNT : 2016DIJOS003>. <tel-01385652>
HAL Id: tel-01385652 https://tel.archives-ouvertes.fr/tel-01385652
Submitted on 21 Oct 2016

HAL is a multi-disciplinary open access archive for the deposit and dissemination of scientiﬁc research documents, whether they are published or not. The documents may come from teaching and research institutions in France or abroad, or from public or private research centers.

L’archive ouverte pluridisciplinaire HAL, est destin´ee au d´epˆot et `a la diﬀusion de documents scientiﬁques de niveau recherche, publi´es ou non, ´emanant des ´etablissements d’enseignement et de recherche fran¸cais ou ´etrangers, des laboratoires publics ou priv´es.

Thèse de Doctorat
école doctorale sciences pour l’ingénieur et microtechniques
UNIVERSITÉ DE BOURGOGNE
Platform for efﬁcient and secure data collection and exploitation in intelligent vehicular networks
n TAREK BOUALI

Thèse de Doctorat

N◦ X X X

école doctorale sciences pour l’ingénieur et microtechniques
UNIVERSITÉ DE BOURGOGNE

THE` SE pre´ sente´ e par
TAREK BOUALI
pour obtenir le
Grade de Docteur de l’Universite´ de Bourgogne
Spe´ cialite´ : Informatique

Platform for efﬁcient and secure data collection and exploitation in intelligent vehicular networks

Soutenue publiquement le 29 Janvier 2016 devant le Jury compose´ de :

GUY PUJOLLE
VE´ RONIQUE VE` QUE
MARION BERBINEAU
YACINE GHAMRI-DOUDANE HOSSAM AFIFI EL-HASSANE AGLZIM
SIDI-MOHAMMED SENOUCI

Rapporteur
Rapporteur
Examinateur
Examinateur Examinateur Coencadrant
Directeur de the` se

Professeur a` l’Universite´ Pierre et Marie Curie, France Professeur a` l’Universite´ Paris Sud (Paris XI), France Directreur de recherche (DR) a` l’IFSTTAR, France Professeur a` l’Universite´ de La Rochelle, France Professeur a` Telecom Sud-Paris, France Maitre de Confe´ rences a` l’Universite´ de Bourgogne, France Professeur a` l’Universite´ de Bourgogne, France

DEDICATION
Praise to Allah, the most merciful god, for his guidance and the strength he gave me to come to the end of this thesis. This Work is dedicated To the best mother ever, my mother Mahbouba,
To my father EL Tayaa who has sacriﬁced everything to see me a happy and successful young man,
To my uncle Imed, my aunt Samia and her husband Abdallah who have always supported me, To my sister, my lovely sister Salwa,
To my brothers, Bassem, Mounir, Ali & Becem, To my ﬁance, the love of my life Amouna,
To my best friends Khalil, Nebras, Ali, Adel, Anis, Abdessami and Oussema who are like brothers that life has given me, To all my friends and people who love me.
Tarek
v

ACKNOWLEDGMENT
IOwe a great many thanks to a great many people who helped and supported me during the three years of this thesis. I would like to express my gratitude towards Pr. Sidi-Mohammed SENOUCI, my supervisor, for his kind and continuous support during this thesis, his patience, knowledge, enthusiasm and sympathy. He was like a friend, and for me it was a real pleasure to work with him because he was not only generous with his expertise and precious time during work, but also in the daily life. I am highly indebted to Dr. El-Hassane AGLZIM for his guidance and supervision without which achieving some aims would not be possible. Special thanks goes to all DRIVE laboratory team and ISAT employees who greeted me with empathy during the last three years. Special thanks goes, as well, to the reading committee for their precious time.
vii

CONTENTS

1 Introduction

1

1.1 Context & motivation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1

1.2 Methodology and contributions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2

1.3 Organization of the thesis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3

2 State of the art

5

2.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5

2.2 Data Collection in a vehicular network . . . . . . . . . . . . . . . . . . . . . . . . . 7

2.2.1 Topology-based routing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7

2.2.1.1 Proactive routing . . . . . . . . . . . . . . . . . . . . . . . . . . . 7

2.2.1.2 Reactive routing . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8

2.2.2 Position-based routing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9

2.2.2.1 Dissemination-based routing . . . . . . . . . . . . . . . . . . . . . 9

2.2.2.2 Hierarchical routing . . . . . . . . . . . . . . . . . . . . . . . . . . 10

2.2.2.3 Greedy routing . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11

2.2.3 Summary and discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13

2.3 Data exploitation in a vehicular network . . . . . . . . . . . . . . . . . . . . . . . . 13

2.3.1 Data fusion in a vehicular network . . . . . . . . . . . . . . . . . . . . . . . 13

2.3.1.1 Data fusion overview . . . . . . . . . . . . . . . . . . . . . . . . . 14

2.3.1.2 Data fusion in ITS applications . . . . . . . . . . . . . . . . . . . . 15

2.3.2 Network selection in a vehicular network . . . . . . . . . . . . . . . . . . . . 17

2.3.2.1 CALM standard overview . . . . . . . . . . . . . . . . . . . . . . . 18

2.3.2.2 Network selection techniques . . . . . . . . . . . . . . . . . . . . . 19

2.3.3 Summary and discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21

2.4 Security in a vehicular network . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22

2.4.1 Security attacks in VANET . . . . . . . . . . . . . . . . . . . . . . . . . . . 22

2.4.1.1 Network attack . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22

2.4.1.2 Application attack . . . . . . . . . . . . . . . . . . . . . . . . . . . 23

2.4.1.3 Timing attack . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23

ix

x

CONTENTS

2.4.1.4 Social attack . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 23 2.4.1.5 Monitoring attack . . . . . . . . . . . . . . . . . . . . . . . . . . . 23 2.4.2 IEEE1609.2 standard overview . . . . . . . . . . . . . . . . . . . . . . . . . 24 2.4.3 Certiﬁcate revocation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 25 2.4.4 Intrusion detection systems . . . . . . . . . . . . . . . . . . . . . . . . . . . 26 2.4.4.1 Entity-oriented trust model . . . . . . . . . . . . . . . . . . . . . . 27 2.4.4.2 Data-oriented trust model . . . . . . . . . . . . . . . . . . . . . . . 27 2.4.4.3 Hybrid trust model . . . . . . . . . . . . . . . . . . . . . . . . . . 29 2.4.5 Summary and discussion . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30 2.5 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31

3 Optimized deployment of data harvesters for urban sensing

33

3.1 Introduction & problem statement . . . . . . . . . . . . . . . . . . . . . . . . . . . 33

3.2 Optimization of Data Harvesters Deployment in Urban Area . . . . . . . . . . . . . . 34

3.2.1 Problem modeling . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 35

3.2.2 Optimization solution . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36

3.2.2.1 Construction heuristic . . . . . . . . . . . . . . . . . . . . . . . . . 37

3.2.2.2 Neighborhood heuristic . . . . . . . . . . . . . . . . . . . . . . . . 38

3.3 Performance evaluation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39

3.3.1 Case study . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39

3.3.2 Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39

3.4 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 41

4 Secure data collection in a vehicular network

43

4.1 Introduction & problem statement . . . . . . . . . . . . . . . . . . . . . . . . . . . 43

4.2 GyTAR overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45

4.3 Secure intersection-based routing protocol for data collection in urban vehicular networks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 45

4.3.1 Protocol description . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 46

4.3.1.1 Reputation & trust model . . . . . . . . . . . . . . . . . . . . . . . 46

4.3.1.2 Periodic gathering of trafﬁc data & routing . . . . . . . . . . . . . . 47

4.3.2 Performance evaluation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 50

4.3.2.1 Simulation environment . . . . . . . . . . . . . . . . . . . . . . . . 51

4.3.2.2 Simulation results & analysis . . . . . . . . . . . . . . . . . . . . . 51

4.4 A distributed detection and prevention scheme from malicious nodes in vehicular networks (IPDS) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54

CONTENTS

xi

4.4.1 Kalman ﬁlter overview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 54 4.4.2 Network monitoring & behavior prediction in IPDS . . . . . . . . . . . . . . . 55
4.4.2.1 Monitoring architecture . . . . . . . . . . . . . . . . . . . . . . . . 56 4.4.2.2 Experience-Based Trust . . . . . . . . . . . . . . . . . . . . . . . 57 4.4.2.3 Recommendation-based trust . . . . . . . . . . . . . . . . . . . . 61 4.4.2.4 Recommenders’ choice policy . . . . . . . . . . . . . . . . . . . . 61 4.4.2.5 Trust level prediction & classiﬁcation . . . . . . . . . . . . . . . . . 64 4.4.3 Performance evaluation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67 4.4.3.1 Security analysis . . . . . . . . . . . . . . . . . . . . . . . . . . . 67 4.4.3.2 Simulation environment . . . . . . . . . . . . . . . . . . . . . . . . 68 4.4.3.3 Experimental results & analysis . . . . . . . . . . . . . . . . . . . 69 4.5 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 71

5 Efﬁcient data exploitation in a vehicular network

73

5.1 Introduction & problem statement . . . . . . . . . . . . . . . . . . . . . . . . . . . 73

5.2 Itinerary planning service for smart cities . . . . . . . . . . . . . . . . . . . . . . . 75

5.2.1 Itinerary planning architecture . . . . . . . . . . . . . . . . . . . . . . . . . 75

5.2.1.1 Itinerary planning data exchange . . . . . . . . . . . . . . . . . . . 77

5.2.1.2 Itinerary planning data analysis . . . . . . . . . . . . . . . . . . . . 78

5.2.2 Proof of concept . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 81

5.3 Fuzzy logic-based communication medium selection for QoS preservation . . . . . . 84

5.3.1 Fuzzy logic-based network selection mechanism . . . . . . . . . . . . . . . 85

5.3.1.1 Global architecture . . . . . . . . . . . . . . . . . . . . . . . . . . 85

5.3.1.2 Network inference system (NIS) . . . . . . . . . . . . . . . . . . . 86

5.3.1.3 Network weighting inference system (NWIS) . . . . . . . . . . . . . 87

5.3.1.4 Network selection inference system (NSIS) . . . . . . . . . . . . . 88

5.3.2 Performance evaluation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 89

5.3.2.1 Environment description . . . . . . . . . . . . . . . . . . . . . . . 89

5.3.2.2 Results and analysis . . . . . . . . . . . . . . . . . . . . . . . . . 90

5.4 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 92

6 Conclusion and perspectives

95

6.1 Conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95

6.2 Perspectives . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 96

7 Publications

99

xii

CONTENTS

Glossary

117

I Appendix

119

A Game theory deployment for attack prediction in a vehicular network

121

A.1 Introduction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121

A.2 Background & detection policy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122

A.2.1 Network architecture . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 122

A.2.2 Attack model & detection policy . . . . . . . . . . . . . . . . . . . . . . . . 123

A.3 Malicious behavior prediction based on game theory . . . . . . . . . . . . . . . . . 124

A.3.1 Game formulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 125

A.3.2 Malicious behavior prediction . . . . . . . . . . . . . . . . . . . . . . . . . 126

A.3.3 Vehicles categorization . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 126

A.4 Performance evaluation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127

A.4.1 Environment description . . . . . . . . . . . . . . . . . . . . . . . . . . . . 127

A.4.2 Optimal probabilities thresholds . . . . . . . . . . . . . . . . . . . . . . . . 128

A.4.3 Results . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129

A.4.3.1 Accuracy prediction . . . . . . . . . . . . . . . . . . . . . . . . . . 129

A.4.3.2 Overhead . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 129

A.5 conclusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 130

1
INTRODUCTION
1.1/ CONTEXT & MOTIVATION
The great development and evolution of communication technologies together with the variety and potential availability of network access mediums and service providers have led to the appearance of the heterogeneous network concept. This paradigm mainly refers to the seamless and ubiquitous inter-operability between multi-coverage protocols with different access techniques. It offers for mobile nodes featured with Wi-Fi, bluetooth and Long Term Evolution (LTE) the ability to beneﬁt from services and Internet connection anywhere at anytime. Vehicles are not as deprived of this development and car manufacturers are interested in deploying a universal communication module called On-Board Unit (OBU) into vehicles for Intelligent Transportation System (ITS) which is able to support various kind of communication technologies and interface with the embedded sensors. This OBU is, also enhanced with a new technology standardized by the Electrical and Electronics Engineers (IEEE) and dedicated for short range opportunistic communication namely 802.11p/G5 to ease the exchange between high speed vehicles. This development has led to the appearance
of the connected intelligent car concept with intra- and inter-vehicle communication capabilities.
The evolution in the automotive area has also touched vehicles sensing capabilities, thanks to the increasing development and evolution of embedded technologies and integrated sensors and cameras which are being deployed in a massive way internally in new cars engines for diagnostics and externally for potential control and perception of the surroundings. This unprecedented growth in communication techniques together with sensing technologies stimulate the emergence of a large amount of applications and services that aim to enhance driving conditions, increase awareness and bring efﬁcient trafﬁc management (trafﬁc monitoring, congestion detection and control, etc.), road safety (accident detection, collision avoidance, etc.) and infotainment (Gaming, video streaming, messaging, etc.). These applications are mainly based on the massive data collection and exchange between vehicles and deployed infrastructure in the network using speciﬁc wireless communication protocols and their analysis using speciﬁc techniques to increase reliability and user beneﬁts; two challenging tasks that are difﬁcult to handle, especially, in non reliable environment with speciﬁc characteristics (frequent changing topology, vehicles speed and frequent fragmentation) that are highly exposed to security threats. In fact, data generated by embedded sensors and cameras have speciﬁc characteristics namely heterogeneity due to the variety of architectures and types of used sensors, redundancy resulting from the notiﬁcation of the same event from different information sources, incompleteness because of limited visibility of sensors and massive size due to the existence of several data sources. To analyze efﬁciently these data and extract valuable information that could be exploited by different types of applications and stakeholders (driver, passenger, etc.), it is vital to apply speciﬁc mechanisms dedicated to process big data according to application requirements. To exchange these data, used protocols are mainly based on Vehicle-to-
1

2

CHAPTER 1. INTRODUCTION

Vehicle (V2V) to establish communication between vehicles and Vehicle-to-Infrastructure (V2I) for an exchange between a vehicle and a ﬁxed infrastructure in the road. However, and due to the big size of the ﬂowing data, it is impossible to exchange them with others at once because V2V and V2I communications are opportunistic, occasional and not long lasting [156]. For this reason, it is always important to reduce the size of exchanged data and choose urgent and representative sets to be exchanged based on predeﬁned techniques. Security, also, remains a weak link in vehicular networks since they are by nature vulnerable to various types of attacks (spooﬁng, Denial of Service (DoS), etc.). This security problem is due to the lack of infrastructure for authentication and also the fact that all vehicles are equivalent and should play the role of routers in order to exchange data between all parties, which is necessary for a proper functioning of the network. Hence, in the presence of attackers, reliable and trustworthy operations of such networks become impossible without securing data exchange and analysis.

1.2/ METHODOLOGY AND CONTRIBUTIONS
In the context presented in the previous section, we aim to beneﬁt from the huge development witnessed by the automotive area and available communication technologies namely their interoperability while targeting to decrease negative effects caused by vehicular network speciﬁc characteristics. Therefore, we target to address emerging challenges related to data collection, exploitation and security to bring effective answers to these questions: how to collect and carry efﬁciently sensed data from vehicles? how to ensure their security? and how to analyze and exploit them via new innovative applications. For this reason, we propose in this thesis to take advantage from the vehicle capabilities to sense and communicate with others to design and develop a platform for secure and efﬁcient data collection & exploitation to provide a reliable and accurate ﬂow of data in a vehicular environment; a ﬂow that could be easily analyzed and exploited at different levels by vehicular applications.
In this thesis, we start our study by taking a closer look at the communication capabilities present in a vehicular network and used to exchange the collected data between vehicles and between a vehicle and infrastructure namely V2V and V2I. However, both V2V and V2I techniques suffer from problems related to connectivity and data security due to the previously described aspects of a vehicular network. Several techniques were proposed in the literature to overcome these problems. Nevertheless, current contributions still require further investigations especially in the security aspect because they assume that all nodes in the network are cooperating, which is not always the case. In addition, some of them neglect the fact of network fragmentation and real trafﬁc information while others rely on an excessive deployment and exploitation of infrastructure, which highly impact their performances. Therefore, we focus in the ﬁrst part of this thesis on the data collection process in vehicular networks to make it more efﬁcient and secure. We hence propose as a ﬁrst contribution the use of an optimized number of data harvesters to collect a set of data, that depends on the application, while traveling in a speciﬁed area. This centralized solution offers the possibility for a manager to deploy a ﬂeet of vehicles in a rapid manner to get a global overview of a speciﬁed region while respecting applications constraint regarding time rigidity. It could be efﬁciently deployed in urban sensing applications to collect information about free parking lots for example or accidents to decrease passive trafﬁc and congestions. In addition, emergency scenarios, where infrastructure lacks, are among the important use cases of the proposed solution because it helps to collect data about damages, survivors’ location, etc. and assess efﬁcient and secure plans for rescue missions. However, data collected by every harvester should be communicated to the manager to be efﬁciently treated and take actions and counter measures (e.g. rescue missions planiﬁcation

1.3. ORGANIZATION OF THE THESIS

3

in a damaged area). For this aim, we propose in our second contribution a secure intersectionbased routing protocol (Secure Greedy Trafﬁc Aware Routing Protocol (S-GyTAR)) which takes into account real-time trafﬁc information and controls the cooperativeness degree of vehicles and their behavior in a completely decentralized manner to deliver data from a source to a destination. This protocol relies only on non malicious vehicles to relay collected data to the destination and deploy a position prediction technique to choose the best forwarder among them along a road segment. It also, envisages a store and forward technique to recover from disconnections in sparse networks. But, one security problem still persists, which is the long lasting vulnerability window that may affect running applications and increase losses. Thus, we enhance the protocol with a new Intrusion Detection and Prevention System (IPDS) able to predict attacks and reduce their impact on the network reliability.
In the second part of this thesis, we extend our study to investigate possible ways to exploit, treat and analyze data collected from a vehicular network to provide efﬁcient and reliable applications for users (driver, ﬂeet manager, etc.). Indeed, intelligent transportation applications differ in the way they consider data and require various levels of data analysis and variables Quality of Service (QoS) levels to perform well and enhance driving conditions. Thus, we propose new solutions and services to cope with vehicular network users and application requirements. In our ﬁrst contribution under the umbrella of data analysis, we develop a new itinerary planning application with the aim of enhancing trip conditions, giving good view about roads topology and preserving money and time. This application offers to its users the most accurate way to plan trips by considering the important factors that may affect their traveling mode. The application is accessible via our secure protocol (S-GyTAR) and performs based on the data collected from vehicles or from the infrastructure. However, it may occur that a user is in a sparse network where no relay could be found and the store and forward technique causes waiting delays. For this reason, we propose our ﬁnal contribution that consists in a Fuzzy Logic-Based communication medium selection mechanism for QoS preservation in a vehicular network. This spatio-temporal mechanism is based on real-time data collection from the network, application requirements and user preferences, to select the best communication medium among available ones in a seamless and smooth manner to preserve connections continuity of the running applications and protect the QoS applications’ requirements.
1.3/ ORGANIZATION OF THE THESIS
Except, the introduction and conclusion, this thesis is composed of four major parts which are presented by four chapters in the following manner:
Chapter 2: State of the art, reviews the context of our thesis and the related existing solutions. It is composed of three parts. In the ﬁrst part, we expose different types of data collection protocols in a vehicular network. Second, we present techniques used for data analysis and their exploitation to design useful vehicular applications. Then, we review solutions proposed to enhance the QoS for these applications namely network selection. In the third part, we highlight the different security threats that may be faced in a vehicular network and expose the different techniques proposed in the literature to face them. Finally, we conclude the chapter with a discussion about the different works and motivate our contributions.
Chapter 3: Optimized deployment of data harvesters for urban sensing, represents our ﬁrst contribution in this thesis. In this chapter, we propose a new solution for data gathering in a speciﬁed region for urban sensing applications. It proposes to deploy the optimized number of data harvesters that will travel this region and collect a set of data, that depends on the application, and send them to a central third party. Our focus in this contribution is the optimization of data

4

CHAPTER 1. INTRODUCTION

harvesters deployment, where we, ﬁrstly, model the problem mathematically, then solve it.
Chapter 4: Secure data collection in a vehicular network, in which we propose, at ﬁrst, a secure intersection-based routing protocol (S-GyTAR) which considers real-time trafﬁc information in the data exchange process and offers a new mechanism to monitor communicating vehicles, detect possible attacks and evict attackers from the network. In a second step, we propose a new IPDS to monitor vehicles, detect and predict attacks to enhance vehicles security and protect their exchanged data.
Chapter 5: Efﬁcient data exploitation in a vehicular network, represents our last area of contributions in this thesis, in which we deal with data exploitation and analysis to ﬁrstly, design a new application service to ﬁnd the most economic itinerary and have a global overview about travel conditions. Afterward, a second contribution is proposed with the aim to enhance applications QoS based on the analysis of the collected data, which consists in a fuzzy logic-based network selection mechanism for quality of service preservation.

2
STATE OF THE ART
2.1/ INTRODUCTION
The automotive area is witnessing a tremendous evolution since the creation of the ﬁrst car in the world with the aim of facilitating the human life and enhancing his comfort. In fact, the number of vehicles all over the world keeps always increasing and has been multiplied thousands of times since the world war reaching more than one billion car traveling in the planet by the end of 2010 [171]. Although, it has handled many problems related to travel duration and possibility to transport big things and led to an economic growth, the potential increase of vehicles number in the world has created new types of problems and challenges which require to be treated. Trafﬁc congestion and jams caused by the concentration of a big number of vehicles in a small area highly impact the behavior of drivers and lead to losses in time and fuel consumption. In addition, the high speed of vehicles together with bad weather conditions may decrease the visibility of drivers and lead to dramatic events such as mortal accidents. Safety reports indicate that worldwide the total number of road trafﬁc deaths remains unacceptably high at 1.24 million per year and between 20 and 50 millions suffer non-fatal injuries [93]. These problems have pushed car manufacturers and research communities to investigate new ways to ﬁnd solutions and alleviate their impacts. One of the best directions, they went into, is the increase of drivers awareness about their environment to enable them prevent possible problems. For this reason, car manufacturers are till now in a crazy race to instrument their new vehicles with the most recent technologies. Therefore, modern vehicles are being a kind of mobile agents which are able to feel, see and speak thanks to the increasing availability of navigation systems, embedded sensors and newly standardized communication technologies leading to the appearance of a new concept namely Cooperative Intelligent Transport Systems and Services (C-ITS) [99] [84] [100]. In fact, vehicles are being equipped with a set of internal sensors able to collect and inform the driver about their internal functioning such as speed, fuel level, coolant temperature, engine status, etc. and a number of external sensors and cameras which are responsible of the identiﬁcation of trafﬁc density, weather conditions, etc. Furthermore, they include also a universal communication module called OBU which consists of WiFi, IR, Dedicated Short Range Communication (DSRC), 2G/3G/4G radio, a memory set, a Global Positioning System (GPS) receiver and a processor to communicate with each others and exchange information with infrastructure. Using both V2V and V2I communications, C-ITS will enable cooperation between vehicles and road infrastructure in order to achieve improvements in the areas of safety, mobility, and environment. This cooperation is based on the principle that all parties (vehicles, road side units, etc.) exchange information and make use of them afterward to offer new services (realtime trafﬁc information, improved road safety, etc.). However, the development of this technology creates new challenges and questions: how to collect, treat and exchange these information in such highly dynamic network? and how to secure the communication between all the parties?
5

6

CHAPTER 2. STATE OF THE ART

In fact, the speciﬁc characteristics of the data collected by vehicle’s embedded sensors and cameras (heterogeneity, redundancy, incompleteness and massive size) make its analysis to extract valuable information and its exploitation to develop reliable applications very challenging and create new issues that require the application of speciﬁc mechanisms able to process such kind of data. Its big size, also, makes its carrying and exchange between all communicating parts via V2V and V2I very hard and sometimes impossible due to the opportunistic, occasional and not long lasting characteristics of these communication capabilities.
Furthermore, the security aspect has been always considered among the hard tasks to deal with especially in wireless networks because opening connections to others expose the data and its holder to various kinds of attacks. Vehicles beneﬁt from an always open connection to ease their exchange of the sensed data which makes them vulnerable by nature to malicious behaviors and easy targets to attackers due to the importance of the data they hold. Hence, it is vital to secure the data exchange and analysis in such non trustworthy networks.
Several projects of high importance were initiated during last years in Europe to deal with problems related to data collection, exploitation and security for Vehicular Ad-hoc Networks (VANETs). Car2Car communication consortium 1 which was created by six European car manufacturers to enhance the road safety and trafﬁc management by exploiting inter-vehicles communications. Its main objectives are: (1) the standardization of V2V communications based on wireless LAN components, (2) the development of road safety application prototypes, and (3) the deﬁnition of an exclusive frequency band for Car2Car applications in Europe. NOW (Network-on-Wheels) 2 is a German project joining the efforts of industry and academia to solve key issues related to communication protocols and data security. This project highly cooperates with Car2Car and aims to create communication protocols and security algorithms in vehicular networks. CVIS (Cooperative Vehicle-Infrastructure System) 3 is a European research and development project joining the efforts of sixty partners of manufacturers and academics, and intended to design technologies to enable continuous communications between cars and the car and infrastructure. DRIVE C2X 4 and FOTsis (Field Operational Test on Safe, Intelligent and Sustainable Road Operation) 5 are other co-funded European projects that target to deal with communication, data management and security issues in ITS. Other national projects are also initiated by the french government to enhance and test vehicular communication capabilities such as SCORE@F (Syste` me Coope´ ratif Routier Expe´ rimental @ France) 6 and SCOOP@F (Projet de de´ ploiement pilote de syste` mes de transport intelligents coope´ ratifs) 7. One of the most recent European projects treating problems related to vehicular network communications is CarCoDe 8 (December 2013-December 2015) which aims to create a platform for secure and efﬁcient content delivery between vehicles.
In this chapter, we aim to present current communication techniques and protocols designed for both data collection & analysis and security issues & counter measures to face them in a vehicular network since we aim to deal with these problems in our work and propose new techniques to this aim. Therefore, we ﬁrstly introduce data collection concept and review the different architectures and protocols designed in the literature to handle the exchange between the different actors of a vehicular network. Then, we investigate techniques designed for data exploitation and analysis. Finally, we highlight the security issues that threaten vehicular networks and summarize counter
1Car2Car communication consortium, https://www.car-2-car.org/index.php?id=5. 2NOW (Network on weels), https://dsn.tm.kit.edu/english/projects now-project.php. 3http://www.cvisproject.org. 4http://ertico.com/projects/drive-c2x. 5http://www.fotsis.com. 6https://project.inria.fr/scoref. 7http://www.developpement-durable.gouv.fr/SCOOP-F-Projet-de-deploiement.html. 8ITEA3-CARCODE, https://itea3.org/project/carcode.html.

2.2. DATA COLLECTION IN A VEHICULAR NETWORK

7

measures and algorithms designed to face them.
2.2/ DATA COLLECTION IN A VEHICULAR NETWORK
A car may be deﬁned, nowadays, as a set of non limited capabilities sensors that are able to detect and analyze a huge variety of data. With the appearance and emergence of on-board units in newly designed cars, collected data are exchanged between vehicles at each encounter while traveling in the road topology using the newly standardized technique IEEE802.11p [161] or cellular capabilities such as Universal Mobile Telecommunications System (UMTS) [16] or LTE [151] offered by the OBU. Several architectures and protocols have been deﬁned to support data collection and exchange between vehicles. However and due to their high mobility and unpredictable frequent change of topology, vehicles are usually delegated to themselves and are self-organized with the help of central third parties. So, a network organization could be either decentralized selforganized without any use of external infrastructure, centralized self-organized where a central third party (e.g Road Side Unit (RSU), eNodeB, Base Station (BS), etc.) is in charge of vehicles’ organization management or hybrid where the network management is shared between mobile vehicles and central infrastructures. Data exchange between network members is handled using routing protocols and forwarding strategies based on V2V, V2I and Infrastructure-to-Vehicle (I2V) communications. Various kinds of protocols were proposed in the literature to handle data routing. Many works have surveyed data collection architectures and routing protocols proposed in the VANET ﬁeld [162, 104, 147, 106]. These protocols are mainly classiﬁed by [104] into two categories: (i) topology-based where information about existing links in the network are used to perform packet forwarding and (ii) position-based (or geographic) where neighboring location information are used to forward packets. In the following, we discuss routing techniques belonging to each class.
2.2.1/ TOPOLOGY-BASED ROUTING
Topology-based routing techniques use global information about the network topology and communication links to handle the data exchange between communicating nodes. In fact, link states and routing tables are exchanged between neighbors to discover and maintain routes between a source and destination. These types of protocols were ﬁrstly designed for Mobile Ad-hoc Networks (MANETs) which are characterized by the limited mobility and low speed of their nodes. Vehicular ad hoc networks are a kind of MANETs, but due to their speciﬁc characteristics namely the unpredictable frequently changing topology and vehicles speed, protocols developed for MANETs couldn’t be directly applied to them. For this reason, various alternatives are slightly modiﬁed to ﬁt VANET requirements. Two types of protocols lie under the umbrella of topology-based routing; (i) proactive routing and (ii) reactive routing.
2.2.1.1/ PROACTIVE ROUTING
They are also called table-driven routing techniques. In such kind of routing, routes to destinations are built, maintained and continuously refreshed by periodically distributing routing tables through the network. OLSR (Optimized Link State Routing) was proposed by Toutouh et al. in [146] and is based on the periodic ﬂooding of control information using special nodes acting as Multipoint Relays (MPRs) to maintain fresh routes to destinations. Automatic optimization tools are used to get optimal routes. This protocol is suitable for applications requiring short transmission delays because routes are already established. It is also able to manage multiple addresses of a host and

8

CHAPTER 2. STATE OF THE ART

make it act as a gateway for other nodes in the network. OLSR performs based on three types of messages: (i) HELLO, (ii) Topology Control (TC) and Multiple Interface Declaration (MID). Namboodiri and Gao proposed the Prediction-Based Routing protocol (PBR) [63] where they predict vehicles motion to create new routes before link breakage, preserve vehicles’ connections and offer a high packet delivery ratio. This kind of routing requires a high density of deployed gateways and risks disconnection in highways where density is low. DSDV (Destination Sequence Distance Vector) [7] was proposed by Perkins et al. to solve loops problems of routes by the use of sequence numbers. Its data are organized into two tables, namely a routing table and setting time table. The routing table is used to store addresses and sequence numbers of all nodes in the network with the next hop to each one and route metric. The time setting table is used to maintain the time of update advertisements for each destination and the selection of the freshest routes. FSR (Fisheye State Routing) [23] is also a link state protocol which aims at minimizing the routing update in large networks. This is done based on the exchange of link state entries only with immediate neighbors in adapted frequencies based on nodes’ distance (entries that are further away are broadcasted in lower frequencies than closer ones). Despite their usefulness in applications requiring short communication delays, proactive routing suffers from routing overheads due to the frequent ﬂooding of the network with link states to update routes. In addition to that, they couldn’t be applied to vehicular networks when vehicles are moving at a high speed because the entries in routing tables are valid only for a very short period of time, unless refreshing them at a high rate which is not acceptable for scalability reasons.

2.2.1.2/ REACTIVE ROUTING
This kind of routing is based on the opening of a route for a node to communicate with another only when needed. It usually contains a route discovery phase where a query packet is broadcast in the network. Therefore, a route is determined hop-by-hop to a destination. Reactive routing is considered to be very efﬁcient regarding packet delivery ratio. In [129], authors developed a reactive content broadcasting protocol in which they deploy FLUTE (File Delivery over Unidirectional Transport) [38] to support multimedia-based information delivery to passing-by vehicles in an urban environment. TORA (Temporally Ordered Routing Algorithm) [15] is based on the building of a direct acyclic graph (DAG) toward the destination. The DAG is built based on a query packet broadcasting where each neighbor replies only if it has a downward link to the destination. RBVT-R (Road Based Vehicular Trafﬁc Reactive protocol) [90] is based on a route discovery mechanism using route request and route reply messages and deploys the store and forward technique to recover from packet loss in case of broken links between nodes. SADV (Static-node assisted Adaptive data Dissemination protocol for Vehicular networks) [57] is based on the use of static nodes deployed into intersections to relay trafﬁc between vehicles and optimize delays. So, they receive packets from moving vehicles in their radio ranges and send them whenever an optimal route to the destination is detected. In this protocol, multipath routing is used to reduce the delay. AODV (Ad hoc On Demand distance Vector) [17] was modiﬁed resulting two alternatives namely PRAODV and PRAODVM [37] where the lifetime of an established link is estimated based on the speed and location of the vehicle. PRAODV establishes a new link before the ﬁrst one breaks down while PRAODVM chooses the shortest path with maximum predicted life time. Several other reactive protocols were also proposed aiming to enhance the delivery ratio and end-to-end communication delay such as AID [111], eMDR [135], MDD [135], HFED [143], NDMR [86] and QoS Aware [134] which combines the use of MPLS and AODV. However and despite its efﬁciency regarding the delivery ratio of packets, reactive routing is usually affected by the frequently changing topology of the network and high speed of nodes which increase introduced overhead to build and maintain routes.

2.2. DATA COLLECTION IN A VEHICULAR NETWORK

9

2.2.2/ POSITION-BASED ROUTING
The routing strategy in this kind of protocols is based on information about neighbors’ locations instead of link states and routing tables. Therefore, moving vehicles in the network exchange information about their locations with neighbors based on a periodic exchange of short status messages or beacons (also called HELLO messages). Beacons, generally, contain such information as speed, position and vehicle state, from which a cooperative awareness can be constructed. The message format is standardized in the European ITS VANET Protocol (EIVP) [69] Cooperative Awareness Message (CAM) and is deﬁned to be broadcast on a periodic basis. It is of great use in the data forwarding process in position-based routing. Three techniques are identiﬁed in such kind of routing:(ii) Dissemination-based routing, (ii) hierarchical routing and (iii) Greedy routing.
2.2.2.1/ DISSEMINATION-BASED ROUTING
It designates data forwarding from a source to a set of destinations or geographic area based on multi-hop communications while minimizing forwarding delays and ensuring good data relaying. Several dissemination protocols were recently proposed for data delivery in vehicular networks [164]. IVG (Inter-vehicle Geocast)[28] was proposed to overcome frequent changing network topologies by introducing dynamic relays to disseminate alerts. It is based on the temporary and periodic deﬁnition of a multicast group of vehicles that are in a risk area (accident, obstacle, etc.) to inform them about a detected danger in a highway. MDDV [39] (Mobility-Centric Data Dissemination Algorithm for Vehicular Networks) is a diffusion algorithm which considers vehicles unaware about their neighbors’ positions. For this reason, the network is presented by an oriented weighted graph where weights designate distances and trafﬁc density between intersections and the chosen path to relay trafﬁc to destination is the one with minimum sum of weights. In DV-CAST [66], data dissemination is treated in three kinds of VANET densities: dense, regular and sparse. A timerbased technique is proposed to support data forwarding in a dense trafﬁc and a multi-diffusion role-based technique is proposed for data dissemination in a sparse network. A regular network is considered as a mixture of vehicles detecting dense trafﬁc and vehicles detecting sparse trafﬁc and the combination of the two techniques ﬁtting each type are used together. In [40], an opportunistic resource discovery mechanism is proposed where vehicles in the network are exchanging information. The protocol uses a spatio-temporal relevance function to sort resources (parking spaces, trafﬁc information, etc.) and save only relevant ones, thus limiting the distribution of a resource to a bounded area and to the duration for which the resource is of interest. So far, the continuous exchange of information causing overhead could be limited. UMB (Urban Multihop Protocol) [34] beneﬁts from RTB/CTB (same principle as RTS/CTS in CSMA) to choose the farthest node as a packet forwarder. In urban areas, the protocol assumes the existence of special ﬁxed stations called repeaters at every intersection to disseminate trafﬁc in all directions. AMB (Ad hoc Multihop Broadcast protocol) [49] is a distributed version of UMB where the role of repeaters is delegated to vehicles within intersections. In DHVN (Dissemination Protocol for Heterogeneous Cooperative Vehicular Networks) [141], authors exploit vehicles with bigger radio ranges and heights to relay packets to a speciﬁc area. The basic idea of this work is that each node receiving a packet arms a timer, inversely proportional to the sum of its height and range, which means that the higher node with bigger radio range will ﬁrstly forward the packet. Other vehicles hearing the forwarded packet stop their timers and stop the relaying process. This technique allows a packet to reach the farthest point in the network. A probabilistic dissemination protocol was also proposed in VANET called OAPB (Optimized Adaptive Probabilistic Broadcast) [41] where a packet forwarder is chosen based on a calculated probability in function of distance to the transmitter or neighbor density. Dissemination techniques, in general, enhance the packet delivery ratio and decrease delays, however

10

CHAPTER 2. STATE OF THE ART

they are very challenging regarding the choice of packet relays to avoid network ﬂooding and solve scalability problems despite the ameliorated techniques deployed for this aim.

2.2.2.2/ HIERARCHICAL ROUTING
They are also known by cluster-based routing where vehicles in the network are organized into clusters with a speciﬁc node elected to play the role of a cluster head (CH) and manage cluster members. The CH could be either a ﬁxed infrastructure (e.g. eNodeB, RSU, etc.) or a mobile vehicle whereas the size of a cluster is variable (1 to k-hops). The packet exchange between clusters is handled by a vehicle which belongs to two adjacent clusters. Several variants of routing protocols in the literature are cluster-based. LORA CBR (Location Routing Algorithm with ClusterBased Flooding)[46] is a cluster-based ﬂooding protocol in which the CH is in charge of destination location searching by broadcasting location requests and replies (LREQ, LREP) like in AODV. So, a vehicle wanting to send data to a destination should request the route from the CH. In [125], a fault tolerant service discovery protocol was proposed where a set of ﬁxed road side routers are clustered to locate a service provider (restaurants, parking lot, hotels, etc.) in a region of interest deﬁned by a service requester (vehicle) in its request. The protocol is mainly based on the grouping of a set of road side routers near service providers into a cluster to enable the diffusion of advertised services and ease their localization and access to moving vehicles. TrafﬁcGather [68] is a completely decentralized mechanism which beneﬁts from the network organization into cluster spaces to gather and enable data exchange between nodes. However, it is not very suitable in a sparse network and engenders an important overhead because it is based on a ﬂooding algorithm. In [112], an efﬁcient clustering algorithm named (Vehicular clustering based on Weighted Clustering Algorithm) VWCA was proposed where the cluster head is chosen based on neighbors number, vehicles direction and trust level to increase the cluster stability. In VWCA, the transmission range of a vehicle is adjusted adaptively based on the number of its neighbors, thus increased when the number is low and decreased when it is high. Therefore, the opportunities to ﬁnd a packet relay are increased. The protocol was also enhanced with a mechanism for malicious vehicles detection to build and update trust levels. PassCAR (Passive Clustering Aided Routing protocol) [157] organizes vehicles into clusters with one CH and gateways to connect them. In this work, routing is based on route request/reply messages broadcasting where the route selection is a multi-metric based strategy which considers links reliability, stability and sustainability. In COIN (Clustering for Open IVC networks) [29], the cluster head election is based on vehicular dynamics, driver intentions and oscillations of inter-vehicle distances to increase the network stability. MDDC (Multi agent Driven Dynamic Clustering) [138] introduces the use of mobile and static agents to form a moving dynamic cluster between intersections and deliver a rapid response. Vehicle speed, direction, connectivity degree and mobility patterns are considered in this clustering technique. In IPS (Information Propagation Scheme)[44], authors exploit cluster-based message dissemination in an opportunistic manner to route packets between nodes in the network. In [132], [36] [92] [117] and [144], some hybrid architectures were proposed for network organization and data forwarding. They are almost based on the same idea but with different techniques where the network is organized into clusters managed by either an RSU, a base station (BS) or eNodeB and the data is chained from one CH to another in a multi-hop way. Cluster-based routing aims essentially to enhance data delivery to destinations, however it suffers from cluster instability and needs techniques to avoid network inundation. Thus, centralized self-organized architectures require the excessive deployment of central third parties to manage clusters which is not obvious due to their high cost, whereas decentralized organizations are hard to build and maintain because of network mobility.

2.2. DATA COLLECTION IN A VEHICULAR NETWORK

11

2.2.2.3/ GREEDY ROUTING
Greedy techniques are based on the principle of choosing the closest vehicle to destination as a packet forwarder. However, in some cases, the packet carrier is the closest one to destination leading to a local maximum problem. For this reason, a store and forward (SNF) (also called carry and forward - CNF) is used to recover from potential disconnections where the packet is carried by a node while moving until ﬁnding a neighbor who ﬁts the forwarding conditions. Various protocols were proposed based on greedy forwarding. GPSR (Greedy Perimeter Stateless Routing) [20] was the ﬁrst greedy protocol developed for VANET which is based on two forwarding methods: greedy forwarding and perimeter forwarding. This protocol exploits locations of 1-hop neighbors to make forwarding decisions. It uses the greedy forwarding to nodes that are always progressively closer to destination until it reaches a local maximum to switch to perimeter technique for recovering. GSR (Geographic Source Routing) [30] was proposed to solve problems related to GPSR and exploits street maps to get the city topology. It uses essentially dijkstra’s shortest path algorithm to deﬁne the junctions to be traversed by a packet from its source to destination. SAR (Spatially Aware Packet Routing) [31] uses GSR to compute a path to a destination and embeds the given shortest path into the header of all packets. At every hop, the relay node should search the neighbor with shortest path to destination based on GSR in spite of sending packet to the closest node to destination. A-STAR (Anchor-based Street and Trafﬁc Aware Routing) [35] is also based on street maps and waypoints called anchors which are chosen to be inserted into packets’ headers. This protocol utilizes statistically related maps to identify city bus routes and dynamically related maps to monitor the latest trafﬁc condition. Both maps are used to ﬁnd the best anchor paths. GPCR (Greedy Perimeter Coordinator Routing)[45] aims to enhance GPSR performances by exploring a restricted greedy forwarding procedure and a repair strategy. Unlike GPSR, the routing decision in GPCR is made within junctions where a packet is forwarded along a street until reaching a node in a junction to decide about the next one it should be routed through. GVGrid [52] is an on-demand routing protocol designed especially for city topologies. It divides the geographical area into uniform-size squares called grids and constructs routes from a source to destination based on them by assuming that nodes in the same grid or neighbor grids are able to hear from each other. VADD (Vehicleassisted data delivery) [81] was designed for delay tolerant applications and based on the principle of carry and forward with predictable mobility. The contention-based forwarding algorithm (CBF)[88] utilizes a distributed contention process based on the current positions of all neighbors to select the next hop. To avoid packet duplication, an area-based suppression algorithm is used. DGRP (Directional Greedy Routing Protocol) [73], RIPR (Reliability-Improving Position-based Routing) [121], GPUR (Greedy Perimeter Urban Routing) [120] and GpsrJ+ [61] are among alternatives proposed to enhance the GPSR protocol where the two ﬁrst take into account directions, velocities and positions of 1-hop neighbors to select a relay node while the third and fourth consider 2-hop neighboring information and greedy perimeter routing to make decisions. In RDGR (Reliable Directional Greedy Routing) [110], the selection of packet forwarders which have progress towards destination is based on the combination of all neighbors information namely: position, speed, direction and link stability. In addition to mobility information, GPGR (Grid-based Predictive Geographical Routing) [130] employs knowledge about the road topology provided by a static street map to better route packets between nodes. In CAR (Connectivity Aware Routing) [64], authors deploy the AODV-based mechanism for route discovery combined with the advanced greedy forwarding technique to relay route replies and data packets. In the route discovery phase, vehicles within intersections deﬁne themselves as anchors to relay trafﬁc. Hereafter, the chosen anchors are stacked into packets to make forwarding decisions. Some speciﬁc nodes are designated by the protocol as guards used to redirect packets to destination to recover from mobility problems.
Some enhanced techniques for greedy routing have also seen light in the recent years to remedy

12

CHAPTER 2. STATE OF THE ART

from frequent changing trafﬁc concentration problems. Their major contribution is the consideration of real time trafﬁc in the routing process. STAR (Spatial and Trafﬁc Aware Routing) [43] offers this possibility and exploits street topology information given by geographic information systems and information about vehicular trafﬁc in order to perform accurate routing decisions. Trafﬁc information are collected based on beacons exchange between vehicles containing data about neighbors. GyTAR [60] is an intersection-based routing protocol where decisions are made within intersections about the closest one to a destination through which a packet should pass such as in GPCR. However, GyTAR takes into account real-time trafﬁc and a combination between road density and distance to destination to select the best intersection to send packet to. In fact, authors in GyTAR divide the road topology into segments limited by intersections and segments into small ﬁxed subsegments having the size of a vehicle radio range. In these subsegments vehicles are organized into 1-hop clusters where the cluster head computes its neighbors and sends their number to other cluster heads for update when it reaches the end of a segment. This technique allows to have an idea about the distribution of vehicles in a segment and alleviate the network overhead. The way GyTAR is collecting real-time trafﬁc will be the source of our inspiration when proposing our own protocol in chapter 4. RIVER (Reliable Inter-VEhicular Routing) [127] also considers real-time trafﬁc gathering and street topology to make reliable routing decisions.
To recover from problems related to local maximums in the greedy forwarding technique, several mechanisms were proposed by the routing protocols. Among them, we ﬁnd PBR-DV (Position Based Routing with Distance Vector Recovery) [104] which exploits the technique of ﬂooding requests to neighbors by the packet carrier until reaching a node closer to destination. GRANT (Greedy Routing with Abstract Neighbor Table) [79] proposes the storage of data related to a set of neighbors and selects the best relay node based on a multiplication between the distance of packet carrier and its neighbor and the neighbor and destination. Therefore, the best node to be chosen should have the lowest metric. LOUVRE (Landmark Overlays for Urban Vehicular Routing Environment) [75] introduces the construction of overlays between nodes in the network which are maintained until the network density is less than a threshold. This protocol has a global knowledge about all connected roads density which makes an overlay last for long time. In GeoSVR (Geographic Stateless VANET Routing) [158], authors aim essentially to solve the local maximum problem in sparse networks by proposing two algorithms; optimal forwarding path and restricted forwarding. The ﬁrst one aims to choose the optimal forwarding path with highest probability to contain more vehicles between a source and a destination while the second targets to choose the next hop. To solve loops problems, LCR [48] proposes to initiate a recursive search on adjacent faces every time a loop is detected while GeoCross [105] uses street maps and records roads and junctions a packet has traveled and unroutable road segments. GeoSpray [167] combines the store-and-forward technique together with geographic location of nodes available via GPS devices to make routing decisions. In ROAMER (ROAdside unit MEssage Routers in VANETs) [142], a new technique to enhance greedy routing is proposed based on RSUs deployment to route packets and increase the forwarding range of vehicles. All the greedy routing protocols proposed for vehicular networks aim to enhance packet forwarding between highly mobile nodes in a frequently changing topology. They propose various mechanisms to recover from potential problems related to local maximum and loops, and thus increase the packet delivery ratio and decrease the end-to-end communication delays. So far, they are being the most investigated techniques in the VANET area especially after the great enhancement of communication, localization and sensing technologies which have highly contributed to their advancement.

2.3. DATA EXPLOITATION IN A VEHICULAR NETWORK

13

2.2.3/ SUMMARY AND DISCUSSION
Data collection techniques in a vehicular network with its organization strategies and routing protocols mentioned in section 2.2 relies on a cooperative approach where each node in the network accepts to relay information with the aim of ameliorating security in roads or decreasing travel time and fuel consumption. These protocols aim to limit the number of communicating nodes in order to avoid ﬂooding the network with redundant non useful messages and ease the network monitoring and control. Almost of them rely on the complete building of routes to destinations whereas others only select the next forwarder in an intelligent way.
Various kinds of important and heterogeneous information which are of different priorities and related to different kinds of application are exchanged between vehicles using the reviewed protocols, thus leading to several problems related to quality of service and exploitation complexity in such dynamic network. In the next section, we discuss data exploitation techniques namely data fusion and network selection used for data analysis and quality of service preservation.

2.3/ DATA EXPLOITATION IN A VEHICULAR NETWORK
A vehicular environment is a heterogeneous network that encompasses various kinds of access technologies and connected objects. A big amount of data is ﬂowing in such kind of networks due to the increasing number of traveling vehicles, deployed infrastructure and connected sensors. Cooperative Intelligent Transportation System (C-ITS) applications mainly rely on the periodic and continuous collection and analysis of these data from the network. However, their usage differs from application to application regarding the context and time tolerance, leading to complexity in data exploitation techniques. These applications are classiﬁed into three types that use data differently [103]; (i) Transportation (trafﬁc) safety, (ii) transportation efﬁciency, and (iii) user services (infotainment). In fact, data related to trafﬁc safety and efﬁciency are time-constrained and require a quick delivery, whereas some other kinds of application seems to be more tolerant to delays. However, the delivery delay of data is always highly inﬂuenced by the characteristics of the communication technology. For this reason, collected data by embedded sensors in the vehicle should be exploited depending on application requirements before to be stored and exchanged with others using a reliable access medium to meet required QoS and time constraints. Data fusion was among the techniques that appeared to deal with data exploitation and analysis whereas the QoS preservation and application continuity are handled using network selection and handover mechanisms. We provide in the current section details about techniques that are used for data exploitation and QoS management. So, we ﬁrstly provide an overview about data analysis techniques namely data fusion. Then, we detail techniques for access management and handover handling.
2.3.1/ DATA FUSION IN A VEHICULAR NETWORK
Sensor measurements, images and videos are not of great use if they are treated and analyzed separately, without considering correlation between them and their environment. Resulting information are usually distilled into decisions on actions to be taken on the environment, and historical information regarding these actions can be combined to build links between them and decrease the size of the stored data and messages exchanged over the network. Data fusion appeared to enhance this scenario. It aims to enhance data presentation and understanding, and plan for actions on the environment. In the following, we give an overview about the data fusion concept, then we review some of the fusion techniques proposed in VANET to enhance ITS applications.

14

CHAPTER 2. STATE OF THE ART

2.3.1.1/ DATA FUSION OVERVIEW
The huge deployment of various kinds of sensors and cameras in several domains such as military, automotive, daily human life, smart cities, wildlife habitat monitoring and other ﬁelds for surveillance and reconnaissance terms leads to the generation of heterogeneous data coming from different sources, which make the analysis and scene identiﬁcation tasks more complex for the analyzer. The data fusion concept has been deployed to normalize, combine and exploit heterogeneous data from different sources to get coherent descriptions of scenes and situations that could be reused by automated systems or humans to make enhanced calculations and bring up meaningful decisions. In fact, data measured by electrical or mechanical systems are always exposed to external noise and errors related to the environment, and internal errors introduced by the elementary components of the system (warming, usury, etc.) and imperfect calibrations. Data fusion comes to leverage correlation between different data sources, to minimize noise and solve other problems[154]. Data fusion was ﬁrstly introduced by the Joint Directors of Laboratories (JDL) in collaboration with the U.S Department of Defence (DoD) for military aims. They opted for this technique to protect their troops by increasing the accuracy and efﬁciency of threats and targets identiﬁcation leveraging multiple deployed resources (cameras, satellite, GPS, etc.) [18]. Their proposal identiﬁed the different steps of a fusion process that is still used as a reference model. This model organizes the fusion process into ﬁve levels based on the reﬁnement degree of the treated data: a preprocessing phase, then a reﬁnement of objects, situations, threats and processes. It was designed to ﬁt tactical targeting applications and, even when it did not keep the same terminology in other application areas, the way it organizes the data exploitation & analysis process is either the original one or an adaptation of it. The processing degree of the data used in characterization, the type of characterization and the type of characterized entities in the fusion process are the parameters considered to deﬁne each fusion level depending on the treated application.
- Level 0- Preprocessing: At this level, data collected from the different resources are organized and normalized before their treatment,
- Level 1- Object Assessment: At this level, a set of procedures are applied to the data given by the preprocessing phase. These procedures include spatio-temporal alignment, correlation, clustering, false positives removal, identity fusion and combination of features extracted from images. Therefore, the inputs are transformed into consistent data structures,
- Level 2- Situation Assessment: It consists on a higher level inference based on the given objects’ descriptions resulted from level 1. In fact, objects are combined and relations are identiﬁed to determine their signiﬁcance into a speciﬁc environment. So, the main aim of this phase is the identiﬁcation of activities and events based on the relations built between objects and their environment,
- Level 3- Impact Assessment: This level considers the study of potential risks that could be caused by the previously identiﬁed activities. Therefore, it is the level of threat evaluation and counter measures planning,
- Level 4- Process reﬁnement: It is the resource management process where task scheduling and priority management are being processed to enhance the efﬁciency of decisions making and reactions.
A more generalized model describing the hierarchy of the data fusion process that could be applied to all application ﬁelds was proposed by Dasarthy in [12]. It is a ﬁve-level model that was inspired from the JDL model and based its categorization on the presentation of inputs and outputs given at each stage of data processing. It excludes terminologies ambiguity appearing in the ﬁrst model and gives a clear overview about the fusion degree of gathered data. In the following we describe

2.3. DATA EXPLOITATION IN A VEHICULAR NETWORK

15

the different levels of this model.
1- Data In-Data Out (DAI-DAO): It corresponds to the preprocessing phase of the JDL model where incoming data from different sources are treated and reﬁned separately without any combination. At this level, basic functions and algorithms are applied to the gathered data such as signal ampliﬁcation and redundancy elimination in text data,
2- Data In-Feature Out (DAI-FEO): At this level, data with the same type of presentation are analyzed and treated together to extract the feature they could present in the environment. This fusion process is similar to the level 1 of the JDL model,
3- Feature In-Feature Out (FEI-FEO): This fusion level consists of the combination and analysis of all features resulted from previous grouped data to give clear and meaningful descriptions of an event or situation in the network,
4- Feature In-Decision Out (FEI-DEO): At this level, the given feature descriptions are introduced in a decision making system to clear the situation and plan for possible actions that could be taken,
5- Decision In-Decision Out (DEI-DEO): As a ﬁnal processing for the data, possible decisions given by the previous fusion level are combined and matched together and with other previous stored decisions to result a ﬁnal action to be taken to face an event or abnormal situation in the environment and react about that.
2.3.1.2/ DATA FUSION IN ITS APPLICATIONS
El Faouzi et al. have demonstrated in [115] the need for data fusion to enhance proposed ITS applications and meet the required efﬁciency and reliability for passengers safety and reduced transportation time and fuel consumption. In fact, all ITS applications rely on the massive use of sensors and other more or less sophisticated data collection means such as cameras and RMTS (Remote Trafﬁc Microwave Sensor) to manage and control vehicles functions, trafﬁc status and weather conditions. Information given by the different sources should be combined to give an accurate view for application users. In the same work, authors have also identiﬁed some kinds of ITS applications that mostly require data fusion processes and studied the applicability challenges of fusion together with the techniques that could be applied. Three types of algorithms that are used to deal with data fusion in the literature, have been identiﬁed:
- Statistical based data fusion techniques: They are the simplest deployed techniques in the data fusion process but not always suitable especially when data is very complex. Weighted combination and arithmetic means approach are among the most used techniques under this category,
- Probabilistic based data fusion techniques: These include the Bayesian approach, maximum likelihood methods, possibility theory and evidential theory,
- Artiﬁcial Intelligence based data fusion techniques: Neural networks, fuzzy logic, Kalman ﬁlter, genetic algorithms and machine learning are widely used in data fusion processing which include some intelligent techniques and rules to exploit and analyze data. They were employed by many works treating safety applications in VANET such as [59] which deploys Support Vector Machine (SVM) for vision-based vehicle detection and classiﬁcation and [53] that exploits Convolutional Neural Networks for pedestrian detection.
Vehicle diagnostic, trafﬁc engineering, safety and tracking are the most inﬂuenced ﬁelds by data fusion process where advanced traveler information system (ATIS), automatic incident detection (AID), advanced driver assistance (ADAS), network control, crash analysis and prevention, trafﬁc forecast and monitoring, etc. consider to investigate the data fusion concept in their architectures.

16

CHAPTER 2. STATE OF THE ART

In [56] and [25], the problem of engine diagnostics of a vehicle and fault detection is treated, where the Dempster-Shafer evidence theory is explored to fuse data coming from various sensors that are internally deployed into the vehicle’s engine and compared to the estimated normal behavior to detect surging problems in the engine.
Advanced traveler information system is one of the ITS applications that offers users integrated traveler information. Various kinds of information sources and techniques to exchange collected data are used to manage trafﬁc conditions and derive relevant indicators to assist drivers and enhance its awareness about driving conditions. This system always considers the travel time as the metric reﬂecting routes status, thus detecting potential congestions. A plethora of frameworks dealing with the travel time estimation under ATIS were proposed. ADVANCE [6] [5] [8] is an in-vehicle ATIS providing route guidance in real time that operates in the northwestern portion and northwest suburbs of Chicago. This system considers probe vehicles to generate dynamic travel information about considered routes. It combines data from loop detectors and travel time reports of probe vehicles using a three-stage fusion technique; the ﬁrst fusion algorithm deals with probe reports sparsity based on regression methods, the second algorithm considers to treat received probes using Bayesian methods, and the ﬁnal stage is based on inference rules to analyze supersaturated conditions. In [22] and [89] a fusion based mechanism is proposed by El Faouzi et al. to accurately estimate the travel time. The Dempster-Shafer evidence theory is deployed to fuse data incoming from different sources due to its ability to solve problems related to imprecision and uncertainty of data. In the ﬁrst work, data from conventional induction loop sensors (essentially ﬂow and occupancy measurements) and data from probe vehicles are considered whereas in the second one fused data is gathered from inductive loop road sensors and toll collection stations. In these proposals, the time estimate is considered as a classiﬁcation problem where times are broken into classes and treated then combined into a one confusion matrix. A recent architecture [137] for vehicles localization to enhance driving and congestion detection is proposed using a dissemination algorithm and data fusion of various information collected from sensors. Information gathered from vehicle’s local sensors and received from neighbors (vehicles or RSU) are combined in a probabilistic manner using a Bayesian ﬁltering model implemented based on an extended Kalman ﬁlter and particle ﬁlter (PF). The fusion algorithms result an estimate about the future position of a vehicle, thus predicting its trajectories to avoid congested roads.
Automatic incident detection is among the most challenging issues encountered in vehicular networks due to its impact on drivers and passengers safety. It has also snatched interest of researchers after the appearance and proliferation of new embedded sensors able to monitor the vehicle’s surroundings and report abnormal events. This kind of ITS application has also beneﬁtted from data fusion to accurately ensure safety [55]. Dempster-Shafer evidence, Bayesian inference and voting logic are the most used in the data fusion process. In [10], an automatic incident detection system is proposed based on real time data collection and combination from special equipped probe vehicles and inductive loop detectors deployed in streets. Neural network algorithms were exploited in the data fusion process. Two fusion types were proposed in this work; the ﬁrst is based on the direct combination of information from all sources to produce a single decision about the presence or absence of incidents on each link, whereas in the second, separate incident-detection algorithms individually preprocess data from each source, reporting outputs that are combined using a neural network. Several variants of neural network representations are studied in [13]. The applicability of Dempster-Shafer inference in trafﬁc management to support incident detection is studied in [21]. This technique is used to eliminate data uncertainty and false alerts about events declared by deployed sources. So, knowledge from different sources are combined and treated using Dempster rules to verify the exactness of an incident. In [11], the automatic incident detection is treated as a multiple attributes decision making (MADM) optimization problem with Bayesian

2.3. DATA EXPLOITATION IN A VEHICULAR NETWORK

17

scores. The authors propose an approach which utilizes the combination of probe travel times, number of probe reports, detector occupancies and volume as attributes of their MADM algorithm. In [82], a probabilistic automatic incident detection technique under sparse and moderate trafﬁc ﬂows is proposed based on Bayesian networks. The proposed technique aims to efﬁciently exploit vehicle communication capabilities to enhance incident detection in non dense networks while considering lane change as the consequence of an incident. In this work vehicles are assumed to have GPS and local event data recorder used to store records about lane changes.
Data fusion was also deployed for driver assistance, network monitoring and post crash alerting systems with the aim of enhancing ITS safety applications and reduce traveling time. A cooperative architecture based on vehicles information data fusion is proposed in [160]. A multi-level fusion method is used; a low-level fuzzy clustering-based algorithm that combines atomic messages and abstract key attributes (features level fusion), and a high-level modiﬁed BPA-based (basic probability assignment) evidence theory used to avoid misjudgment caused by short-term wait events (e.g. trafﬁc lights) and enhance the accuracy of the ﬁnal decision (decisions level fusion). In the low-level fusion, messages containing basic information such as speed, location, generation time, etc. received from neighbors during a time period are aggregated and clustered based on fuzzyclustering rules regarding features similarities where an abnormal event is detected. Decisions given by the fuzzy-clustering rules are enhanced based on probabilistic aggregation in the highlevel fusion module. The proposed architecture in this work mainly aims to detect congestion and abnormal events in a road to assist drivers. In [152], a high level information fusion architecture through a fuzzy extension to multi-entity Bayesian networks is proposed to enhance drivers awareness about crushes, thus avoiding collisions. The architecture considers semantic data extraction to build causal relationships between the existing entities in a speciﬁc context. For this reason, web ontology language is used to model contexts and Bayesian networks with the fuzzy rules are used to manage data uncertainty and ambiguity respectively. The basic idea behind this high level information fusion is the combination of all actors that could inﬂuence a decision making and model their relations before making a decision and view it to a driver. In a recent study [123], human factors are taken into consideration while classifying safety messages. Based on the fact that a driver may not be able to receive more than one service in a short period of time and would be unable to deal with a new service until he has ﬁnished responding or reacting to the current one, authors propose a multilevel fusion architecture (low and high levels) to not bombard the driver with alerting messages. The low level data fusion aims to check the correctness of incoming data and reduce the congestion in the wireless medium, while the high level is responsible for the application of human factors to choose the messages to view to drivers from the queue. Received warning messages are modeled by utility functions associated with their location, generation time and modality which are later combined to get the global utility function, whereas the familiarity of the driver with a message is used to introduce human factors. The combination of the two models results the most critical message to be ﬁrstly viewed to the driver to be treated.

2.3.2/ NETWORK SELECTION IN A VEHICULAR NETWORK
Intelligent transportation systems, in general, rely on radio services for communications and use specialized technologies (Wireless, DSRC, Tetrapol, 3G, etc.). However, their supported applications are highly inﬂuenced by the quality of service degradation in the used communication technology. The QoS may depend on various conditions mainly related to the network status and vehicles motion. In fact, the speed of vehicles and the vehicular network organization characterized by its fragmentation (dense with congestion or sparse with no relays) and frequent topology changes make preserving high QoS or even access to user applications a very challenging issue in such

18

CHAPTER 2. STATE OF THE ART

kind of networks. In the early years, with the appearance of new standards in the world (European Telecommunications Standard Institute (ETSI)-ITS, ISO/TC204, etc.) for ITS communications, it is now possible to have various inter-operable access technologies in the same communication stack of one node. The Communication Access for Land Mobiles (CALM) standard [96] which was established by the International Organization for Standardization (ISO) in 1993 covering activities in ITS, represents the result of a worldwide standardization effort including Europe, Asia and United states and offers the possibility of co-existence between several variants of communication technologies (WiFi, 3G/4G, DSRC, etc.). However, the inter-switch between these technologies, which is also known in the literature by vertical handover (VHO), still represents an open area for research because it has to be done in a smooth and seamless manner to preserve running applications from disruption, thus protecting user data and ensuring service continuity. CALM proposed an open architecture to manage switching between available networks, however it does not deﬁne any speciﬁc algorithms or techniques to do the job. In the following, we begin with a short overview about the CALM standard and its architecture to manage available access technologies, then we review some of the proposed techniques in the literature dealing with the vertical handover.

2.3.2.1/ CALM STANDARD OVERVIEW
CALM standard is a general communication system that includes all types of ITS communications and normalized related protocols, which was proposed by ISO/TC204 WG16. The standard mainly aims to enable a software platform that incorporates multiple communication mediums (2G/3G/4G, UMTS, DSRC, etc.) and manages the vertical handover between them to allow connection continuity and beneﬁt from the best available characteristics (use of the best medium). CALM is a layered architecture derived from the OSI model which provides so called cross-layer functionalities to manage inter-layers exchange. It comprises an application layer that contains all ITS applications, the facilities playing the role of OSI layers 5, 6 and 7, a networking and transport layer representing OSI layers 3 and 4 and an access layer which encompasses functionalities of OSI layers 1 and 2 and manages access networks. It is, also characterized by two entities to manage and secure the communication protocol stack namely the management and security entities. The management entity is in charge of the conﬁguration of an ITS station, cross-layer information exchange among the different layers and other beneﬁcial tasks. The security entity provides security and privacy services including secure messages at different layers of the communication stack, identities management and security credentials, and aspect for secure platforms (ﬁrewall, security gateway, temper-proof hardware). The global architecture of an ITS node as described by the OSI CALM standard is provided by ﬁgure 2.1.
The inter-operability and handover between the different available communication interfaces (CI) is managed in the access layer with the consideration of information gathered from other layers via the management entity. This task is performed based on a speciﬁc architecture able to collect data from different layers and exploit them to ﬁnd the best interface. The CALM CI management architecture, described by Fig.2.2, includes six components: (i) user application requirement list deﬁning the speciﬁc parameters needed by applications, (ii) Man Machine Interface (MMI) used to specify user preferences, (iii) a set of rules to treat the different inputs and weight parameters, (iv) CI/VCI status list providing real time performance parameters from all available communication interfaces, (v) CI selection module to weight communication interfaces and give a ﬁnal decision about the best one and (vi) network attributes determined by the designated access network and generic service characteristics.

2.3. DATA EXPLOITATION IN A VEHICULAR NETWORK

19

Figure 2.1 – ISO CLAM architecture
2.3.2.2/ NETWORK SELECTION TECHNIQUES
Vertical handover (network selection), unlike horizontal handover, depends on various criteria related to networks, applications and users such as service cost, mobile node speed and quality of service. In the literature, and unlike VANETs, mobile wireless sensor networks have witnessed the development of a plethora of mechanisms dealing with vertical handover. They could be deployed in vehicular environments, however with degradations in performances. The received signal strength intensity (RSSI) at a used medium was considered in [67] to decide about handover initiation for a video streaming application. In their proposal, authors consider to predict the signal strength of a medium by making excessive measurements and decide whether to change to another access network or not based on its variation. A mechanism to prevent from packet losses during handover is considered by adding buffers in the point of attachment (base station, access point) and mobile client. This mechanism only relies on one metric (RSSI), tested on one application type and is unable to support real time applications. More enhanced proposals which consider other potential parameters that may inﬂuence the decision accuracy about the necessity of handover are also proposed in MANETs [168] [148] [133] [169]. These techniques mostly rely on a set of advanced algorithms such as fuzzy logic and the modeling into optimization problems with multiple objectives and multiple attributes (Multiple Attribute Decision Making-MADM [94]). In [168] and [148], more

20

CHAPTER 2. STATE OF THE ART

Figure 2.2 – CALM CI management architecture
parameters were considered in the network selection decision process, which are network load and node speed in addition to the received signal strength. These parameters are considered to be fuzzy and presented in a linguistic format. For this reason, a fuzzy logic-based mechanism was proposed to treat them using a set of internal fuzzy rules to give a decision about the best network candidate to be used. The most popular classical methods used to solve a MADM problem are: (i) SAW (Simple Additive Weighting) where the total score of a network candidate is determined by the weighted sum of attribute values, (ii) TOPSIS (Technique for Order Preference by Similarity to Ideal Solution) where the network is chosen based on its closeness to an ideal solution, (iii) AHP (Analytic Hierarchy Process) which decomposes the problem into sub-problems with assigned weights and (iv) GRA (Grey Relational Analysis) ranks candidates and selects the one with the highest rank [72]. In [133], authors propose to use ANP (Analytic Network Process) which is a multi-criteria decision making (MCDM) tool derived from AHP to solve the handover decision problem. The proposed solution is composed of two main components namely the context repository which is responsible for the gathering of information relative to network and terminal characteristics, user preferences and service requirements, and the adaptability manager responsible of handover decision and initiation. ANP is deployed in the adaptability manager to select the best network among existing candidates based on information given by the context repository module. In [169], authors consider to use the SAW algorithm in function of latency, signal-to-noise, power and throughput criteria. The handover scheme is composed of three modules which are:(i) Handoff Need (HN) module used to predict the necessity of handover based on received signal strength (RSSI), (ii) Target Network Selection (TNS) which is done based on the deﬁned criteria such as throughput, signal-to-noise ratio and latency and (iii) Handover Performance Parameter Estimation (HPPE) which is used to estimate and optimize network parameters.
The vehicular network ﬁeld has also seen the proposition of some works to handle network selection. In [91], authors propose a simple mechanism for vertical handover called VANET Backup Communications (VANBA) in layer 3 of the OSI stack. They consider the V2V medium as the default communication interface and initiate handover to secondary mediums (e.g. 3G, WIMAX, etc.)

2.3. DATA EXPLOITATION IN A VEHICULAR NETWORK

21

only when V2V is inactive (unreachable destination). VANBA collects information registered by applications, monitors the destination IP address and whenever it is not reachable via V2V it triggers the handover to a new medium and returns back to the default one once it becomes reachable again. Although, it is simple to implement and use, VANBA doesn’t consider the use of secondary mediums for communication until the QoS of running applications degrades which may cause ’pingpong’ problems. In [140], MACHU (Multi-ACcess network Handover Algorithm for vehicUlar environments) is proposed to select the best point of attachment (e.g base station, access point). The proposed mechanism is based on three main phases: (i) handover information gathering in charge of the network detection and user and node parameters collection, (ii) handover decision to evaluate the necessity of handover based on collected information and decide what the best network is, and (iii) handover execution phase. Authors exploit the Media Independent Handover Function (MIHF) protocol, deﬁned by the IEEE 802.21 standard [70] to exchange information between different layers. The decision algorithm beneﬁts from services offered by IEEE 802.21 standard and GPS to retrieve information about networks and neighborhood to select the worthwhile point of attachment. This work is only based on functionalities of one technology and consider to have very accurate information from GPS which is not always the case. In [98], a handover mechanism based on vehicle’s speed is proposed. The speed is used to estimate the throughput and crossing time (time to cross the network coverage area) deployed in the decision process. If the throughput given by the new network exceeds the old one, the crossing time is calculated and handover is executed when its value is higher or equal than a threshold. This work supposes that the vehicle travels in a constant speed which is not the case and does not consider application requirements and network characteristics.

2.3.3/ SUMMARY AND DISCUSSION
Data collected from a vehicular network has several use cases and application ﬁelds. During subsection 2.3.1, we reviewed some important ﬁelds where these data are deployed based on the data fusion concept. Therefore, data fusion seems to be a promising technique able to deal with heterogeneous massive data structures ﬂowing in a vehicular network with the aim of enhancing ITS applications and providing more reliable, efﬁcient and reduced meaningful sets of information to users. Several variants of data fusion algorithms are widely deployed by researchers which are either embedded in the onboard system of vehicles or in ﬁxed management centers targeting to offer more comfortable and safer driving conditions by enhancing driver awareness about its vehicle and environment. However, the use of the exchanged data between vehicles does not stop on these applications, and could be exploited in a different way. Network selection or vertical handover also exploits the collected data to preserve higher quality of service for running applications. It is a necessary task in vehicular environments to compensate vehicles speed and network topology change. However, decision making highly depends on several parameters. The techniques and standard reviewed in subsection 2.3.2 target to offer a smooth and seamless handover without impacting application performances by considering the most important factors that impact decisions. To do this, fuzzy logic and MADM were considered, where fuzzy logic seems to be more lightweight without needs for special processing capacities.
Although, they target to offer more reliable applications and enhance the experienced quality of service by clients in a highly dynamic network such as VANET, the data exploitation techniques mentioned in this section do not interest to security issues that may harm the network and disrupt running applications. In the next section, we review possible security threats in vehicular networks and discuss techniques used to face them and protect applications.

22

CHAPTER 2. STATE OF THE ART

2.4/ SECURITY IN A VEHICULAR NETWORK
Collected data in a vehicular network are of high importance and should be communicated efﬁciently between vehicles or to a central server in the infrastructure. As a carrier of such relevant data, a vehicle is always attracting the attention and may be exposed to potential attacks [65]. These attacks may affect data properties such as consistency, integrity and availability [145], which lead to a perturbation of the normal functioning of applications offered by VANET. VANET attacks could be of various categories and initiated either by vehicles external to the network (non authenticated by a central authority) which are, also, known as external attacks or by vehicles belonging to the network and possessing a legal certiﬁcate (internal attacks) using different strategies.
The appearance and standardization of the new communication technology called IEEE802.11p (WAVE) enhances the ability of vehicles to interact and communicate together easily and compensates problems of the high speed and short lasting communication opportunities between them and infrastructure. In fact the standard IEEE802.11p deﬁnes a new way to exchange data between vehicles as soon as possible by getting rid of the authentication phase deployed in the majority of other technologies. The security aspect of short range communications between vehicles using 802.11p is managed by another standard namely the IEEE1609.2 which was jointly developed and handles the anonymity, authenticity and conﬁdentiality of exchanged messages and running applications. This standard is mainly based on messages authentication and certiﬁcate distribution to secure communications. The exchanged messages are authenticated based on cryptographic mechanisms using digital signature and encryption. However and although it carries a legal certiﬁcate, an authenticated node can threaten the network applications security and initiate attacks with respect to used protocol rules. For this reason, supplementary techniques were proposed to enhance the security aspect and plug left holes. They are of tow types; the continuous control of distributed certiﬁcates [62] and Intrusion Detection System (IDS) [128].
This section is divided into four main subsections. We devote the ﬁrst one to review the different attacks that may threaten a vehicular network. In the second subsection, we give a short overview about the standard IEEE1609.2. We describe the security mechanisms proposed to handle malicious threats in vehicular networks in the two last subsections.

2.4.1/ SECURITY ATTACKS IN VANET
Vehicular networks are exposed to several kinds of attacks. The objective of these attacks is to create problems for the network users by changing the content of messages and disrupting their applications and communication continuity. They are classiﬁed by [122] and [150] into ﬁve classes: network, application, timing, social and monitoring attacks. In the following, we describe each class.

2.4.1.1/ NETWORK ATTACK
In this class, attackers directly affect vehicles and infrastructure in the network. Their main objective is to create problems for legitimate users of the network applications. Attackers may be misbehaving and faulty nodes or malicious users. Some types of attacks residing under the umbrella of the network attack class are described as follows:
- Denial of Service attack (DoS): This type is one of the most serious levels of attacks in vehicular networks because it threatens the network availability. It consists in jamming the main communication medium to prevent authentic users from accessing network services,

2.4. SECURITY IN A VEHICULAR NETWORK

23

- Distributed Denial of Service attack (DDoS): This attack consists of initiating a DoS from different locations to down the network (V2V and V2I communications). Attackers may initiate their attacks in different time slots and jam the network with their messages,
- Sybil attack: A Sybil attacker sends messages to vehicles in the network pretending the existence of other vehicles on the road by fabricating some fake identities,
- Node impersonation attack: Each vehicle has a unique identiﬁer to verify a message whenever an accident happens. However, in this kind of attack a vehicle may change its identity to decline its implication in the accident to police agents.

2.4.1.2/ APPLICATION ATTACK
Safety and non safety are two types of potential applications in vehicular networks. Application attacks are very dangerous to these types of application, especially, safety ones because they aim to alter the message content or send a false one in order to use it for malicious aims. They consist in packet alteration and false alerts sending to force other vehicles changing their directions and cause congestion or accidents in some predeﬁned roads.

2.4.1.3/ TIMING ATTACK
The timing attack consists in adding time slots and creating delay in original messages. So, attackers do not change the whole content of the message but they will be received by other nodes late or after being deprecated with no beneﬁts. Therefore time-sensitive applications such as safety ones will loose their main objectives when a delay occurs, thus causing perturbation in the network organization and trafﬁc conditions and threatening the safety of drivers and passengers.

2.4.1.4/ SOCIAL ATTACK
This kind of attack aims to provoke legitimate users in the network and make them change their behavior to anger, which may affect the driving behaviors causing some accidents. It consists in sending unmoral messages (e.g. Hello, You are Idiot) by a node to its neighbor to cause conﬂicts between drivers. The impact of this attack on the network is indirect.

2.4.1.5/ MONITORING ATTACK
Monitoring and vehicles tracking attacks reside under this class. In a monitoring attack, attackers monitor the whole network and listen to communications between vehicles and between them and infrastructure (V2V and V2I) and whenever they detect any important information they send them to the concerned person. We can give the example of police agents planning to perform some operations against a criminal and communicate with each other the location of the operation. An attacker spies their communications and communicates the information to the criminal. In the tracking attack, an attacker uses the unique identiﬁer of a vehicle to track its locations and enable external third parties to send viruses to its neighbors and get their collected data.

24

CHAPTER 2. STATE OF THE ART

2.4.2/ IEEE1609.2 STANDARD OVERVIEW
The Institute of Electrical and Electronics Engineers 1609.2 standard was created to manage and specify a set of security services for supporting vehicular communications. It deﬁnes a subsystem architecture for security management between communicating entities which offers various security services that could be efﬁciently used by different consumers (WAVE services’ provider and WAVE management entities). These security services mainly rely on Elliptic Curve Cryptography (ECC), public key certiﬁcates and the Public Key Infrastructure (PKI). So, each entity, such as a vehicle or a Certiﬁcate Authority (CA) server should have IEEE1609.2 certiﬁcates and a certiﬁcate management entity (CME) to manage these certiﬁcates. In fact, a CME is composed of a set of functions for: (i) requesting certiﬁcates and Certiﬁcate Revocation Lists (CRLs) from the CA (further details about CRL are in subsection 2.4.3), (ii) processing received certiﬁcates, CRLs and other security management messages, and (iii) managing security-related information. In addition to CME, IEEE1609.2 standard provides cryptographic services such as creating digital signatures, verifying signatures, and decrypting messages. Therefore a security consumer has to request a certiﬁcate before to be able to send signed and encrypted messages. Once it obtains a certiﬁcate, the consumer can prepare signed and encrypted messages based on security services of the IEEE1609.2 standard. Figure 2.3 highlights the functional architecture of the security management system of IEEE1609.2. This latter deﬁnes an hierarchy that organizes roles between the different stakeholders of a vehicular network and classiﬁes entities providing or using IEEE1609.2 security services into two categories; certiﬁcate authority (CA) and end entities. The CA is responsible of the certiﬁcates and CRLs generation whereas end entities are the actors that use them and they include vehicles, roadside units (RSUs) and application servers.

Figure 2.3 – The functional architecture of the standard 1609.2 [153]

2.4. SECURITY IN A VEHICULAR NETWORK

25

The communication between end entities and a CA requires, always, a mutual authentication. This mutual authentication is achieved using two types of security management certiﬁcates: (i) a certiﬁcate signing request (CSR) used by the end entity to authenticate to the CA and (ii) a CA certiﬁcate used by the CA to authenticate to the end entity. A certiﬁcate usually contains at least one public key and a set of permissions associated with that public key. The CA keeps controlling its generated certiﬁcates and whenever it detects a malicious behavior from their owners they are revoked and a so called CRL is used to inform network members about that. The CRL structure and informing techniques are further detailed in the next subsection.

2.4.3/ CERTIFICATE REVOCATION
Beside the cryptography techniques and security structures such as public key, signature and certiﬁcate, IEEE1609.2 offers another data structure that enhances communication security namely Certiﬁcate Revocation List (CRL). A CRL is a kind of authenticated message distributed by the certiﬁcate authority (CA) containing a list of revoked certiﬁcates which are previously issued and are no more valid. Revoked certiﬁcates contained in a CRL are veriﬁed using the certiﬁcate management entity (CME) presented in ﬁgure 2.3. So, whenever a CRL is received by a CA or a vehicle it should be veriﬁed to conﬁrm if it is validly signed. Then, certiﬁcates in the CME Security Data Store (SDS) should be checked to see whether they are still trustworthy or not. However, despite their ability to notify legitimate users in the network about compromised and deprecated certiﬁcates, the distribution of CRLs in a vehicular network at time still represent a very hard task due to nodes speed and frequently changing topology. Therefore, to protect vehicles from misbehaving nodes the certiﬁcates of compromised attackers should be distributed to users as soon as possible. However, when a vehicular network is concerned, this task is not obvious and requires special techniques and architectures to deal with vehicles speed and density. Some techniques were proposed in vehicular networks to detect compromised certiﬁcates and distribute CRLs in an efﬁcient way to alert legitimate users and preserve communications from illegal behaviors and attacks. These techniques are either based on the excessive use of RSUs and V2I communications or the exploitation of V2V capabilities.
The use of road side units deployed in the vehicular network topology was among the ﬁrst investigated techniques to distribute CRLs, where vehicle to infrastructure communication (V2IC) capabilities were exploited. [77] was among the ﬁrst mechanisms developed based on this method considering the dissemination of a CRL across the entire region governed by a CA without degrading vehicular communications for other more critical operations such as safety. Based on the fact that the size of a CRL is proportional to the number of authenticated vehicles in the network and keeps increasing with their density, authors consider to only maintain a CRL that corresponds to a speciﬁc regional CA to keep CRLs small in size. This was motivated by the hierarchical architecture of the certiﬁcate authority (CA). To ﬁt the aims of their proposed CRL distribution mechanism, authors make the following assumptions: (i) the deployment of RSUs is by nature done by the same organizations that instantiate CAs, which offers the possibility to a CA to reliably leverage on them for CRLs distribution, and (ii) the communication between RSUs is not required. The CRL distribution technique is then developed based on three main building blocks, where each one deals with a speciﬁc problem: (i) collaboration between CAs to manage vehicles traveling across geographical boundaries of one CA, (ii) segmentation of CRLs into small pieces, and (iii) the use of a low rate broadcast of CRL pieces by RSUs. However, despite their ability to reduce the distribution time and preserve time-critical applications in an urban area, such kind of mechanisms would fail to reach all nodes in a large network. They only rely on V2I capabilities to distribute CRLs in a very large network, so a sparse infrastructure distribution like in rural areas and highways highly decreases

26

CHAPTER 2. STATE OF THE ART

the CRL distribution capability. Therefore, vehicles may rarely encounter an RSU, and wouldn’t be able to collect all required pieces to reconstruct the CRL, in this case they will be harmed by compromised nodes because they are not up to date regarding revoked certiﬁcates. Nevertheless, if we consider to deploy a large number of RSUs in all roads topology, this would lead to high costs and problems of cross authentication between CAs.
Some other works considered to jointly exploit V2V and V2I communications to distribute CRLs to vehicles in the network. In [74], Laberteaux et al. proposed an epidemic distribution of CRL updates based on their exchange between vehicles at each encounter. In their proposal, RSUs are considered as ﬁrst relays for CRL updates, then vehicles rebroadcast them to their neighbors. In [85] and [114], Haas et al. proposed a new mechanism for efﬁcient exchange of a reduced CRL size together with an efﬁcient technique for determining if a certiﬁcate is in a CRL or not. The proposal also relies on V2V and V2I communications to distribute CRLs in the network. It aims to optimize the organization, storage and exchange of CRL information based on Bloom ﬁlter and the broadcast of a limited size of CRLs. These techniques are able to achieve a high rate of vehicles reachability compared to RSU-based techniques in case of sparse networks without infrastructure, but they still suffer from large vulnerability windows and high generated overhead. In [109][108], Nowatkowski et al. target to limit overhead problems caused by the two previous techniques using a so called Most Pieces Broadcast (MPB) technique by limiting the number of broadcasting vehicles to only the ones who have the biggest number of CRL pieces. Two possible communication scenarios may be seen in MPB; the ﬁrst is an RSU-based CRL distribution where only the RSU will be chosen to disseminate because it has the complete pieces of a CRL, this appears always when vehicles are moving within an RSU radio range, the second case appears when no RSU is available where the vehicle with the biggest number of CRL pieces will be chosen to disseminate in a V2V manner. To choose the broadcaster, authors rely on DSRC (Dedicated Short Range Communication) architecture and its channels deﬁnition. In fact, DSRC deﬁnes two kind of channels; (i) CCH (control channel), which is a single channel reserved for short, highpriority application and system control messages, and (ii) SCH (service channel), which has six different 10MHz channels that support a wider range of applications and data transfer. Nodes in the network exchange beacon information during CCH interval, a message that MPB authors reshape to introduce more information about CRL pieces count that the sender has locally. After the exchange of the pieces count during CCH interval, the node with the highest number of pieces is chosen to broadcast its pieces during the SCH interval.
All these techniques are able to detect attacks initiated by non authenticated vehicles and may succeed to detect authenticated attackers, a very difﬁcult task in the absence of an omni-present monitoring facility. However, they take much time (vulnerability window) to inform legitimate users about compromised certiﬁcates which increase attack duration and losses [76]. They, also, require the existence of a minimum number of deployed infrastructure to perform well. For this reason, other alternatives were investigated to enhance security in vehicular networks. Among these, intrusion detection systems (IDS) are the most investigated techniques and will be the focus of the next subsection.
2.4.4/ INTRUSION DETECTION SYSTEMS
The vehicular network, as previously discussed, is a very active area which is by nature exposed to malfunctions due to hardware errors and also vulnerable to attacks caused by malicious nodes. We have presented till now techniques based on certiﬁcate revocation list and demonstrated their major inconvenient in the previous subsection. Now, we are going to review new techniques that enhance vehicular network security based on intrusion detection systems. They were among the

2.4. SECURITY IN A VEHICULAR NETWORK

27

most investigated methodologies dealing with the security aspect in the literature where dozens of works were proposed. In such kind of techniques, vehicles are delegated to themselves to manage their proper security and inform each others about potential attacks based on mutual trust relationships built between them either using past interaction experiences or information collected from the environment about data validity in received messages. So, vehicles traveling on the network analyze neighbors behavior and decide about their trustworthiness by themselves and build so-called trust levels to be associated with each one. Three variants of trust models, through which intrusion detection systems are built, could be identiﬁed: entity-oriented, data-oriented and hybrid modeling [124]. In the following, we review some of the works proposed under each kind of trust model.
2.4.4.1/ ENTITY-ORIENTED TRUST MODEL
Entity-oriented trust modeling is mainly based on the evaluation of the whole trustworthiness of a node based on its behavior. Two typical trust models are proposed; (i) a sociological model proposed by Gerlach [58], and a multi-faceted model proposed by Minhas et al. [107]. The sociological trust management model is based on the principle of trust and conﬁdence tagging. The trust is derived based on four different input parameters: (i) a situational trust, which only depends on the situation treated, (ii) dispositional trust, which is based on the vehicle’s own belief to trust others, (iii) system trust, which depends on the system and assurances it provides, and (iv) belief formation process which is the evaluation of data based on previous factors. Based on these trust models, Gerlach propose in his work a whole architecture to secure vehicular communication and a privacy model to preserve vehicles’ locations. Trust models are after that related to each component of the proposed architecture to be maintained and updated. However, a combined method that groups all models together lacks in the work. The multi-faceted trust management model is developed based on three kinds of trust which are: (i) role-based trust, (ii) experience-based trust, and (iii) majority-based trust. These trust metrics are integrated to determine the trustworthiness of vehicles in a logical framework. The role-based trust exploits some predeﬁned roles that are enabled through the identiﬁcation of vehicles, the ones owned by the government or authorities deployed for law enforcing are given higher trust compared to other normal vehicles. The experience-based trust is built and updated based on direct interactions between vehicles and the satisfaction degree on their communicated information. The two previous trusts are combined together to result a so-called priority-based trust used to restrict the number of reports received by a vehicle from other neighbors after requesting information about an event in the network. In fact, a vehicle is able to request reports and advices from its neighbors based on the priority trust model. Finally, the majority-based trust is based on the evaluation of received reports and data related to vehicles such as locations and reporting time to decide about the most reliable advice to be followed. The main problem with this technique is that robustness was not extensively studied.
2.4.4.2/ DATA-ORIENTED TRUST MODEL
Unlike entity-oriented trust modeling, which relies on vehicles trustworthiness, data-oriented models consider to evaluate data messages exchanged between vehicles to decide about their validity. It was demonstrated by Raya in [78] that this kind of trust modeling is more appropriate in ephemeral ad hoc networks such as VANET when they proposed a data-centric oriented trust establishment using Bayesian inference and Dempster-Shafer evidence to evaluate data related to a particular signaled event. Several intrusion detection systems to detect and evict malicious vehicles from the network are proposed while deploying this kind of trust modeling to evaluate vehicles [50].
Some of the proposed works target to build a security mechanism for protecting communications

28

CHAPTER 2. STATE OF THE ART

and routing protocols without identifying speciﬁc kinds of attacks [50] [136]. In [50], Leinm et al. aim to secure a geographic routing protocol based on vehicles’ trust level veriﬁcation. To do that, authors propose multiple algorithms to control and verify the maximum accepted range of nodes and their mobility limit. The functioning of the proposed algorithms is based on beacons and information exchanged between vehicles to decide whether to consider one node cheating its position or not. Observations made by algorithms are combined to make a global decision about the real behavior of a vehicle and update its trust level. The proposed work suffers from some weaknesses such as non cooperation between vehicles, which limits the knowledge of the decision maker to its local one, and thresholds setting and manipulation which are hard to do. In [136], Gazdar et al. introduce a Markov model to manage the trustworthiness of nodes where each vehicle monitors its neighbors (monitored vehicles) and assigns to each one a local trust metric, which can change depending on
the reliability of the neighbor and its cooperation ratio. A ﬁnite state machine with n states models
the trust and each state represents a trust value. The study of the switching process between trust states is performed based on the probability of the expected reactions of a vehicle. In their study, authors also treat the problem of camouﬂage attack where a node reacts positively to beneﬁt from its trust metric and attacks by considering a transition from any state to the null trust, although they settle for an analytical study without any application to a speciﬁc scenario. However, developing a mechanism which encompasses all rules to deal with the different types of attack seems to be a very hard task which requires high soft and hardware capabilities and keeps always some open issues. So and based on these assumptions, the major part of studies target speciﬁc kinds of attacks (e.g. DoS, false alert, Sybil, etc.).
Two recent studies dealing with intrusion detection and eviction from the network were proposed by Sedjelmaci and al. in [165] et [166]. In the ﬁrst work, authors introduce a new reputation based technique to face some types of attacks such as black-hole, warm-hole and resource exhaustion (known by DoS attacks) based on the cooperation between different network members. This IDS assumes that all vehicles are monitoring each others behavior in a promiscuous mode. In fact, vehicles are grouped into one hop clusters based on their speed where a cluster head (CH) is elected to monitor its neighbors reputation values and make a decision about the real behavior of each one. The CH also, collects reputations built by other normal vehicles before making its decision to evict a node. Whenever malicious vehicles are detected, their identiﬁers are sent to nearby RSUs, then to a central authority to be treated where a decision is made and an information is diffused in the network to eject attackers. Attacks are detected based on some rules dealing, essentially with the control of packet drop ratio and message duplication ratio. The major shortcoming of this IDS is its generated overhead due to the diffusion of malicious vehicles list in the whole network, also the time taken by CHs to reach an RSU and contact a CA may delay the reaction against attackers which increases the vulnerability window of a legitimate node. The second work follows the same idea, but extends rules to detect more types of attacks such as Sybil and decreases the generated overhead by designating some special nodes in the cluster to monitor neighbors and send reputations to the CH. In DCMD (on Data-Centric Misbehavior Detection) [119], a new mechanism was proposed to deal with false alert attacks by an excessive veriﬁcation of the alerts diffused by vehicles. In fact, the identiﬁcation of false alerts is based on a set of rules preloaded into each vehicle. For this reason, authors identify a list of actions and conditions to be veriﬁed by the alert sender, which are relative to each type of alert. Whenever the condition relative to the diffused attack is not respected, the vehicle should be considered malicious. Vehicles are working on cooperation with RSUs and CA to detect a malicious vehicle that changes its pseudonym.
Several studies have focussed on the Sybil attack detection in a vehicular network and proposed various techniques to face that kind of misbehaving which almost rely on the radio resource testing, identity registration and position veriﬁcation. [27], [65] propose a resource testing technique to

2.4. SECURITY IN A VEHICULAR NETWORK

29

detect Sybil nodes based on the assumption that each physical entity has limited resources. In [27], authors use computational puzzles [3] to test the computational resources of nodes. However, in [65] they demonstrate that an attacker may have more resources than a honest node and propose an amelioration using radio resources testing instead. In [83], [33] and [54], authors propose a new approach to detect Sybil attacks based on the Received Signal Strength (RSS) of exchanged messages. This approach is based on the veriﬁcation of a message (beacon) content by eventually collecting measurements about its generator to verify if it is in the claimed position or not. So, the node should be considered as a Sybil attacker if its claimed position is far from the evaluated one. In [113], authors assume that two nodes should not have the same neighbor for a period of time
that they call µ and proceed for the exchange of neighbors’ lists between vehicles to verify common neighbors after that period. So, if a vehicle remains in common between two nodes more than µ, it
should be considered as a fake identity initiated by a Sybil attacker. Based on the assumption that an attacker and its fake identities share the same physical mean, they can identify the attacker.
2.4.4.3/ HYBRID TRUST MODEL
Hybrid trust models are built based on a combination of the two previous ones where the data validation is considered together with the entity trust to build and update a trust level related to each vehicle. In [42], Dotzer et al. propose a distributed reputation model that exploits a notion called piggybacking where each vehicle that forwards a message about an event appends its own opinion about the trustworthiness of data in the message. An algorithm to generate an opinion about the validity of an event is proposed while considering ﬁve types of trust; direct trust, which is based on the node’s own experience with the sender, indirect trust, which consists in the transitive secondhand reputation provided by nodes with an already known reputation information, node closeness to the area of an event, node familiarity with the declared event, and geo-situation oriented reputation level which is deduced from the two previous trusts. A decision about the validity of a message is made using an aggregation of opinions received from other vehicles. The major weakness of the proposed mechanism is its recursive use of opinions which always favors inﬂuence of the earliest received opinions than later ones. In [51], an approach for vehicles reputation building based on data validation is proposed. In this approach, nodes are of two types; a set of pre-authenticated nodes called anchors that are assumed to be trustworthy and their data are trusted, and normal nodes. So, data is validated directly when received from anchors or by an agreement between neighbors when communications between normal vehicles are considered. Malicious nodes are identiﬁed if the data they present is invalidated by the validation algorithm. The validation is based on experiences between vehicles and could be either negative or positive based on satisfactory completion of transactions, fulﬁllment of expectations, or some other forms of veriﬁable ﬁduciary action. For the exchange of reputations and agreements between vehicles, the authors propose to use an epidemic algorithm to enhance data availability and reliability. This mechanism does not consider reputations of normal vehicles to build the majority consensus and only relies on the reception of a sufﬁcient number of reports despite the passive wait for these reports. In [97] and [159], authors propose a trust modeling technique to control the message relaying and decide about its validity. They target to detect false alerts diffused by malicious vehicles. Cooperation between vehicles is established to gather opinions about generated messages for the decision-making. The collection of opinions from network members is made based on a clustered architecture where each member introduces its opinion about a reported event in a message before forwarding. The ﬁnal decision about the accuracy of a generated alert is delegated to the cluster-head based on two types of information: the ﬁrst represents its own experience with the monitored node and the second is the combination of aggregated opinions in the received message. Therefore, the behavior of the message generator could be distinguished and the message continues to be diffused if it is

30

CHAPTER 2. STATE OF THE ART

real and stopped in the opposite case. The idea of this trust modeling technique solves some problems left by the two previous ones related to decisions robustness and reliability and seems to be scalable thanks to its cluster-based opinions collection. In [163], authors propose a new framework for continuous vehicles’ tracking while preserving their privacy (A-VIP: Anonymous Veriﬁcation and Inference of Positions) based on a centralized architecture. A Local Authority (LA) is introduced to collect, manage and check the consistency of vehicles’ broadcasted reports. They assume that vehicles own cryptographic material and are able to establish a secure channel to the LA through either an RSU or a cellular infrastructure. They employ a cooperative reporting mechanism to speed up reports delivery to the LA and enhance the position identiﬁcation of a beaconer using car-tocar communication. Reports from neighboring vehicles are used to identify the beaconer tile. Two approaches are studied: (i) the Q-aware approach where the LA knows the quality of signal with which the reporter has received the beacon, and (ii) the Q-unaware approach describing the opposite case. In this work, the proposed mechanism is enhanced to calculate reporters trustworthiness and detect fake identities based on received information in the reports (reports combination). The trust mechanism is able to face other attacks such as transmit power, false location and replay attack. In [131], the use of connected RSUs managed by a trust authority (TA) is proposed to verify vehicles trajectories and detect sybil attacks with preservation of vehicles position privacy. Vehicles in the network communicate their trajectories based on authorized messages signed and given by an RSU. The set of trajectories given by one node is used for the Sybil attack veriﬁcation based on a social relationship identiﬁcation between generated trajectories using a similarity deﬁnition. In VWCA [112], a distributed monitoring technique was proposed to detect and classify vehicles based on their behaviors and exchanged information. In fact, vehicles with the highest trust level are chosen to monitor their neighbors and build a distrust level to be thereafter exchanged with a decision maker (cluster head), which makes a classiﬁcation of vehicles into: normal, abnormal and malicious. Whenever a cluster head detects a malicious node, it sends an encrypted message to the central authority including its identity to be blacklisted and diffused to other vehicles in the network.

2.4.5/ SUMMARY AND DISCUSSION
Securing communications in a vehicular network and protecting its components from misbehavior and soft & hardware faults was till nowadays a challenging issue. Certiﬁcate revocation lists were integrated to the IEEE1609.2 standard to increase its capability to detect malicious vehicles and evict them from the network. However, their distribution to legitimate users still suffers from various weaknesses which keeps open doors for attackers to disrupt the network applications. For this reason, research directions were interested to intrusion detection systems (IDS), which are based on mutual evaluations between vehicles to increase the trustworthiness of the network. They mainly rely on vehicles trust building by evaluating nodes reactions, their issued data or combine the two techniques. This kind of protection is developed and used jointly with legal certiﬁcates acquired by nodes at their entrance to the network. Unlike mechanisms based on certiﬁcate revocation list, which always rely on centralized control and decision making based on certiﬁcate authorities, intrusion detection systems mainly rely on vehicles opinions to control their behavior. They enhance the cooperation between entities in the network (V2V and V2I) and push them to goodly behave because they are controlled by their neighbors. Intrusion detection systems overcome problems related to the time consumed to communicate the list of malicious vehicles to legitimate users encountered by CRL-based techniques and increase the cooperation between nodes based on a continuous and distributed control of their activities and interactions with their neighbors. For this reason, we aim in our work to investigate these techniques and base our proposal on them to

2.5. CONCLUSION

31

enhance routing and applications’ security.
2.5/ CONCLUSION
During this chapter, we presented works related to the most important components in intelligent transportation systems related to this thesis, which are data collection and exploitation. A secure and efﬁcient collection and exploitation of data ﬂowing in the vehicular network open possibilities to develop new applications and enhance existing ones. In the ﬁrst section of this chapter, we reviewed protocols developed for data collection which leads to an identiﬁcation of weaknesses related to real-time trafﬁc consideration that are still not convincing. In the second section, we discussed techniques for data exploitation and analysis to enhance ITS applications efﬁciency and preserve higher quality of service for the clients, a study that conﬁrmed the existence of some issues that are not well investigated related to the non exploitation of vehicles cooperation and non consideration of their capabilities and parameters affecting the quality of service in a network. In the third section, we highlighted security issues that are encountered in a vehicular environment and reviewed mechanisms proposed in the ﬁeld with the aim of protecting data and applications. Some reactive mechanisms detect attackers after they harm the network and cause losses and were not able to predict an attacker before it attacks. To overcome problems kept open by projects and works described during this chapter, our contributions described in the following chapters consist in the proposition of a secure routing solution and efﬁcient and accurate techniques to exploit data exchanged between vehicles to protect the network from potential attackers, increase the quality of service of ITS applications and offer a new beneﬁcial service able to preserve travelers time and money. Therefore, we propose in the next chapter, our ﬁrst solution to deploy an optimized number of data harvesters for data collection from urban areas.

3
OPTIMIZED DEPLOYMENT OF DATA
HARVESTERS FOR URBAN SENSING
3.1/ INTRODUCTION & PROBLEM STATEMENT
Cooperative Intelligent Transportation Systems require the establishment of a high cooperation between all vehicular network stakeholder (vehicles, infrastructure, etc.) to collect efﬁcient and accurate data to offer reliable applications that will enhance security, driving conditions and travelers comfort. Building urban sensing applications seems to be more simple and sophisticated using vehicles’ capabilities. Vehicles, while traveling through an urban area, collect many kinds of local information like pollution level, videos, temperature, chemical toxicity, or free parking lots which gives a global vision about what is really happening in that area, reduces passive trafﬁc and help to locate survivors and plans for rescue missions in case of disasters. Collected data by each vehicle should be delivered to a third-party to be used for continuous monitoring and sensing applications refresh. Data collection protocols reviewed in section 2.2 rely on the cooperation between vehicles to achieve a high packet delivery ratio and enhance information availability to users. They are mainly based on two kinds of network organization which can be either decentralized, where vehicles are autonomously organized, or centralized where a static ﬁxed third-party is responsible of the network organization. The most investigated type of data collection architectures is decentralized, but in some cases such as emergency scenarios where connectivity and communication between vehicles is not guaranteed, these solutions have proven inefﬁciency. This limitation could not be ignored especially in our work because we are dealing with the problem of emergency cars management in case of search and rescue missions in disaster urban areas. This is also the use case treated by the European project CarCoDe 1. Therefore, we choose to consider a centralized solution where a central unit plans and continuously monitors a set of vehicles namely harvesters to get a global overview of the affected area. A harvester is traveling through an area deﬁned by the central unit to collect data from vehicles and send them back to be exploited by urban sensing applications. However, our proposed solution brings a new challenge and two questions should be answered: How many harvester we have to deploy in a geographic area? and which area to be monitored by one harvester while considering time constraints of the application? For this reason, optimizing the number of deployed harvesters in an urban area will be the ﬁrst focus of our study while proposing our techniques to handle problems related to data collection and exploitation in vehicular networks. Optimizing harvesters in an urban area is a nested problem that contains two main ﬁelds to be treated which are the optimization of each harvester movement circuit and the optimal number of
1https://itea3.org/project/carcode.html.
33

34 CHAPTER 3. OPTIMIZED DEPLOYMENT OF DATA HARVESTERS FOR URBAN SENSING
these harvesters. Typically, many works have dealt with optimization problems but none of them has treated the problem of data harvesters deployment. Facilities location, covering problem, Vehicle Routing Problem (VRP) and Chinese postman problem (CPP) were among the most investigated problems in the literature.
In facilities location problem [32], each facility should be optimally placed in order to distribute goods to clients at a minimum cost. In [155], Mehar et al. treat the problem of locating charging stations to serve electricity demands generated by electric vehicles traveling in the network. A Genetic algorithm was used to minimize the investment and transportation costs needed to place the charging stations depending on clients demands which increase during rush hours. The covering location problem is how to ﬁnd optimal positions to cover all clients demands. In [126], the problem of optimizing Road Side Units placement was investigated. The main objective in this problem was the minimization of the delivery time of an abnormal activity detected by a vehicle in a road segment to the nearest RSU. In this work, authors consider intersections as potential candidates where to place RSUs and try to choose the best ones among these locations to cover the maximum area and minimize the delivery time. They compare two heuristics: Balloon Expansion Heuristic (BEH) and Binary Integer Programming (BIP) to solve the problem. In VRP, the problem is how to manage a set of vehicles to optimally distribute goods to a number of dispersed clients while respecting capacity constraints of vehicles, the priority of demands and time intervals of delivering. In [102], authors treat the problem of emergency vehicles planning to serve emergency calls. They consider a number of stations where each one is delegated to manage a set of vehicles and satisfy calls in a predeﬁned area. In this work, an Ant-Tabu algorithm was used to minimize a number of functions (e.g. time to a station, time to a call, etc.). In [71], authors compare exact algorithms, heuristics and meta-heuristics to solve the VRP with time window constraints. One of the used heuristics is the construction and amelioration where they used a greedy Best Insertion (BI) algorithm to build an initial solution and a Variable Neighborhood Search (VNS) heuristic [24] for optimization. In the VNS heuristic, a combination of six heuristics were deﬁned as neighborhood relations. Three mono-tour heuristics: 2-Opt, Or-Opt, 2-Exchange and three multi-tours: String Relocation, String Exchange and String Cross. The Chinese postman problem is a graph problem, which consists in ﬁnding the best circuit to be traversed by the postman while minimizing the cost and covering at least once all arcs of the graph. It becomes a NP-Hard problem when a mixed graph is considered. Several heuristics were developed to solve this problem. Among them, we cite GRASP (Greedy Randomized Adaptive Search Procedure) which was deployed by Corberan et al. [19] and is based on two phases; randomized construction and an amelioration phase which are executed successively several times to result the optimal solution.
We notice that all of the treated problems are NP-hard and in most cases heuristics and metaheuristics are deployed to solve them. Compared to them, our data harvesters optimization problem is similar to the Chinese postman and could be treated as a covering or vehicle routing problem, however with a different objective which is the covering of each road segment and not only some points. This treated objective introduces more difﬁculties to our optimization problem compared to others. In addition, applications time constraint constitutes a rigid parameter to be taken into account. In the remainder of this chapter, we describe how we model and solve the data harvesters optimization problem.
3.2/ OPTIMIZATION OF DATA HARVESTERS DEPLOYMENT IN URBAN AREA
We aim to optimize the number of harvesters to be deployed by a central unit to monitor an urban area and cover all its roads to collect useful data for urban sensing applications. For this reason,

3.2. OPTIMIZATION OF DATA HARVESTERS DEPLOYMENT IN URBAN AREA

35

we target to maximize the distance covered by every harvester in the monitored area with respect of the time constraint imposed by the application limiting the delay between two successive visits to the same region. Therefore, the global problem of harvesters optimization is divided into a set of tours optimization sub-problems. In this section, we ﬁrst give a mathematic model to formulate the problem, then we detail the proposed solution.

3.2.1/ PROBLEM MODELING

In this work, we target to give answers to the questions given in the introduction by deﬁning the number of harvesters and their areas to explore. The idea is to divide the roads topology into segments separated by intersections. So that the urban area is modeled by an oriented graph where intersections are vertices and road segments are edges and a harvester should travel a portion of the graph and visit a number of edges. Typically, we should deﬁne an objective function to be optimized and a number of constraints to be respected, but before that lets introduce the set of parameters used in our model which are presented in Table 3.1:

Parameter
n V E zi j li j ti j vi j yki j
TMAX
m

Deﬁnition
Number of vertices/intersections in the graph
Set of all vertices/intersections: {i=0,..n where i ∈ V } Set of edges/road segments: {i ∈ V and j ∈ V where (i, j) ∈ E } Binary variable: =1 if segment (i, j) exists and =0 else Length of a segment (i, j) Time needed to travel a segment (i, j) Maximum speed of a harvester in a segment (i, j) Decision variable: =1 if the segment (i, j) is visited by a harvester k
and =0 else The maximum time between two successive visits to a point in the segment Number of resulted harvesters

Table 3.1 – Mathematic model notations

To optimize the number of harvesters being deployed in an urban area, each harvester should cover a maximum portion of the oriented graph which means maximizing the traveled distance in the area
before to return to the starting point while respecting the time constraint TMAX . For this reason, we divide the problem into m sub-problems where the objective of each one is the maximization of the distance traveled by a harvester k. So, let F be the distance function to be maximized by a harvester k, such as described by equation 3.1.

n−1 n−1
F = Max ∑ ∑ li jyki j i=0 j=0

(3.1)

The feasibility of the solution depends on different constraints represented by the following equations: equation 3.2 guarantees that the maximum time between two successive visits to a point in a
segment should not exceed a threshold TMAX deﬁned by the application, equation 3.3 ensures that every road segment should be visited at least once by a harvester where m is the number of har-
vesters, equation 3.4 guarantees to have a circuit with the same start and end point, and equation 3.5 is the integrity constraint.

36 CHAPTER 3. OPTIMIZED DEPLOYMENT OF DATA HARVESTERS FOR URBAN SENSING

n−1 n−1
∑ ∑ ti jyki j ≤ Tmax
i=0 j=0

m−1
∑ yki j ≥ 1
k=0

n−1

n−1

∑ ∑ yki0 + yk0 j ≥ 2

i=1

j=1

(3.2) (3.3) (3.4)

yi j ∈ {0, 1}

(3.5)

In the next subsection, we explain how to solve the problem we have deﬁned to optimize the number of data harvesters to collect data from an urban area.

3.2.2/ OPTIMIZATION SOLUTION
Urban sensing applications, especially emergency ones in case of disasters, require data to be received at predeﬁned bounded delays. So, time is an important rigid constraint to be respected. Hence, the algorithm to be used to solve the harvesters’ deployment problem should give results in a reasonable time. Furthermore, harvesting a big area makes the optimization problem we are studying NP-hard, where its resolution with exact solution is not possible and may take huge time to deal with all possibilities and constraints. For this reason, we opt for the use of meta-heuristics to handle complexity. It is clear that they don’t give always the optimum solution but they approximately hit optimality in a reasonable time.

Figure 3.1 – VNS Operation

3.2. OPTIMIZATION OF DATA HARVESTERS DEPLOYMENT IN URBAN AREA

37

To deal with the complexity of the problem and solve it, we modiﬁed a famous meta-heuristic which is the Variable Neighborhood Search (VNS) [24]. VNS is a meta-heuristic which always starts with
an initial solution obtained by construction heuristics, then it deﬁnes a number of operators Nk (k=1..kmax) to be applied to this state (current solution) resulting a set of successor states. The
set of obtained states by applying an operator is called a neighborhood and it is optimized by local search techniques. For the construction of initial solutions, we reshape the greedy Best Insertion (BI) heuristic to respect our speciﬁcation and constraints. However for neighborhoods, we have deﬁned an heuristic which is the combination of two well known heuristics: 2-Opt used for TSP [14] which is a Local Search Heuristic and String Exchange [116] which aims to globally optimize the solution by exchanging k strings between two circuits (tours). Figure 3.1 introduces the global functioning and transitions in VNS. More details about the solution steps namely construction and neighborhood are presented in the following subsections.

3.2.2.1/ CONSTRUCTION HEURISTIC
We detail, here, the Best Insertion heuristic modiﬁcations we have made to adapt it to our problem. Traditionally, BI is used for minimization problems and the construction deals always with a set of points (graph vertices) which are mostly cities in case of TSP or clients in case of VRP. However in our case, the objective is maximization and we have to deal with road segments (graph edges). So, we modify the BI to accept edges while building a cycle and consider the maximum length as the addition criteria without forgetting the time constraint of the application. The algorithm is detailed below 1:
Algorithm 1 Pseudo-code of the modiﬁed BI algorithm
1: Input: A valuated graph with (li j,ti j) distance and time needed to travel over segment (i, j)
2: Output: A set of circuits delimiting the areas covered by each harvester 3: Choose a random segment as ﬁrst cycle; 4: Browse all segments and add the one with maximum length;
n−1 n−1
5: while ∑ ∑ ti jyki j < Tmax do
i=0 j=0
6: Repeat action 4; 7: end while
n−1 n−1
8: if ∑ ∑ ti jyki j ≥ Tmax then
i=0 j=0
9: Choose the last segment as the ﬁrst cycle of the new circuit; 10: end if 11: Repeat actions 6 and 8; 12: Stop the algorithm when there is no more segments to add;
At the end of the modiﬁed greedy best insertion algorithm process, we get a set of non optimal circuits affected to each harvester. These circuits are not the optimal ones. For this reason, they should be introduced as inputs for the amelioration algorithm (neighborhood heuristic) to be improved to hit the optimal solution that gives the minimum number of harvesters needed for deployment in all the studied area.

38 CHAPTER 3. OPTIMIZED DEPLOYMENT OF DATA HARVESTERS FOR URBAN SENSING

3.2.2.2/ NEIGHBORHOOD HEURISTIC
At this stage, we take the initial solution (set of circuits) given by the Best Insertion heuristic and we make amelioration at each iteration to ﬁnally give an optimal solution. For this reason, we deﬁne a new heuristic combining 2-Opt and String Exchange. This heuristic deﬁnes the VNS neighborhood used for local and global optimum search. In this heuristic, we take the set of circuits produced by the construction algorithm, we browse all of them and choose at each iteration two adjacent circuits. We ﬁrst, browse local segments of each circuit and try to exchange two segments if this action improves the time consumption. Then, we compare the two circuits and see if we can exchange segments between them. The exchange is made if it minimizes the number of travels for one segment or minimizes the time of the circuit. A simpliﬁed process about the local and global optimizations in the neighborhood heuristic is given by ﬁgure 3.2 and its different instructions are
detailed in algorithm 2 with N the number of circuits produced by the modiﬁed BI algorithm, Ci the circuit i, Ki the number of segments in Ci, Sij is the segment j in the circuit i.

Algorithm 2 Pseudo-code of the amelioration algorithm

1: Input: Set of harvesters circuits produced by the BI algorithm, the distance of each circuit and

time to travel each Circuit.

2: Output: A set of optimal routes (circuits) delimiting the areas covered by each harvester.

3: for i = 1..N do

4: Choose Ci and Ci+1; 5: for j = 1..Ki − 1 do

6:

for k = j + 1..Ki do

7:

Make a virtual exchange between the two segments Sij and Ski ;

8:

Recalculate the new conﬁguration time and compare it with the initial time;

9:

if New time < Initial time then

10:

Validate exchange;

11:

end if

12:

for h = 1..Ki+1 − 1 do

13:

for x = h + 1..Ki+1 do

14:

Do 7, 8 and 9 with Shi+1 and Sxi+1;

15:

Make a virtual exchange between Sij and Shi+1;

16:

Recalculate the two times of Ci and Ci+1;

17:

if Time is ameliorated then

18:

Validate the exchange;

19:

end if

20:

end for

21:

end for

22:

end for

23: end for

24: end for

The heuristic we have deﬁned uses a local search approach given by the 2-Opt heuristic and a global optimization by comparing adjacent circuits to make improvements which gives a global optimum for the problem. The algorithm gives a number of optimal circuits as a ﬁnal result. In our case, and as said above, a harvester is delegated to explore/monitor an area and travel a deﬁned number of road segments (circuit) which means that the number of harvesters will be the same as the circuits number.

3.3. PERFORMANCE EVALUATION

39

Figure 3.2 – Neighborhood heuristic illustration
3.3/ PERFORMANCE EVALUATION
In this section, we evaluate our proposed solution using the Manhattan road topology and we expose results to discuss the impact of our heuristic on time and CPU calculation costs.
3.3.1/ CASE STUDY
Manhattan is one of the most dense borough of the New York city, it is of 87.46Km2 of size with approximately 28Km2 the size of water. Most of the Manhattan roads are unidirectional which leads
sometimes to a bigger time consumption to reach a near point and can affect the ﬁnal results of the proposed algorithm (see ﬁgure 3.3). So, to test our proposed algorithms, we extract the manhattan topology in an XML format using OpenStreetMap (OSM)2, then we treat it to eliminate redundancy and keep only roads to be able to use them for circuits construction in the ﬁrst heuristic.
3.3.2/ RESULTS
We ﬁrstly evaluate the number of harvesters given by the initial solution (Best Insertion algorithm) and the ﬁnal one given by the neighborhood heuristic. Then, we calculate the CPU time consumed
by each of them to give the solution. Initially, we set TMAX to one hour and we start the execution.
Results are summarized in table 3.2 where each value represents an average of twenty runs. We observe that the number of harvesters given by the initial best insertion algorithm is approximately optimal and the time consumed by this latter is higher than the Neighborhood time. This is due to
the higher value of TMAX which gives the possibility to the BI to loop several times and increase
2http://openstreetmap.fr.

40 CHAPTER 3. OPTIMIZED DEPLOYMENT OF DATA HARVESTERS FOR URBAN SENSING

Figure 3.3 – Manhattan roads topology

the circuit length as the application time-constraint is respected. So, in this case, we can limit our optimization to the BI and we do not need to consume more time in the neighborhood heuristic.

Algorithm Best Insertion Neighborhood

Harvesters’ Number 24 21

CPU Time (ms) 47 30

Table 3.2 – Best Insertion vs Neighborhood heuristics

In ﬁgure 3.4, we depict the evolution of the harvesters number depending on the application time-
constraint. The x axis represents TMAX value increasing from 15min to 2hours and y axis represents the number of deployed harvesters for each value of TMAX . The ﬁgure demonstrates the impact of
the time-constraint rigidity on the ﬁnal solution of our heuristics where the number of harvesters
rapidly decreases when TMAX increases. We need a high number of harvesters for TMAX =15min (73 harvesters) where we need only 5 harvesters for TMAX =2hours. Hence, in the ﬁrst case, we should collect information and take a global overview of a topology of 87Km2 in 15 min.

Harvesters’ number

80 70 60 50 40 30 20 10
0 0

Harvesters vs Tmax

20

40

60

80

100

120

Tmax(Min)

Figure 3.4 – The number of harvesters vs Tmax

3.4. CONCLUSION

41

Average CPU time (ms) Average CPU time (ms)

80 70 60 50 40 30 20 10
0 0

80 CPU time vs Tmax
70

60

50

40

30

20

10

0

20

40

60

80

100

120

0

Tmax (min)

(a)

CPU time vs area size

20

40

60

80

100

Area size (%)

(b)

Figure 3.5 – Average CPU calculation time vs (a) Tmax and (b) topology size

Figure 3.5 (a) highlights the average CPU calculation time when the time-constraint increases. We
run the algorithms 10 times for each value of TMAX and we calculate the average CPU calcula-
tion time. We notice that the calculation time of the proposed heuristics increases from 15ms for
TMAX =15min to 81ms for TMAX =2hours. The time increase is due to the number of loops exe-
cuted by each heuristic because the time-constraint is being higher which means that it won’t be exceeded rapidly and the search is larger. However, it stays always reasonable and doesn’t evolve exponentially.
As far as we know, in case of a chemical attack or ﬁre, the size of the affected area rapidly increases to affect the surroundings. So, the given heuristics should continuously give faster solutions regarding the size of the area. To evaluate the ability of our algorithms to give an optimal solution at a minimum calculation time cost, we apply them to different sizes of Manhattan topology. We consider different percentages of the total topology as affected areas increasing from 15% to 100%. Results, in ﬁgure 3.5 (b), show that the CPU time of our proposed algorithms increases linearly when the size of the affected area increases. This means that even for a very large topology, the time to calculate the optimal solution stays reasonable and doesn’t jump rapidly to an exponential value.
Regarding the given results in table 3.2, ﬁgures 3.4and 3.5, we notice that our heuristics are able to deliver an optimal solution at a very reasonable time even if the size of the topology to be monitored is very large or the time-constraint increases. These results prove the higher performance of the given algorithms. In table 3.2, we also conclude that the Best Insertion heuristic is able to give
an approximative optimal solution especially for a high value of TMAX which means that we can
minimize the CPU time by limiting calculation to the ﬁrst construction solution.

3.4/ CONCLUSION
In this chapter, we propose an optimized deployment of data harvesters to monitor urban areas and be able to gather information for building sensing applications. We ﬁrst model the problem to identify objective functions, then we propose a Variable Neighborhood Search (VNS) heuristic to solve it. For this reason, we modify the greedy Best Insertion heuristic to give an initial solution for the problem. The given solution is used as an input for the neighborhood heuristic deﬁned by the

42 CHAPTER 3. OPTIMIZED DEPLOYMENT OF DATA HARVESTERS FOR URBAN SENSING
combination of the 2-Opt and String Exchange heuristics to get a ﬁnal global solution. The adoption of heuristics and not exact resolutions is imposed by the urban sensing applications’ requirements and the complexity of the problem when the monitored area is big. Experimental results given by the application of the algorithms to a Manhattan topology prove the efﬁciency of our proposals regarding the processing time and the number of resulting harvesters.
The optimized number of deployed harvesters in an area are traveling along speciﬁed circuits to gather information from vehicles and capture their own data based on embedded sensors. The collected data should be communicated to the central unit in a secure and efﬁcient manner to be exploited to get a global overview about the network and increase applications reliability. Thereby, we dedicate the next chapter to propose a secure geographic routing protocol to deliver securely data to a ﬁnal(s) destination(s).

4
SECURE DATA COLLECTION IN A
VEHICULAR NETWORK
4.1/ INTRODUCTION & PROBLEM STATEMENT
As stated above, vehicles capabilities are increasingly deployed by various kinds of applications to enhance the daily human life and satisfy its requirements. Sensing capabilities such as embedded sensors and cameras are used to collect several environmental information and internal diagnostics, whereas available communication technologies are used to exchange data with each others and enhance their knowledge. Figure 4.1 illustrates a simple data collection process which includes vehicles and infrastructure.
Figure 4.1 – Data collection in a vehicular network
Data collection protocols reviewed in section 2.2 propose several techniques to exchange and relay data between communicating nodes (vehicles and infrastructure) while exploiting existing communication capabilities. They rely on the cooperation between all network stakeholder and assume that all nodes will agree to communicate their collected data and forward received information from neighbors. However, in some cases, some malicious nodes may beneﬁt from this conﬁdence to threaten the network and affect running applications by acting on the data they receive or falsifying their own sent data. Several kinds of attacks that may be used by nodes with malicious intentions to harm the network which are summarized in subsection 2.4.1. Network and application attacks are considered the most dangerous classes due to their impact on network capabilities since they aim to slow down communications and disrupt running applications. For this reason, we focus in this chapter on the study of attacks which fall under these classes namely denial of service (DoS), Sybil, false alert and packet alteration attacks to ﬁrstly design a secure geographical routing protocol namely S-GyTAR able to protect exchanged data, then develop a prediction technique that contin-
43

44

CHAPTER 4. SECURE DATA COLLECTION IN A VEHICULAR NETWORK

uously monitors the network members and prevents from these attacks namely Intrusion Detection and Prevention System (IPDS).
Regarding the dynamicity of a vehicular environment, its unique characteristics via the frequently changing topology and lack of deployed infrastructure, it is highly recommended to imagine the worst case where interactions and information exchange between vehicles and ﬁxed third parties are not always guaranteed. For this reason, we base our proposals on a completely distributed architecture for vehicles monitoring and real-time information collection. In fact, the proposed architecture organizes the network members into one-hop clusters leaded by a carefully chosen node called cluster head (CH). The use of a clustered architecture in our case is motivated by three reasons. Firstly, due to speed limitations, stop signs and trafﬁc lights in an urban area, vehicles are often moving into groups which means that a formed cluster will hold along a road segment until a CH changes its way guaranteeing thus the architecture stability and low communication overhead. Secondly, it has been proven that cluster-based algorithms are more appropriate for a better delivery ratio and reduce broadcast storms [144] [149] [165]. Finally and as stated above, we cannot rely on infrastructure deployment especially in an emergency case which is the scenario of the European project CarCoDe.
In our designed secure routing protocol, we aim to consider a completely decentralized and realtime evaluation of the trafﬁc to identify malicious nodes and exclude them from the candidates’ list of data forwarders to guarantee that only normal (trusted) nodes participate to the data collection process, thus secure the data being exchanged. In fact, we based our work on the well known position-based protocol, GyTAR [87], previously designed within our team work. We beneﬁt from its consideration to the real-time trafﬁc and reshape it to continuously monitor vehicles to secure the routing. We consider, in this protocol, the trustworthiness of a node to deﬁne its sociability and eligibility to forward a packet. For this reason, the network is organized into a clustered architecture where a cluster head (CH) is responsible of its cluster members control to detect selﬁsh and misbehaving ones to evict them from the network and inform other members about that.
As a next contribution under the umbrella of secure and efﬁcient data collection, we have designed a new intrusion detection and prevention system (IPDS) which is also based on the same idea of network organization and monitoring to detect and prevent from potential attacks that may occur in a vehicular network. So, based on a continuous mutual monitoring in a promiscuous mode between vehicles in the same cluster, a prediction technique using the well known Kalman ﬁlter [1] and a classiﬁcation method, the IPDS aims to deal with various attacks such as DoS, Sybil and false alerts, detect and evict attackers before they harm the network performances. It is also able to face oscillating attackers and camouﬂage attack where a node behaves normally to gain the conﬁdence of its neighbors before to attack. So, IPDS targets to build a secure network and prevent running applications from potential disruptions and losses by detecting malicious nodes before they persist in their attacks, thus decreases the vulnerability window.
This chapter is divided into three main sections. In the ﬁrst section, we give a short overview about GyTAR. The second section is delegated to detail S-GyTAR, our ﬁrst contribution in this area, where we highlight the main building blocks of the routing technique, the network organization and nodes monitoring to collect real-time trafﬁc information and detect attackers. We devote the third section to study IPDS, where we detail the monitoring architecture, nodes classiﬁcation and their eviction from the network.

4.2. GYTAR OVERVIEW

45

4.2/ GYTAR OVERVIEW
GyTAR [60] is a geographic routing protocol based on vehicles positions exchanged periodically between vehicles using CAM messages (Beacons). Routing decisions in this protocol are made intersection by intersection based on a weighting method to choose the next intersection where a packet should be sent such as described in ﬁgure 4.2. The weights of intersections are calculated based on two factors: (i) the distance of the intersection from the ﬁnal destination of the packet, and (ii) the density of the segment leading to that intersection. The distance from a packet destination is given based on the geometric shape of roads, whereas the density of the segment is gathered based on clustered organization of vehicles moving through that segment. In fact, the segment is divided into equal small cells with the size of vehicle’s radio range, where a cluster head is chosen based on its closeness to the center of the cell to calculate its neighborhood and send the number back to the previous intersection. The density of the cell is included into a Cell Density Packet (CDP) and sent whenever the CH reaches the next intersection. During its passage by every CH, the CDP packet is augmented by the density of the cell leaded by that CH until reaching the previous intersection. When a packet holder reaches an intersection, it receives CDPs from all underlying intersections, it weights them, then forwards the packet through vehicles in the segment leading to the intersection with the highest weight.

Figure 4.2 – GyTAR routing strategy
4.3/ SECURE INTERSECTION-BASED ROUTING PROTOCOL FOR DATA COL-
LECTION IN URBAN VEHICULAR NETWORKS
The main concern of this routing protocol is to ensure a secure data exchange between moving nodes in a completely mobile network that lacks infrastructure such as RSU or eNodeB while considering real-time information about the trafﬁc, something that may lack in the majority of the reviewed protocols in section 2.2. The denial-of-service attack is the major security concern faced by the actual routing protocol. Therefore, a new distributed technique able to monitor the network members periodically is proposed. It is based on a cluster hierarchy where a cluster head evalu-

46

CHAPTER 4. SECURE DATA COLLECTION IN A VEHICULAR NETWORK

ates its neighbors behavior based on a reputation and trust model, identiﬁes attackers and alerts other nodes in the network. In the following we detail the trustworthiness management technique, network organization and the routing mechanism, then, we highlight the performance results of the proposed protocol.

4.3.1/ PROTOCOL DESCRIPTION
We devote this section to explain in details the different components of the proposed routing protocol including the reputation mechanism used to evaluate vehicles behavior, the way vehicles are classiﬁed and evicted from the routing process and how data are routed to a destination.

4.3.1.1/ REPUTATION & TRUST MODEL

Nodes in the network are judged regarding their behavior and interactions. This behavior is translated to a quantitative criterion to enable the evaluation. A metric named trust level is introduced to model the trustworthiness degree of each node that can vary according to its reaction in the road. We highlight in this subsection the trust value calculation of each node in the network.
A cluster-head in the network maintains a trust value for each one-hop neighbor. It is always listening to its neighbors generated trafﬁc to update their associated trust values. At the ﬁrst time a new vehicle enters to its range, it is considered trustworthy and an initial trust value equal to
1 is associated to it. After that, this value is updated according to its behavior. Let’s denote Ti j the trust value built by a cluster-head i for a node j. The CH captures all the trafﬁc generated by
each neighbor in its radio range and periodically evaluates its trust value. After each evaluation, we could guess that one node either keeps its normal behavior or tries to attack. For this reason, we introduce a new metric that reﬂects the reputation of the node after each evaluation and used later
on to get the trust value. The reputation of a cluster head i toward a node j at the n-th evaluation is denoted Rni j and is calculated according to equation.4.1.

Rni j =

λ ∗ Rni j−1 + (1 − λ) ∗ rin, j if n > 1 rin, j if n = 1

(4.1)

Rni j−1 represents the reputation of node j calculated after n − 1 evaluations and λ is a weighting fac-
tor between the latest evaluation and the previous ones, which is used to moderate and control the
impact of the last evaluation compared to the existing value (λ may increase or decrease depending on the variation of the latest behavior of the node in question). While rin, j is a note assigned by the cluster head i to the node j at the n-th evaluation and could be equal to -1 if the node behaves
maliciously and equal to 1 if it acts normally.
Because we aim to face the denial-of-service (DoS) attack and more precisely the resource exhaustion in our routing protocol as previously stated, the main criterion we are considering to evaluate the nodes is the number of generated/forwarded packets by each host. This metric is chosen to limit the network jamming with non useful messages and protect the available bandwidth from potential overloads, if we control the number of packets generated/forwarded by each node and ensure a fair partition between all of them regarding the bandwidth utilization. Therefore, we deﬁne a threshold
Pth to specify the highest number of packets a normal node could send during the monitoring period
without being considered malicious. Firstly, this threshold is chosen to be equal to the number of packets sent by the cluster head as it is considered to be the most trustworthy node, then it should take the value given by the average number of packets sent by all non malicious vehicles. In fact,

4.3. SECURE INTERSECTION-BASED ROUTING PROTOCOL FOR DATA COLLECTION IN URBAN VEHICULAR

a CH maintains for each node an association between its identiﬁer and its generated packets to keep a track of their number and compute them. For this reason, the time space is divided into different intervals controlled by a timer and counted using a local counter. At the expiration of a timer, the CH evaluates all nodes in its association table where the number of packets is compared to the deﬁned threshold. At this stage of node evaluation and packets comparison, two possible
cases may appear, where Nbipjacket is the number of captured packets by CH i and generated by neighbor j (includes all packets for all destination and either locally generated or forwarded from
other sources):
- Case 1: If Nbipjacket ≥ Pth, the node has excessively generated or forwarded a high number of
packets compared to the ﬁxed threshold, which means that it could be suspected as a potential
attacker aiming to jam the network, so it is punished by the CH and rin, j = −1.
- Case 2: If Nbipjacket < Pth, the node has generated or forwarded a normal number of packets and
didn’t try to harm the network by non useful forwarding, so it shall be considered by the CH as a
normal node and its reputation value will be positive by rin, j = 1.
When the reputation related to a node j is computed at the end of every time interval, a trust value (Ti j) varying between 0 and 1 should be attributed to j and registered by the CH based on equation 4.2 where n is the number of evaluations (n-th time interval). This trust level value is later on used
to classify vehicles and identify malicious ones to evict them from the routing process. It is kept updated at each time interval based on vehicles reputations.

Ti j = Max{Ri j/n, 0}

(4.2)

4.3.1.2/ PERIODIC GATHERING OF TRAFFIC DATA & ROUTING
Data, in the network, is routed using a geographic routing protocol which deploys the greedy forwarding technique. In fact and as stated above, the actual work is based on a previous routing mechanism namely GyTAR where the packet is forwarded intersection by intersection until it reaches its ﬁnal destination. The selection of the next road segment where the packet should be sent is made based on a real time collection of information about roads densities. Data about trafﬁc is gathered based on a cluster organization proposed in GyTAR. In this work, we propose to secure this mechanism as follows. Each segment is divided into small cells and the trustworthiest and nearest node to the center of a cell is chosen as a cluster head to collect information about trafﬁc. The trustworthy node is identiﬁed using a pre-processing phase at the beginning of the network organization where all nodes in a cluster are mutually monitoring for a period of time to get an initial idea about the trust level of each vehicle. This pre-processing phase leads, therefore, to the choice of the node with the highest trust level to monitor nodes within the cell. After choosing the ﬁrst CH, the maintenance of the architecture and the swapping of CHs would be simple as this one knows about all the trusts of its neighbors, it will directly choose the trustworthiest node to be a CH before getting out from the cell. The information in a cell (one-hop cluster) encompass the density of nodes in such a cluster and the trust level of each one. Therefore, each cluster head monitors its one-hop neighbors, identiﬁes their reactions and behaviors regarding their packet generation rate and classiﬁes them into two categories: normal and malicious vehicles. This classiﬁcation is done based on the trust level value of each node calculated and updated based on the rules described in the previous subsection.
A cluster head in a cell maintains a list of its neighbors and associates to each one a trust value. It creates two types of lists to classify and differentiate nodes’ behaviors: a black and a white list. The white list is used to store the neighbors’ identiﬁers that are normally behaving and considered to be

48

CHAPTER 4. SECURE DATA COLLECTION IN A VEHICULAR NETWORK

trustworthy whereas the black list contains nodes’ identiﬁers that behave maliciously and considered as attackers that require ejection from the network. So and as the CH is always listening to the network, it evaluates the trustworthiness of every neighbor continuously in a periodic manner as
stated above. After each evaluation and trust level update, a node j is either considered trustworthy or malicious based on the following rules where Ti j is the trust value calculated by the cluster head i for the node j and d is a maliciousness threshold indicating the tolerated limit value of trust to
consider a node trustworthy, which may vary depending on the application security requirements.
- First case: If Ti j ∈ [d, 1] the node j is considered trustworthy and its identiﬁer is stored in the
white list. This means that it can be used by any other node as a potential forwarder for its packets in a secure manner,
- Second case: If Ti j ∈ [0, d[ the node j is classiﬁed malicious and stored in the black list to be
later ejected from the network. It can not be used at any packet forwarding process and its packets won’t be treated by other nodes neither forwarded.
After the collection of information about its neighbors, their evaluation and classiﬁcation, the CH calculates the density of its cluster by only counting the number of nodes contained in the white list. This strategy of calculation favors the roads with the minimum number of malicious nodes when selecting the next intersection through which we have to route a packet during the routing phase. Figure 4.3 highlights the complete process of monitoring in a cluster and the information exchange between CHs to build a global overview about trafﬁc in a road segment. Therefore, the CH should react in two ways: informs its one-hop neighbors about malicious nodes and communicates the information to the other clusters. For this reason, we rely on the so-called CDP (Cell Density Packet) packet deﬁned in GyTAR and we reshape it to add information about monitored neighbors in each cell.

Figure 4.3 – Cluster monitoring & information exchange in S-GyTAR
So, the density of the cluster and identiﬁers of nodes stored in the black list are fulﬁlled in the CDP packet, which is later on diffused in the one-hop cluster and relayed by the farthest node in

4.3. SECURE INTERSECTION-BASED ROUTING PROTOCOL FOR DATA COLLECTION IN URBAN VEHICULAR

the radio range to the next cluster head. It is relayed hop by hop from one CH to another until reaching the intersection. When a member in the cluster receives a CDP, it stores the contained identiﬁers of malicious nodes and ejects them from its routing table. However, when the packet reaches a CH, it is treated in a different way. In fact, the CH ﬁrstly extracts the list of black nodes and stores them into its own black list, then it updates the packet by adding its cluster density and black list and ﬁnally it forwards it to the next CH and informs its neighbors about the new black list it has. When a CDP reaches an intersection, the forwarding and update mechanisms are stopped for two reasons: the ﬁrst one is to limit the ﬂooding of all the network by a big number of messages that could not be useful at a certain time because of the frequent change in the network topology and density, and the second reason is that the information a CDP contains are really needed at the end of a segment because the routing decisions are made at each intersection. So, the node carrying a packet calculates the density of the segment from which it has received the CDP and stores black listed nodes. After the reception of the different CDPs from all underlying segments, a weight is calculated for each one by combining the white nodes density included in the packet and the distance of its next intersection from the destination (equation 4.3). Finally, the road with the highest weight value is chosen to forward the packet through it until reaching its end to repeat the same process of intersections weighting.

Weight( j) = α ∗ f (Dk) + (1 − α) ∗ g(Tk)

(4.3)

f (Dk) symbolizes the distance function of an intersection k from the destination of a packet, g(Tk)
is the density function of the segment calculated based on information received in a CDP packet

that has traversed the segment and α is a weighting factor to balance the impact of each crite-

ria on the routing decision. For the distance that separates the candidate intersection from the

destination node, various methods can be deployed to calculate it which are either based on the

geometric shape of roads using the Dijkstra algorithm which consumes more time or based on the

direct distance between coordinates (Dk,d = (xd − xk)2 + (yd − yk)2, where (xd, yd) and (xk, yk)
are respectively the destination and intersection coordinates). In our protocol, we consider to use

the second method for distance calculation to decrease the time consumed in the decision pro-

cess. Finally f (Dk) and g(Tk) are calculated in the same manner as in GyTAR based on equations

4.4 and 4.5. Dp is the fraction between the distance of the candidate intersection to the desti-

nation

and

the

actual

one

which

represents

the

closeness

of

a

point

to

a

destination

(Dp

=

Dk,d Dh,d

),

σ=

1 Nc

Nc
∗ ∑ (Ni − Navg)2
i=1

is

the

standard

deviation

of

clusters

density,

Navg

=

1 Nc

Nc
∗ ∑ Ni
i=1

is

the

average number of trustworthy nodes per cluster (Nc is the number of clusters per segment and Ni

represents the number of trustworthy nodes per cluster), and Ncon represents the ideal connectivity

degree in a cluster and will be set to 12.

f (Dk) = 1 − Dp

(4.4)

g(Tk)

=

min(

σ

1 +

1

∗

Navg Ncon

,

1)

(4.5)

In the selected segment, a packet is routed based on a greedy forwarding technique where the selection of a forwarder is based on the prediction of the next position of neighbors using their speeds, headings and directions. So, the closest node to the next intersection of the segment is chosen based on this predicted position. A recovery strategy using the technique of store and forward (SNF) is also provided to face intermittent connections and local optimums. The pseudo-code of the greedy routing technique along a segment together with the position prediction algorithm are highlighted successively in algorithms 3 and 4.

50

CHAPTER 4. SECURE DATA COLLECTION IN A VEHICULAR NETWORK

Algorithm 3 Pseudo-code of the greedy routing along a road segment

1: Input: Set of N neighbors with their positions pi, speed vi, heading hi and time ti, empty set

PP to store predicted positions, information of the packet carrier c (pc, vc, hc,tc) and a forwarder

Nf = 0.

2: Output: A chosen neighbor Nf as a next packet forwarder.

3: for i = 1..N do

4: Predict neighbor position (pi, vi, hi, ti);

5: Store predicted position in PP(i);

6: end for

7: Predict carrier position (pc, vc, hc, tc);

8: Get distance to next intersection dPPc of PP(c);

9: for j = 1..N do

10: Get distance to next intersection dPP j of PP( j);

11: if dPPc > dPP j then

12:

Nf = j;

13: end if

14: end for

15: if Nf == 0 then

16: Nf = c (Store and Forward mode)

17: else

18: Forward packet to Nf ;

19: end if

Algorithm 4 Pseudo-code of the position prediction algorithm

1: Input: A neighbor i with information about its position, speed, heading and time (pi, vi, hi,ti) 2: Output: A predicted position of neighbor i PP(i).

3: δt = Now − t (time in seconds);

4: if vi == 0 then 5: PP(i) = pi;

6: else

7: if hi ≥ 0 && hi ≤ 360 then

8:

if cos(hi ∗ Π/180) ≥ 0 then

9:

PP(i).x = pi.x + vi.x ∗ δt ;

10:

else

11:

PP(i).x = pi.x − vi.x ∗ δt;

12:

end if

13:

if sin(hi ∗ Π/180) ≥ 0 then

14:

PP(i).y = pi.y + vi.y ∗ δt;

15:

else

16:

PP(i).y = pi.y − vi.y ∗ δt;

17:

end if

18: end if

19: end if

4.3.2/ PERFORMANCE EVALUATION
In this section, we present the performance study conducted on our secure intersection-based routing protocol. In the ﬁrst subsection, we introduce the simulation environment and metrics deployed

4.3. SECURE INTERSECTION-BASED ROUTING PROTOCOL FOR DATA COLLECTION IN URBAN VEHICULAR

for validation. Then, we devote the second subsection to highlight and discuss the different results in hand.

4.3.2.1/ SIMULATION ENVIRONMENT
We implement our approach using NS3.171 simulator and we conduct simulations in a Manhattan
grid area of size 3000*3000m2, composed of 9 intersections with a segment length of 1000m. The
different simulation parameters are summarized in the table 4.1. For the other parameters related
to the calculation of trust level, we have chosen to ﬁx: λ = 0.5 to make equitable the impact of
previous and actual evaluations and d=0.5 while considering applications that did not require a high security level. We ﬁrstly, analyze the capability of our proposed mechanism to detect malicious nodes where we vary the number of malicious nodes in the network and see its impact on the detection ratio of the protocol, then, we highlight its impact on the end-to-end communication delay in a malicious environment and its generated overhead for the monitoring and informing processes.

Parameter
Simulation area Simulation time Road length Number of vehicles Speed Radio Range Monitoring period Pre-processing period Propagation loss model Propagation delay model Malicious vehicles ratio

Value
3000*3000m2
400s 1000m 100 - 400 30 - 50 Km/h 250m 5s 20s Two-Ray Ground Constant Speed 10% - 40%

Table 4.1 – S-GyTAR Simulation parameters

4.3.2.2/ SIMULATION RESULTS & ANALYSIS
In this section we present the simulation results and analyze them in order to prove the perfor-
mances of the routing protocol. We vary the number of malicious nodes between 10% and 40%
for various densities (number of nodes between 100 and 400) and we analyze its impact on the capability of the monitoring technique to detect malicious vehicles. Figure 4.4 highlights the detection rate variation of our proposed mechanism when the number of vehicles increases. Results show that our designed intrusion detection system (IDS) is able to detect all the malicious nodes when they are a little minority in the network (10% to 20%). However, its performance decreases slightly when this number increases (30% and 40%), but it still stay capable of detecting more than 92% of the malicious nodes which is a very reasonable and promising result when the number of vehicles in the network reaches 400. This decreasing in the detection rate is due to the tendency of malicious nodes to build false information and condemn normal nodes when their number becomes very important in the network which makes difﬁcult for CHs to differentiate and get the right
1http://www.nsnam.org

52

CHAPTER 4. SECURE DATA COLLECTION IN A VEHICULAR NETWORK

decisions because the majority of information will come from malicious vehicles. But, in general, our proposed monitoring and malicious nodes detection technique shows a very good accuracy in detecting DoS attacks because when the number of malicious vehicles exceeds 40% the network should be subsequently quarantined and no more considered trustworthy for potential use by deployed applications.

Detection rate (%)

100 99 98 97 96 95 94 93 92 91 90 100

Malicious=10% Malicious=20% Malicious=30% Malicious=40%

200

300

400

Number of vehicles

Figure 4.4 – The Detection rate

In ﬁgure 4.5, we analyze the overhead generated by the proposed monitoring technique compared to the basic routing protocol. In fact, we do not introduce any new packets to monitor and inform nodes about black lists. The monitoring is done in a promiscuous mode where the CH is continuously listening to its neighbors without any need to exchange more messages with them to count their reputations and update their locally built trust levels. Therefore, the only generated overhead is due to the introduction of black lists in the CDP packet and their update by each CH. So this overhead is relative to the number of detected malicious nodes. For this reason, we consider, in the plot, the worst case when the number of malicious nodes is very high (40% of the network) where the size of the black list would be the biggest one, which leads to the highest overhead. The given results show that our proposed mechanism only adds a little overhead compared to the basic protocol. However, the increase of this overhead with the increase of vehicles density is explained by the fact that the rate of generated control packets is proportional to the number of vehicles in the network.
We, also, study the ability of our monitoring and routing technique to limit the inundation of the network with packets coming from malicious vehicles as a malicious node tries to overload the
bandwidth in a large region by ﬂooding its packets in k-hops to increase the end-to-end communi-
cation delay. So, this could impact the delivery of some packets as they are dropped at different layers if they are not received before a certain time limit. Figure 4.6 shows the difference between end-to-end communication delays variations using a basic GyTAR (B-GyTAR) and our secure GyTAR (S-GyTAR) with the presence of 10% of attackers over the network. The given results prove the effectiveness of our proposed mechanism regarding the limitation of the end-to-end delay. Therefore, the mechanism stops the forwarding of packets issued from a detected malicious node which
minimizes the overload of the bandwidth from k-hops to one hop and by consequence decreases
the end-to-end communication delay.
We can state that the proposed intersection-based routing protocol, which is enabled with a mon-

4.3. SECURE INTERSECTION-BASED ROUTING PROTOCOL FOR DATA COLLECTION IN URBAN VEHICULAR

Overhead (Kb/s)

5 B−Gytar S−Gytar
4

3

2

1

0

0

100

200

300

400

Number of vehicles

Figure 4.5 – The generated overhead

65 60 55 50 45 40 35 30 25 20 15 10 5 0
100

B−Gytar S−Gytar

200

300

400

Number of vehicles

Figure 4.6 – The end-to-end communication delay

End−to−end delay (Sec)

itoring mechanism able to continuously control vehicles behavior and detect malicious attacks, increases the security of the data collection process and protects applications from possible malfunctions or disconnections (decrease the end-to-end communication delay). It is completely distributed without relying on deployed infrastructure based on a mutual monitoring and judgment between mobile nodes, which ensure its processing in sparse networks and encourage selﬁsh vehicles to cooperate to have their data relayed.
The major weakness of this protocol together with its intrusion detection system resides in the fact that it is reactive and detects attacks after they happens which may increase the vulnerability window, and its specialization on DoS attacks which keeps doors open for other kinds of attacks. For this reason, we propose in the next section our new intrusion detection and prevention mechanism able to face various kinds of attacks and stop them before threats persist. Indeed, this prediction mechanism is based on a distributed architecture similar to S-GyTAR to monitor nodes, which makes it easy to integrate to the routing protocol to replace its basic intrusion detection mechanism

54

CHAPTER 4. SECURE DATA COLLECTION IN A VEHICULAR NETWORK

in order to offer counter measures to face a larger set of attacks with an enhanced prediction capability.

4.4/ A DISTRIBUTED DETECTION AND PREVENTION SCHEME FROM MALICIOUS NODES IN VEHICULAR NETWORKS (IPDS)
Despite the huge availability of intrusion detection systems proposed in the vehicular area and variety of the deployed trust models, which were reviewed in section 2.4.1, all of them are similar in the fact that they are reactive mechanisms able to detect an attack after it happens and none of them has the ability to prevent from malicious attacks. This weakness could not be ignored especially in case of applications that require a high security level. For this reason, we propose a new security mechanism namely IPDS to fulﬁl some vulnerabilities based on the following techniques: (i) the enhancement of the cooperation between all members in the network based on a cluster-based architecture, (ii) the use of the Kalman ﬁltering technique to make accurate predictions about vehicles behavior and (iii) the introduction of a new classiﬁcation technique to deal with vehicles oscillating their behavior and handle them differently from nodes which attack continuously.
In fact, some proactive mechanisms based on trust modeling are proposed in the literature and are mainly based on either a Hidden Markov Model (HMM) or Kalman ﬁlter. In [139], authors consider to treat the problem of trust between agents based on the context of information exchanged between them while proposing a HMM for trust prediction. In fact, a HMM has the ability to ﬁnd the optimal state for a Markov process given past states/observations. Therefore, authors based their approach on that property to predict the next state of the trust model. For the deﬁnition of the considered context, they extract a set of features depending on the application type, calculate their entropy and gain, then combine them using multiple discriminant analysis. This results in an observation probability based on the outcomes of past transactions and associated transformed feature sets. In [47], authors introduce the use of Kalman ﬁltering technique in pervasive systems to autonomously predict trustworthiness of a service provider by a client. The idea is that each client stores the services proposed by a provider with their values of quality, then, based on its previous experience it compares the difference between what is promised and what is really provided and assigns a trust value for each provider to be used afterward for the prediction of its behavior in the next transaction. In our IPDS, we aim to explore the idea of using Kalman ﬁlter because it is a lightweight mechanism which does not require big processing resources and offers the possibility of parameters’ regulation based on the given outputs [47]. For this reason, we give a short overview about the Kalman ﬁlter in the ﬁrst subsection before detailing the IPDS architecture and its different components in the second one.
4.4.1/ KALMAN FILTER OVERVIEW
Kalman ﬁlter is mainly based on a set of recursive mathematical functions able to provide an optimal way to estimate the current state of a dynamic system starting from observations that may contain some errors due to the lack of accuracy in the measures provided by connected sensors[47]. Kalman ﬁlter is the best linear estimator especially in the case that the introduced noise is Gaussian because it minimizes the mean square error of estimated parameters. To simplify the understanding
of Kalman ﬁlter, we consider a mono-dimensional system with a state x ∈ IRn(n = 1) and governed by equation 4.6, where xt+1 is the state of the system at time t+1 given by adding a random Gaus-

4.4. A DISTRIBUTED DETECTION AND PREVENTION SCHEME FROM MALICIOUS NODES IN VEHICULAR NE

sian noise Vt to the previously calculated state xt at time t. xt+1 = xt +Vt ,t = 1, 2, 3...

(4.6)

To calculate the state of the system at time t+1, we need to introduce a kind of observations yt that
will be periodically made at each time t. But these observations are also subject to a Gaussian noise and depends on the actual state of the system (Equation 4.7).

yt = xt +Wt,t = 1, 2, 3...

(4.7)

To determine the best estimate of the next system state, Kalman ﬁlter combines the actual known state with the noisy measured observations under the assumption that noises are Gaussian with
covariances Qt and Gt consecutively to result these equations (4.8 and 4.9):

xt+1 = xt + ωt /(ωt + Gt ) ∗ (yt − xt ) ωt+1 = ωt + Qt − ωt2/(ωt + Gt )

(4.8) (4.9)

By looking at equation 4.8, we can notice that a prediction for the state of the system at t+1 is
given by the previously predicted value xt at t augmented by a term proportional to the difference between the prediction and its relative observation given that ω0 = E[(y0 − x0)2]. We can observe
from equation 4.8 and equation 4.9 that the impact of noise on the weight of each term in the
estimated value is crucial. If the signal of the noise imposed to the observation (Gt ) is high, the
impact of this latter is lower than previous estimations and its impact increases when the noise
decreases. The same impact could be seen for the noise imposed to the estimate which either
increases the estimation impact on the prediction (low Qt ) or decreases it (high Qt ).

4.4.2/ NETWORK MONITORING & BEHAVIOR PREDICTION IN IPDS
As mentioned previously (section 2.4.1), network and application attacks, mainly, target the network communication’s capabilities and running applications resulting losses in both client and service provider sides. However, malicious vehicles may attack in a continuous manner or only for a limited period then return to the normal behavior due to some internal disfunctions in hard or softwares processing or communication systems. In the reviewed related works, all of them are treated in the same way and classiﬁed malicious which is not very reasonable because a node will be condemned forever due to a short period of attack or unintentional misbehavior and automatically evicted from the network. For this reason, vehicles which attack only for short periods should be given a chance before being evicted especially when the trafﬁc density is low and there is a need for vehicles to help in the routing process for example. Therefore, a new distributed technique able to periodically monitor the network members and predict their behaviors is proposed while treating the two kinds of attackers differently. We assume, in our proposition, that all vehicles in the network are equipped with the necessary cryptographic material (such as elliptic curve cryptography in the standard IEEE1609.2) to ensure messages authentication and signing. So, the proposed mechanism uses existing communication and security standards and enhances them with new capabilities. It is based on a clustered hierarchy where a cluster head observes its neighbors behavior based on a Kalman ﬁltering prediction, identiﬁes future attackers and alerts other nodes in the network. However, to make a Kalman ﬁlter-based mechanism give good predictions at the output, we need two kinds of information to be introduced at the input. The ﬁrst entry is a kind of observations made periodically by the system to verify the estimated value of the Kalman ﬁlter and which will be the

56

CHAPTER 4. SECURE DATA COLLECTION IN A VEHICULAR NETWORK

trust level calculated by monitoring agents. The trust value calculated after an estimation serves in one hand as a proof for the prediction validity and improve the future results (at time t+1) of the Kalman ﬁlter by adjusting its parameters and introducing the impact of real behaviors in the other hand. The second entry is the previously predicted information. In the following, we detail the monitoring architecture with the proposed trust models and highlight the used technique for behavior prediction each in a subsection.
4.4.2.1/ MONITORING ARCHITECTURE
The proposed intrusion detection and prevention system (IPDS) is based on a completely distributed architecture to monitor the network periodically and continuously, predict the vehicles’ behavior and detect malicious ones. The IPDS organizes vehicles in the network into one-hop clusters and classiﬁes them into three categories: (i) Cluster head (CH) which is the decision maker, (ii) Recommenders which are also referred as monitor agents, speciﬁc nodes chosen by the CH to collect trusts about nodes in their vicinity and, ﬁnally, (iii) Normal vehicles which are the cluster members or monitored nodes. The cluster head has two major roles: it monitors its one-hop neighbors, keeps tracks of their behaviors and trustworthiness to evaluate their future reactions using a Kalman ﬁlter and, also, chooses recommenders to be its monitor agents in the cluster under its responsibility.
The organization of our monitoring architecture passes through two different steps: the ﬁrst involves the CH election and maintenance which are described in the following and the second one is the recommenders designation which will be explained later on in subsection 4.4.2.4. In fact, we employ in our IPDS a new more ﬂexible clustering method different from the one used in S-GyTAR because clusters in S-GyTAR are static which limits their lifetime and engenders a frequent clustering and CH election processes, thus causing more overhead.
(i) Bootstrapping phase: At the beginning of the network organization and vehicles categorization, we assume that nodes are authenticated and certiﬁcates are distributed. Nevertheless, the possession of a certiﬁcate does not guarantee that its holder will not misbehave as indicated before. Therefore, each node in the network has to keep listening to the trafﬁc of its neighbors and gathers information to get initial knowledge about them and evaluates their trust levels. So, at the end of this phase, a trust value is assigned to each node by its neighbors. The bootstrapping phase is necessary to make nodes know about their neighbors, build trust values and identify potential use of fake identity in the election process of the CH. This phase should last for a period of time which depends on various parameters related to the network namely its density, vehicles’ communication capabilities and authentication time.
(ii) CH election phase: After the bootstrapping phase, each vehicle knows about the trust levels of others in its vicinity. Therefore, a CH election process is initiated and each node builds a message (CHEAD MESSAGE (IP Address, Trust Value)) in which it introduces the address of the neighbor who has the highest trust value with its trust level and diffuses it in its radio range. At the reception of a CHEAD MESSAGE, one node compares the received trust value with the value it has and changes its previous address and trust value of CH to the new received ones if the newly received trust is greater than the local one and ignores the message if it is not the case. Figure 4.7(a) highlights the cluster-head election process.
(iii) CH maintenance: The cluster head maintenance process is managed by the CH before getting out from the cluster. In fact, the CH periodically calculates the distances separating it from its cluster members, whenever these distances are higher than a threshold (variable parameter which could be the radio range) it has to designate a new CH. The CH, thereafter, sends the address and trust value of the trustworthiest vehicle it has monitored along its leading period to every cluster member.

4.4. A DISTRIBUTED DETECTION AND PREVENTION SCHEME FROM MALICIOUS NODES IN VEHICULAR NE
Cluster members update and store the new cluster-head address with its trust level. Figure 4.7(b) gives an overview about the CH update.

Figure 4.7 – Cluster-head election and maintenance in IPDS

As deﬁned above, a Kalman ﬁlter is based on previous estimations and periodic observations made by the system. In our case, we are interested to predict the trust level of a neighbor vehicle. So, the CH should collect observations from its environment about all trust levels of vehicles in its vicinity based on direct and indirect interactions with them. These observations could be of two types: (i) the ﬁrst is the experience-based trust, which is the only type collected by a recommender based on direct interactions with monitored nodes, and (ii) the second represents recommendations received by the CH from its monitor agents. Unlike recommenders, a CH has to combine these two types
of trusts to make decisions. So, the total trust Ti j deﬁned to be used as an observation built by a cluster-head i towards a member j is given by equation 4.10 where TiRj is the mean value of trusts received from relative recommenders, TiPj represents the CH’s experience-based trust and α is a
weighting factor used to balance the impact of received recommendations on the local knowledge of the CH.

Ti j = α ∗ TiPj + (1 − α) ∗ TiRj

(4.10)

The value of α depends on recommenders accuracy and shouldn’t be ﬁxed to one value all the time. Therefore, its value has to be calculated and updated after each evaluation. So, α increases when
the average value of recommenders’ trusts increases to boost their impact on the decision and decreases when their average value decreases to favor the experience of the CH. The experiencebased trust calculation is detailed in the next subsection followed by an investigation of the technique to calculate recommendation-based trusts in subsection 4.4.2.3.

4.4.2.2/ EXPERIENCE-BASED TRUST
While moving in the network, a vehicle has the possibility to interact and exchange information with every neighbor it has. Therefore, it is able to build a local knowledge about its one-hop neighbors by monitoring their links in a promiscuous mode. This latter allows a node to hear continuously all generated trafﬁc by each neighbor. In our actual work, we are interested to the most dangerous

58

CHAPTER 4. SECURE DATA COLLECTION IN A VEHICULAR NETWORK

attacks that may engender multiple damages in materials or human lives. Among these, we focus on Denial of Service, Sybil attack, false alert and packet alteration to develop a technique to verify all of them based on direct interactions between nodes and build an experience-based trust. In the following we describe the policy to build and update the trust relative to each attack type. Therefore, in the veriﬁcation process, we verify successively attack by attack before to update the trust value. So, whenever a malicious vehicle initiates a combined attack (e.g. Sybil and false alert), the proposed IPDS is able to detect this. In fact, when an attack is detected, it continues to verify the other attacks before updating the trust level of the vehicle in question. This successive veriﬁcation of all the attacks guarantees a high efﬁciency level and eliminates the possibility of cheating the system.
1- DoS Attack: The DoS covers different types of attacks such as resource exhaustion where the attacker jams the communication medium in the network, black hole and selective forwarding where the malicious node decides to not forward all received packets or a part of them. In such kinds of attacks, we should concentrate on the generated trafﬁc and packets passing by the CH and its monitor agents. In fact, the CH/Recommender analyzes every communication in its vicinity, captures and keeps tracks of all received and sent packets to see if the monitored nodes are not maliciously behaving (cooperating or not abusing of bandwidth use). The packet delivery ratio (PDR) is the base of our calculation and decision process to update the reputation values of neighbors. Therefore, the time axis is divided into equal time slots during each slot, the CH/Recommender calculates the PDR of all neighbors it has. At the end of each time slot, an average PDR (Equation 4.12) is calculated and all the PDRs of neighbors are compared to that value to see if a vehicle is normal or not. In fact, to determine the degree of trustworthiness of such a node as well as its efﬁciency, a reputation value is set and updated after each time slot based on equation 4.11 .

Rni j =

λ ∗ Rni j−1 + (1 − λ) ∗ rin, j if n > 1 rin, j if n = 1

(4.11)

Where Rni j is a reputation value associated to node j by i after n evaluations, rin, j that could take
one of the two values:1 if the evaluated node is cooperating and -1 in the opposite case as seen
from the ith point of view following equation 4.13, and λ is a weighting factor.

m
∑ pdravg = pdr j/m j=1

(4.12)

rin, j =

1 if |pdravg − pdr j| < pdrth −1 else

(4.13)

The pdravg is the average value of the packet delivery ratio, pdr j is the ratio of the j-th neighbor of the i-th CH/Recommender and pdrth is a threshold that allows to bound the nodes’ delivery ratio between two critical values (Min and Max). The use of a pdrth is necessary to prevent vehicles
from overloading the network by an excessive forwarding and also motivate them to forward the received packets to their destinations. Because its value depends on network parameters such as
the average packet delivery ratio and number of neighbors accessing the channel (pdrth calculation
is detailed in subsection 4.4.2.5), it allows to detect the selective forwarding and black hole attacks as the packet delivery ratio of each vehicle should respect the indicated limits.
The reputation Rni j is used to get the trust value relative to each node j as seen by i. The trust denoted Tipj , which reﬂects the experience-based trustworthiness of node j, is given by equation 4.14 and varies between 0 and 1 where n is the n-th time slot (or evaluation).

4.4. A DISTRIBUTED DETECTION AND PREVENTION SCHEME FROM MALICIOUS NODES IN VEHICULAR NE

Ti

p j

=

Max{Rni j/n,

0}

(4.14)

Trusts, calculated by each recommender, are periodically sent to the cluster-head where a decision about the behaviors of vehicles is made.
2- False alert and packet alteration: These kinds of attacks are classiﬁed among the most dangerous ones especially when they are related to safety applications. To detect the malicious node in these two cases, the CH and recommenders have to verify every disseminated alert to conﬁrm
the trustworthiness of the sender. The veriﬁcation is done based on the coordinates (xa, ya), time of alert ta and node velocity at the alert time Vela indicated by the message. Usually, when a vehicle
detects an accident or any other abnormal activity in the road, it should reduce its velocity and/or change its moving line before sending an alert to others to inform them. For this reason, a comparison between the real velocity of the vehicle and its diffused one in the alert is crucial to verify the exactness of an alert. Therefore, after receiving an alert from a direct neighbor, the monitor agent waits for the next hello message sent by the same neighbor containing the new coordinates
(xh, yh), time th and Velh to compute the real velocity based on equation 4.15 and compare it with the previously indicated one in the alert, where d = (xh − xa)2 + (yh − ya)2 is the traveled distance
between the alert and hello time.

Velv = d/(th − ta)

(4.15)

So, if the condition described by 4.16 is not veriﬁed the node should be considered as a suspected attacker and its trust level is decreased.

RealAlert ⇔ Velv ≤ Vela&Velh ≤ Vela

(4.16)

The reputation of the node as well as its trust level are, thereafter, updated based on previously
described equations 4.11 and 4.14 with an rin, j that takes 1 if condition 4.16 is veriﬁed and -1 in the
opposite case.
3- Sybil attack: A Sybil attacker as deﬁned in section 2.4.1 sends multiple beacons pretending the existence of a fake vehicle in different places. To face this kind of attack, each node has to verify the real existence of every neighbor it has. Several works were reviewed in section 2.4.1 to face this attack due to its impact on the network consistency. Among proposed techniques, we cite the use of received signal strength (RSS), radio channel controlling and neighbor information. Although they are widely used to face a Sybil attack, some studies [83] demonstrate that the RSSbased Sybil attack detection has some limitations and the use of neighbor information technique is more promising in the detection process. Therefore, we aim to deploy a neighboring information technique to assess nodes’ trustworthiness and build their trust levels. For this reason, we extend the periodically exchanged beacons to support neighbors identities of the sender. Basically in a beacon, vehicles introduce their positions, speeds and generation time, but in our case each node has to identify all the neighbors in its radio range and introduce their identities in the message before to send it. Neighbors identities in the beacon message are important for the monitor agent in the Sybil attack detection process. So, a CH/Recommender has to store the received identities from vehicles in its vicinity, then compares their neighbors to identify fake identities created by a potential Sybil attacker. In fact, the main idea is that two nodes should not have the same neighbor for a well deﬁned period of time.
To ease understanding the trust level building mechanism, we present a simple scenario that in-
cludes an agent vehicle Mk and two of its neighbors from which it receives beacons Vi and Vj. We

60

CHAPTER 4. SECURE DATA COLLECTION IN A VEHICULAR NETWORK

assume that Vi declares h neighbors Ni = (n1i , n2i , ..., nhi ) in the beacon and Vj declares l neighbors Nj = (n1j , n2j , ..., nlj). After comparing identities of the two neighbors’ sets, Mk notices that they have a common neighbor (n1i = n2j ). The identity of the common node n1i should be stored in a local table and a backoff timer µi relative to that node should be calculated and triggered. After the expiry of the backoff, the monitor agent Mk veriﬁes if n1i is always a common neighbor for the two vehicles to update its trust value. The value of µi is variable and, generally, depends on neighbors’ velocities,
the width of the common area between their radio ranges and moving directions. Its value is get by
equation 4.17 when neighbors are moving in the same direction, while equation 4.18 is used to get
its value in the case of an opposite moving direction.

µi = d/(vel j − veli)

(4.17)

µi = d/(vel j + veli)

(4.18)

The d parameter represents the height of the common radio range between neighbors which varies depending on the moving directions. We assume that the velocity vel j of the vehicle Vj is greater than the velocity veli of vehicle Vi. To get the value of d, Mk has to distinguish between two cases:
(i) when two nodes move in the same direction, and (ii) when they are moving in opposite directions. Each deﬁned case is split into two cases in turn where the ﬁrst describes two nodes moving one in front of or perpendicularly (in intersection where nodes take different directions) to the other and the second concerns the case of a parallel moving (when overtaking). In ﬁgure 4.8, we explain the
calculation of the d value when neighbors are moving either in parallel or one in front of the other.

Figure 4.8 – Distance d calculation
After the expiry of the backoff time µi, Mk veriﬁes if the neighbors have always ni1 as a common neighbor. So, if ni1 is in neighbors’ lists of Vi and Vj, it should be considered as a Sybil node and
its reputation value and trust level are reduced. In the opposite case where the node is no longer a common neighbor, it should be considered trustworthy and its trust value will be increased. The
update of the reputation and trust level is made based on equations 4.11 and 4.14 with an rin, j taking
either 1 in case of a positive evaluation or -1 if negative evaluation.

4.4. A DISTRIBUTED DETECTION AND PREVENTION SCHEME FROM MALICIOUS NODES IN VEHICULAR NE
4.4.2.3/ RECOMMENDATION-BASED TRUST
To make a wider observation and increase the accuracy of vehicles behavior estimation, a CH should collect information about its neighbors and calculate their trust based on the experiencebased model if it is directly interacting with them and gather their related trusts from recommenders.
The CH calculates, afterward, the recommendations average (TiRk ) based on equation 4.19 to be
combined with the local observed trust before triggering the prediction and classiﬁcation process.

∑ TiRk

=

1 m

∗

m
Ti j
j=1

∗ TjRk

(4.19)

Where TjRk is the recommended trust for node k from recommender j, Ti j is the total trust assigned by the i-th CH to the j-th recommender and m is the number of recommenders.

4.4.2.4/ RECOMMENDERS’ CHOICE POLICY
A malicious node can initiate various types of attacks depending on its goals. It can launch a Denial-of-Service, Sybil, false alert, packet alteration or impersonation attack to disrupt the network functioning, cause roads congestion or even mortal accidents. A CH used alone in the detection process could be easily cheated by attackers especially if there are many of them. So to detect these attacks in an accurate way, a cooperation between the CH and other cluster members is highly recommended. Therefore, we opt for a mutual monitoring concept where a number
of nodes in the network called recommenders monitor their one-hop neighbors in a promiscuous
mode based on previously described rules and periodically communicate their experience-based
trust levels, which are identiﬁed as recommendations, to the CH (decision node) to be used in
the decision and classiﬁcation process. In fact, there exist two different architectures that could be deployed to designate recommenders in a vehicular network. The easiest way is to enable the monitoring in all vehicles and make all of them recommenders. However, this strategy engenders a big overhead which may lead to scalability problems. Figure 4.9 highlights the overhead evolution depending on the number of recommenders in the network. This latter increases with the number of recommenders, which leads to a trafﬁc congestion and bandwidth overload with control packets. For this reason, we have to maintain a trade-off between the detection rate of our prediction technique and its generated overhead. The second technique that could be deployed is able to decrease the control packet generation by minimizing the number of vehicles sending recommendations. It is based on a speciﬁc choice of a reduced number of recommenders in the network. So, to release a lightweight prediction mechanism which alleviate the exchange of information and decrease overhead introduced by control packets, we have chosen to deploy the second architecture and to not enable the monitoring in all cluster members. However, the number of recommenders and their localizations should be carefully chosen to cover all one-hop neighbors in a cluster which needs a speciﬁc strategy.

62

CHAPTER 4. SECURE DATA COLLECTION IN A VEHICULAR NETWORK

Overhead (Kb/s)

8 7 6 5 4 3 2 1 0
100 150 200 250 300 350 400
Number of recommenders
Figure 4.9 – Recommendations overhead evolution
In fact, recommenders’ choice is delegated to cluster heads where each one is in charge of the designation of three vehicles from its radio range which cover all its one-hop neighbors. To achieve this job, a CH has to divide its range perimeter into three equal regions, locate the center of each zone, group its neighbors relative to each region and, thereafter, choose the most trustworthy ones close to each center to designate them as recommenders. Hereafter, we describe the choice policies. To simplify things, we assume that a CH is moving on a planetary topology according to the X and Y-axes with a stationary Z-coordinate. We, also, suppose that the recommenders’ designation process is always happening when vehicles are moving in a linear portion of the road and not in intersections. Let’s denote G(x,y), R1(x1,y1), R2(x2,y2) and R3(x3,y3) coordinates of the CH and the centers of the three regions respectively. The CH is moving in a linear line with a
known heading θ according to the X-axis and a radio range equal to R (see ﬁgure 4.10). It starts
calculating R1 coordinates, then R2 and ﬁnally R3.

Figure 4.10 – Recommenders choice strategy
According to ﬁgure 4.10, we get all coordinates of the regions’ centers which will be used as references to recommenders. In the following, we highlight the relative equations used to determine the

4.4. A DISTRIBUTED DETECTION AND PREVENTION SCHEME FROM MALICIOUS NODES IN VEHICULAR NE

different coordinates in function of CH’s coordinates and heading.

x1 = x − (R/2) ∗ cosθ

(4.20)

y1 = y − (R/2) ∗ sinθ

(4.21)

x2 = x + (R/2) ∗ cos(Π/3 − θ)

(4.22)

y2 = y − (R/2) ∗ sin(Π/3 − θ)

(4.23)

x3 = x − (R/2) ∗ sin(Π/3 + θ)

(4.24)

y3 = y + (R/2) ∗ cos(Π/3 + θ)

(4.25)

After getting regions’ centers coordinates, a CH extracts the neighbors coordinates from their rel-
ative beacons and compares their distances from each center dvr = (xv − xr)2 + (yv − yr)2 and
their relative trust levels previously computed to ﬁnally identify the closest one to each center with
the highest trust value and designate it to be its recommender. (xv, yv) and (xr, yr) are respectively
the coordinates of any cluster member and its region center. After locating its relative recommenders, the CH has to inform them about their new job by sending a unicast message for each one. The message is called REC(CH ADR, REC ADR1, REC ADR2, TRUE) that contains the relative CH address, addresses of the other chosen recommenders and a boolean value indicating TRUE which means that the recommender is activated. Selected nodes have to monitor their neighbors in each region and send periodically their trusts to their related CH. The CH is also monitored by recommenders to decrease the possibility of behaving maliciously. Figure 4.10 highlights recommenders positions, their activities and how their recommendations are being sent to a CH.
A CH or even a recommender may act normally during a period of time to gain the trust of its neighbors and switch later to a malicious mode which we call a camouﬂage attack. For this reason we get to the mutual monitoring strategy between the CH and its Recommenders as a solution to face that kind of attackers. So, the CH is always evaluating its related recommenders and if one of them changes its behavior, it will be punished, stored in the black list and replaced by another normal node more trustworthy. Recommenders are also keeping an eye on their CH and evaluating its behavior and whenever they remark that it is suspected, they are able to replace it by another more trustworthy vehicle based on a voting mechanism as described in the following (see diagrams ﬁgure 4.11).

64

CHAPTER 4. SECURE DATA COLLECTION IN A VEHICULAR NETWORK

Figure 4.11 – CH Malicious behavior detection and replacement
A recommender can either detect a malicious behavior of its CH by itself based on process described in ﬁgure 4.11 (a) or receive an information from other recommenders about that. In fact, it
continuously compares the trust of the CH (Tch) to a µ threshold (described in subsection 4.4.2.5) and whenever it is below, it has to send a message M to other recommenders (Recs) in a unicast way indicating the Tch it has, the address (Adr neigh) and trust value of the most trustworthy node
it monitors (Tneigh). The recommenders, after receiving that message, may conﬁrm the CH state or decline it based on process in ﬁgure 4.11 (b). In the ﬁrst case, each one searches its most trustworthy monitored node and compares its trust value (OwnTneigh) to the one sent by other recommenders (RecTneigh): if it is higher, it will be introduced in the message with the address
of its owner instead of received ones and the message M is sent back, in the opposite case the
recommender stores the received address and wait for a conﬁrmation from the last recommender to make it the new CH. In the second case, recommenders send a message indicating that the CH is normal giving their built trust values. If the recommenders choose a new CH, one of them, eventually the ﬁrst to detect the malicious behavior of the last one, sends a message indicating the identity of the new elected CH to monitor the network.
4.4.2.5/ TRUST LEVEL PREDICTION & CLASSIFICATION
A cluster-head is responsible of the estimation of future behavior of its neighbors and information collection from other nodes in the network about suspected attacks. The prediction process is based on the Kalman ﬁlter described in subsection 4.4.1. So, to adapt our problem to the basic
Kalman ﬁltering technique, let’s consider Pi j the prediction of the trust level of node j made by CHi, and for an observation we introduce the trust level value Ti j gathered by the same CHi using the
experience and recommendation-based trust models. So, if we introduce our deﬁned parameters for the trust level prediction in equation 4.8, we get equation 4.26 that deﬁnes the whole problem.

4.4. A DISTRIBUTED DETECTION AND PREVENTION SCHEME FROM MALICIOUS NODES IN VEHICULAR NE

Pi j(t + 1) = Pi j(t) + (ω(t)/(ω(t) + G(t))) ∗ (Ti j(t) − Pi j(t))

(4.26)

In some cases, a malicious node uses to behave normally for a long period of time to gain the conﬁdence of its neighbors then starts attacking. For this reason, we have targeted this problem based
on parameters’ manipulation G(t) and Q(t) to affect the decision of the CH. In fact, a comparison
between the real behavior of a vehicle and the prediction made by the CH is periodically done and based on that parameters’ values are updated. Therefore, the impact of the last observation
is increased by decreasing G(t) value, if the observation made is more reliable or decreased in the opposite case (prediction is more reliable) by decreasing the value of Q(t). A representative
schema of the complete Kalman ﬁltering technique is given by ﬁgure 4.12.

Figure 4.12 – Kalman ﬁlter based prediction mechanism
At the end of the prediction process, a CH proceeds to a vehicles classiﬁcation according to their trust values. So, a behavior is associated to each trust value and vehicles are being classiﬁed into
three different classes using three predeﬁned lists and two thresholds µ and δ. These thresholds, like the previously used one for DoS detection pdrth, should be carefully chosen to make a good
classiﬁcation and keep a trustworthy environment for VANET applications. For this reason, we enhance their choice using a learning algorithm to be dependent from the network characteristics. There exist various kinds of learning algorithms that are able to give good results such as Support Vector Machine (SVM) [26] and Artiﬁcial Neural Network (ANN) [9]. The SVM, based on a training and classiﬁcation processes takes a list of features as input vector to calculate a set of so called support vectors that allows data classiﬁcation, while the ANN, inspired from biological nervous systems and based on a large number of interconnected processing elements (neurons) working in unison, is able to solve speciﬁc problems and give optimal results. Unlike ANN which gives outputs depending on the treated problem, SVM always gives a binary result classifying data. Therefore, we choose to use an ANN algorithm to get the optimal thresholds to be used in the classiﬁcation process of the Kalman ﬁltering. In fact, we install in each CH/Recommander a learning algorithm to update its relative parameters. We assume that one node does not need to have a global knowledge about the network characteristics to get optimal results and only local knowledge about its one to k-hop neighbors are sufﬁcient to do the job. Therefore, the monitor vehicle has to know about surrounding malicious vehicles, the packet delivery ratio (PDR) of its neighbors and their trust levels. It computes the average value of the PDR and trust value, then introduces them

66

CHAPTER 4. SECURE DATA COLLECTION IN A VEHICULAR NETWORK

with the number of malicious nodes in its black list as inputs to the ANN algorithm. Thereafter, the learning algorithm trains entries to give optimal thresholds a vehicle has to use (outputs of the algorithm). So, the ANN algorithm takes, in fact, three inputs (average PDR, trust value and
number of malicious nodes) and generates a set of three outputs (pdrth, µ and δ). The data given within inputs is divided into three sets: training (70%), cross validation (15%) and testing (15%).
As shown in [4], one hidden layer in the network can approximate any continuous function and to reduce the processing time and resource consumption, we use only one hidden layer in the network architecture and deploy sigmoidal transfer functions between neurons in hidden and output layers. The training stops when the error (given by the cross validation) drops towards zero.
Vehicles classiﬁcation done by the CH is based on rules described in the following with thresholds that take values given by the learning ANN algorithm.
- White list: If a vehicle has Pi j ∈]µ, 1], it is considered highly trusted and could be safely used to
support a VANET application. White vehicles are always prioritized by running applications because they don’t change their behavior in the future and continue to cooperate,
- Gray list: If the vehicle has Pi j ∈]δ, µ], it is considered weekly trusted and used in the data
exchange required by applications only in case of empty white lists. This list is used to store vehicles that are oscillating their behavior to give them a chance to stop their attacks before being deﬁnitely evicted from the network. The gray vehicles are usually controlled and their future behavior is predicted and are thus evicted from the network if they persist in their attacks or return to the white category if they regain their normal behavior,
- Black list: This list contains all the vehicles with Pi j ∈ [0, δ], which means that they are considered
malicious and shouldn’t be used in application scenarios. Blacklisted vehicles should be deﬁnitely evicted from the network.
After the categorization of its neighbors, a CH has to inform other nodes in the network about the blacklisted vehicles using the same informing technique introduced in S-GyTAR. So it builds a so called CDP (Cells Density Packet) packet [87] in which it introduces the black and gray lists and conﬁgures the size of the region to inform. A CDP is sent back to other CHs to be forwarded cluster by cluster until reaching the end of the conﬁgured region. The size of a region could be deﬁned either by the number of intersections a message has to traverse before to stop or a distance. We introduce this kind of information to decrease the communication overhead and avoid the waste of bandwidth in the network as the size of a CDP keeps growing at each passage by a CH. Each time a vehicle receives a CDP, it updates its black and gray lists. If this message arrives to a CH, it should also update the CDP by adding its black and gray nodes, forwards it to the next CH and
informs its neighbors. Figure 4.13 illustrates an example of two adjacent clusters i and j. In each
cluster, cluster members are monitored by a CH. We can see the information exchange about black and gray lists where each CH collects recommendations from its recommenders and inserts the
identities of its gray and black nodes (here Mk & Gk for cluster i and M l & G l for cluster j) in the
CDP before to send it to the other CH.

4.4. A DISTRIBUTED DETECTION AND PREVENTION SCHEME FROM MALICIOUS NODES IN VEHICULAR NE
Figure 4.13 – The IPDS monitoring architecture
4.4.3/ PERFORMANCE EVALUATION This section is devoted to, ﬁrst, study the security analysis of our proposed IPDS and its reaction against some abnormal scenarios, then we highlight the simulation environment and ﬁnally, discuss given results.
4.4.3.1/ SECURITY ANALYSIS This subsection is dedicated to study the security analysis against some abnormal scenarios that may affect the normal operation of IPDS and countermeasures taken by our mechanism to face them. - Attacks from external vehicles: To face such kind of attack we assume, as mentioned above, that vehicles are equipped with security material and are able to communicate securely based on authentications and messages signing. So, an external vehicle is not able to communicate with vehicles in the network without being authenticated and thus unable to decrypt messages without appropriate keys. However, if it succeeds to get a key and initiate a DoS attack, change the packets information or claim to be in a different place it will be identiﬁed based on the techniques developed for each attack. - Misuse of the CDP packet: It may happen that a malicious vehicle tries to give false information about the network organization claiming to be the CH by sending a CDP packet in which it introduces fake data about malicious and normal vehicles. However, such kind of unauthorized use of packet is directly detected by recommenders using identity veriﬁcation of the packet originator because they already know their CH or even by the CH itself. So, the attacker is detected, classiﬁed as malicious and evicted from the network.

68

CHAPTER 4. SECURE DATA COLLECTION IN A VEHICULAR NETWORK

- Malicious CH attempting to select malicious recommenders: A vehicle may act normally during the bootstrapping period and gain trust of its neighbors to be CH. Despite its success to become a CH, the malicious vehicle is not able to designate malicious recommenders to comply with it because its choice is controlled by cluster members. In fact, the malicious CH will try to choose vehicles with lower trust levels to be recommenders based on the idea that they are probably malicious. However, this behavior is considered malicious by cluster members. So, they will decline the choice of the CH and repeat the election process without considering this latter as a candidate.
- The use of fake identities to announce a high trust value by a malicious vehicle at the CH election process: This kind of attacks is not allowed in our mechanism because vehicles are mutually monitoring and know about their neighbors which means that all the messages received from a non monitored neighbor are not accepted in the election process.
- Malicious behavior of a CH or recommender: This kind of attack is controlled by the continuous mutual monitoring between the CH and its recommenders as designed by our IPDS.

4.4.3.2/ SIMULATION ENVIRONMENT

We implement our approach using the same simulator, NS3.172 over our secure routing protocol (S-GyTAR) while replacing its reactive security technique (IDS) by the new IPDS and conduct
simulations (10 times for each value) in a Manhattan grid area of size 3000*3000m2 generated
using Simulation of Urban Mobility (SUMO) simulator 3. The main simulations’ parameters are summarized in Table 4.2. The monitoring period represents the duration separating two successive evaluations done by a CH which is managed by the user based on its preferences and conﬁdence on the network. In our simulations, we consider two kinds of attackers: the ﬁrst is a malicious vehicle which continues to attack all the time after changing its behavior and the second one is a node who oscillates its behavior, which means that it will not continue attacking forever but it attacks for only a short period then regains its normal behavior for the rest of the time (represents 20% of the attackers). The kind of attack per node is chosen randomly. The number of attackers in the network varies from 10% to 40%. As in our previous work, we consider here that the maximum number of attackers should not exceed 40% because above that value the network is not considered to be reliable for running applications and should be quarantined [166].

Parameter
Simulation area Simulation time Road length Number of vehicles Vehicles speed Radio Range Monitoring period Pre-processing period Propagation loss model Propagation delay model Malicious vehicles ratio

Value
3000*3000m2
400s 1000m 100 - 400 30 - 50 Km/h 250m 5s 20s Two-Ray Ground Constant Speed 10% - 40%

Table 4.2 – IPDS Simulation parameters

2http://www.nsnam.org 3http://sumo-sim.org

4.4. A DISTRIBUTED DETECTION AND PREVENTION SCHEME FROM MALICIOUS NODES IN VEHICULAR NE

4.4.3.3/ EXPERIMENTAL RESULTS & ANALYSIS
We ﬁrst, analyze the capability of our proposed intrusion detection and prediction system to detect malicious nodes, then, we highlight its impact on the end-to-end communications delay, delivery ratio and its generated overhead in a malicious environment. We highlight, in ﬁgures 4.14 and 4.15, the ability of our proposed mechanism to detect malicious vehicles. We ﬁrst examine its ability to detect each kind of attack apart by activating only one attack’s type in all malicious vehicles (see ﬁgure 4.14). Then, we compare its performances to VWCA [112] and DCMD [119] in a highly malicious environment (Figure 4.15) with 40% of malicious vehicles that initiate various kinds of attacks (DoS, Sybil, False alert and Packet alteration). We assume having 10% of malicious vehicles per attack kind. Given results show that the prediction mechanism outperforms VWCA and DCMD in terms of attack detection and exhibits a high detection rate (over 92%). The comparison between our scheme without prediction (IDS) and the one with that technique demonstrates that prediction partially increases its detection capability. However, the aim of this comparison is not to demonstrate the improvement in the detection rate because all of them are conceived to detect efﬁciently the malicious vehicles, but to prove that IPDS does not loose its detection capabilities despite the prediction errors and the frequently change of vehicles’ behavior. These results are achieved thanks to the cooperative messages exchange between monitoring vehicles. Our mechanism encourages cooperative behavior by punishing selﬁsh nodes in the network even cluster heads and recommenders.

Detection rate (%) Detection rate (%)

100

95

90

DoS Sybil

False Alert

Packet Alteration 85

100 150 200 250 300 350 400

Number of vehicles

Figure 4.14 – Detection rate vs. Attack type

100

95

90

85

80

IPDS VWCA

75

DCMD

IDS 70

100 150 200 250 300 350 400

Number of vehicles

Figure 4.15 – Detection rate

We also make a study to see the impact of our prediction mechanism on data routing and results show that it has a good impact on the packet delivery ratio and end-to-end communication delay. Figures 4.16 and 4.17 demonstrate the difference between the basic routing protocol and the one enhanced with the prediction mechanism in the presence of malicious vehicles. As we can see, the basic protocol suffers from a higher delay and low delivery ratio in a malicious environment as vehicles do not cooperate to forward data and behave selﬁshly to only forward their own needed information. However, the proposed prediction technique is able to enhance the performances of the protocol while increasing the delivery ratio and decreasing the end-to-end communication delay. Therefore, the proposed schema targets to ﬁrstly evict malicious vehicles (Blacklisted vehicles) from routing tables of data carriers which limits their probabilities to be used as packet forwarders and by consequence minimizes the dropped packets. Furthermore, the proposed architecture limits the forwarding of packets issued from black listed nodes which avoid the bandwidth overload, ease the access to channels and decrease the end-to-end delay. However, the higher delay we can see in
ﬁgure 4.16 when the number of nodes is low (≤ 200) is due to the fact that the network is not dense

70

CHAPTER 4. SECURE DATA COLLECTION IN A VEHICULAR NETWORK

and distances between vehicles are very high which may reduce the probability of ﬁnding a packet forwarder quickly and increase the carrying delays before reaching the destination.
In ﬁgures 4.16 and 4.17, IPDS impact on the delivery ratio and end-to-end delay is also compared to the basic IDS (without prediction). Results show that IPDS highly increases the delivery ratio and decreases the delay of the routing protocol compared to IDS. This can be explained by the fact that the prediction mechanism introduces the use of a new list: the gray list. As explained above, this list is used to store vehicles with low trust values which are till now not considered malicious. So, if we look at our attack model, the 20% of vehicles which attack for a small period will be ﬁrstly stored in the gray list and then return to the white list when they stop attacking before having a
trust value less than δ. These nodes could be used in the routing process when no white vehicle
exists in the routing table (case of sparse network). Therefore, the delivery ratio is increased and delay is decreased. Unlike IPDS, the basic IDS is based on a binary categorization to classify vehicles into two classes (malicious and normal), store the two kinds of attackers in the black list and directly evict them from routing tables which dramatically decreases the number of packet forwarders in a highly malicious environment and limits the impact of IDS on the delivery ratio and end-to-end delay. So, the use of the gray list allows to give more chance to attacking vehicles to change their behavior before being evicted forever from the network which is more beneﬁcial for network applications, especially in non-dense networks. Figure 4.18 further proves our reasoning by producing a comparison between the number of forwarders in basic IDS and IPDS. We can see that the number of forwarders (white + gray vehicles) in IPDS is higher than IDS (white vehicles) along the simulation time due to the integration of gray vehicles in the routing process.

End−to−end delay (sec) Delivery Ratio (packet/sec)

40

35

Routing+IPDS Basic Routing

30

Routing+IDS

25

20

15

10

5

0

100

200

300

400

Number of vehicles

Figure 4.16 – End-to-end communication delay

100 Routing+IPDS

80

Routing+IDS

Basic Routing

60

40

20

0

100

200

300

400

Number of vehicles

Figure 4.17 – Packet delivery ratio (PDR)

The communication overhead generated by the prediction technique is studied to conﬁrm its higher performance and scalability. Figure 4.19 highlights the difference of overhead between basic routing protocol and secured one. It is clear from the plots that the prediction mechanism we have integrated the protocol does not add a huge amount overhead compared to the basic routing (overhead approximately equal to S-GyTAR). As the monitoring is done in a promiscuous mode, the only overhead sources are control packets and informing process. However, they do not add big overhead to the position-based routing protocol we have used in our tests. Therefore, we conclude that the developed prediction mechanism resists to the scalability problem.

Number of forwarders (%)

4.5. CONCLUSION

71

100 Routing+IPDS Routing+IDS
80

60 20 30 40 50 60 70 80 90 100 Time (sec)
Figure 4.18 – Evolution of the number of forwarders over time with 40% of attackers among 400 vehicles in the network

Overhead (Kb/s)

5 Basic Routing Routing+IPDS
4

3

2

1

0

0

100

200

300

400

Number of vehicles

Figure 4.19 – Generated communication overhead

4.5/ CONCLUSION
Ensuring a secure and efﬁcient data collection in a vehicular environment is a very challenging ﬁeld since vehicles are being always connected which make them vulnerable and usually exposed to various attacks. For this reason, we proposed in this chapter two techniques to secure data ﬂowing between vehicles and preserve their integrity to protect running applications. We, ﬁrst, proposed a secure intersection-based routing protocol which takes trafﬁc information into account, then, we enhanced its capability by designing a new intrusion detection and prevention mechanism which is based on attacks prediction and faces several kinds of them namely network and application attacks. The two proposed security mechanisms are completely distributed based on a hierarchical architecture to continuously monitor vehicles in the network and identify malicious behaviors. In the ﬁrst proposal, named S-GyTAR, roads are divided into small cells where clusters are organized. The trustworthiest and nearest node to the center of a cell is chosen as a cluster head. Its role is to monitor its neighbors and build a reputation model to calculate their trust levels, classify them into malicious and normal nodes and inform about malicious behaviors. The second proposal, named IPDS, is able to survey the network, detect malicious nodes before they attack based on their trust

72

CHAPTER 4. SECURE DATA COLLECTION IN A VEHICULAR NETWORK

levels prediction and deal with oscillating attackers by introducing a new kind of classiﬁcation using an intermediate list (gray list) to hold vehicles changing their behavior. In this behavior prediction mechanism, we deployed a Kalman ﬁlter technique together with two trust models to estimate vehicles behavior and classify them into three classes to evict malicious ones (black list) and keep monitoring others in the gray and white lists. The new classiﬁcation offers the possibility to use vehicles oscillating their behavior when they are still normal (in the gray list) in the routing process in case of white vehicles’ scarcity in the network (case of sparse networks). S-GyTAR and IPDS were developed and tested in a simulation environment and given results prove that they exhibit a high detection rate, low end-to-end delay and high delivery ratio. These results are achieved due to the cooperation enhancement between vehicles and the encouragement of selﬁsh ones to cooperate to protect data. Therefore, data is being highly protected and efﬁciently delivered to destinations while respecting applications requirements using the two contributions described in this chapter. This data can hence be exploited and analyzed for various aims namely the development of new ITS applications and enhancement of their required quality of service. The next chapter is devoted to develop techniques to exploit and analyze the collected data in a vehicular network.

5
EFFICIENT DATA EXPLOITATION IN A
VEHICULAR NETWORK
5.1/ INTRODUCTION & PROBLEM STATEMENT
Collected data in a vehicular network are of various use and, mainly, aim to enhance the human daily life and protect the environment based on efﬁcient data exploitation and analysis techniques. In fact, data produced by the embedded sensors and cameras integrated in a vehicle or infrastructure have heterogeneous representations and do not allow the straightforward interpretation of an object or scene for the driver, passenger or decision maker. Furthermore, applications do not have the same requirements and their needs depend on the treated ﬁeld. Non-delay tolerant applications for example such as ITS-safety and ITS-efﬁciency require fresh data to be analyzed and presented to drivers in bounded delays, or they get obsolete. For this reason, in some application areas data should be quickly gathered and analyzed to be useful. On the other hand, in some kinds of applications, data are useful even after some time has passed if they are stored in central databases or in in-vehicle recorders (for example location and video recorders). For example, data may be reused by police agents to track outlaw vehicles and in court for crime scenes reconstruction. So, depending on the application to be developed and its requirements data should be treated in a different manner either internally in the vehicle or in a central ﬁxed trustworthy server where a set of services are enabled for potential clients. Figure 5.1 illustrates a set of various application ﬁelds that exploit and analyze data to ﬁt their offered applications. ITS-applications related to vehicle trips, ﬂeet management and diagnostics are of potential necessity due to their economic and environmental impact. In fact, vehicles are being among the ﬁrst sources of greenhouse gases emission because of the increase of their number all over the world. In addition, a driver traveling without any knowledge about the trafﬁc conditions in the road may be exposed to excessive losses due to time and fuel consumed during a passage by a trafﬁc bottle neck caused by an accident, working zone or even bad weather conditions. For this reason, it is highly recommended to offer services that efﬁciently exploit and analyze the gathered data from vehicles environment and internal diagnostics to optimize the number of trips, their length and duration. However, offering such reliable services always requires to deal with ﬂowing data characteristics (heterogeneity, incompleteness, redundancy and massive size) at different levels. Data analysis techniques based on data fusion reviewed in subsection 2.3.1 represents a promising technique to efﬁciently exploit collected data because it splits its processing into different levels (5 levels) depending on its complexity degree and offers several methods to securely fuse it (statistical, probabilistic and artiﬁcial intelligence methods) and extract meaningful information of high importance to ITS-applications. So, during this chapter we target to beneﬁt from these techniques to
73

74

CHAPTER 5. EFFICIENT DATA EXPLOITATION IN A VEHICULAR NETWORK

Figure 5.1 – Vehicular data treatment application ﬁelds
develop reliable solutions for vehicular network users. Indeed, as a ﬁrst contribution in this chapter, we design a new application service that is based on a centralized architecture for data collection and continuous analysis of data incoming from various sources namely real-time vehicles data and Internet information to provide the most economic itineraries for traveling from a source to a destination. The proposed application, which we name Itinerary Planning, allows a potentially huge number of users to plan their routes and control their travel time and fuel consumption while having a global overview about trafﬁc and weather conditions in roads based on statistical techniques to fuse information. It is able to process in an off line mode because all the treatment complexity of data is managed by a central server in the infrastructure with Internet connectivity.
Applications developed over vehicular networks require also variable quality of service, a parameter that is highly impacted by the network mobility and random vehicles speed. Therefore, it should be continuously controlled to preserve accurate services. Nowadays vehicles are being enhanced with more than one communication capability to overcome this quality of service degradation and guarantee continuous connections based on the new CALM standard described in section 2.3.2. Offered communication technologies have different characteristics: 4G for example guarantees a high coverage area, whereas IEEE802.11p offers a faster exchange of data without additional costs. For this reason, a handover from one technology to another should be made depending on application requirements while favoring always the best suitable communication medium for every service. This could be only possible by having real-time information about the network, applications requirements, vehicles motion and users preferences. These information are available based on the efﬁcient data collection techniques proposed in the previous chapters. However, they should be accurately exploited and analyzed to have reliable decisions. In a second contribution, we propose a new fuzzy logic-based technique to fuse data for selecting the best network medium for running

5.2. ITINERARY PLANNING SERVICE FOR SMART CITIES

75

applications to preserve quality of service. It is based on the collected data exploitation to analyze the necessity of handover and make switch between the available communication technologies in a smooth and seamless manner. This network selection mechanism highly enhances the capability of the Itinerary Planning application service by offering the possibility to use V2V and V2I communications in a dense networks and 4G for example in a sparse network, thus guaranteeing the application continuity. It guarantees, also, a high quality of service for the other applications offered by vehicular networks based on its fuzzy-based data treatment schema and seamless handover processing.
This chapter is composed by two sections as follows: the ﬁrst one is devoted to detail the Itinerary Planning application service, where we highlight its components, data analysis process and a proof of concept that we developed using real equipments, and in the second section we introduce the network selection mechanism, explain its architecture and discuss its performances analysis.

5.2/ ITINERARY PLANNING SERVICE FOR SMART CITIES
Itinerary planning is an application service developed to allow a potentially huge number of users planning their routes. It is very beneﬁcial for individuals and companies owning ﬂeets of vehicles, to decrease their expenses and preserve the environment by providing the most economic itinerary for a trip. Fire-ﬁghters and police agents also beneﬁt greatly from this service when planning for tracking and rescue missions (European CarCoDe project use-case). The proposed service is based on data collection from different sources and their analysis to provide the best itinerary to a destination. It assesses a reﬁned and precise calculation of the fuel consumption per a trip. Therefore, information about road topologies, weather conditions, trafﬁc and vehicle’s internal diagnostics are gathered and analyzed to calculate the fuel consumption of a vehicle from one point to another. For ﬁre-ﬁghters and police agents, the data are also analyzed to offer the fastest route to an incident scene. The application service is offered by a central server in a ﬁxed infrastructure, which has access to other servers in the Internet and responsible of the storage and management of data collected from moving vehicles. It is accessible via mobile equipments (e.g. smart phone, tablet, etc.) using an application interface where information about trip and passengers are introduced to be sent in a request to the central server. The client does not require Internet connection to beneﬁt from the service because all computing complexities are handled by the server which has more privileges and a more general view about the network. In the following, we ﬁrst, describe the different actors composing the communication architecture of our application, highlight the exchange engendered between clients and the server and analysis process of the different data. Finally, we present a proof of concept with some snapshots highlighting the client side application results.
5.2.1/ ITINERARY PLANNING ARCHITECTURE
In this section we detail the proposed architecture for the itinerary planning service processing and depict the role of each entity as well as the used communication technologies. Figure 5.2 highlights a simpliﬁed architecture for the itinerary planning architecture with the different components. It is mainly composed as follows:

76

CHAPTER 5. EFFICIENT DATA EXPLOITATION IN A VEHICULAR NETWORK

Figure 5.2 – Simpliﬁed architecture for Itinerary Planning service
- The global server, which is the management center and service provider connected to Internet and has access to all kinds of information collected from vehicles and stored in a database center. This center is composed of four tables; the ﬁrst one contains vehicle’s characteristics (name, weight, aerodynamic coefﬁcient, fuel type, etc.), the second one is dedicated to store fuel’s characteristics (fuel identity, fuel name, fuel density ), the third one contains matching information between the speciﬁc equivalent fuel consumption (SEFC), mean effective pressure (PME) and engine’s RPM while periodically collected data from vehicles are stored in the fourth table. The global server is responsible of the data collection about available service stations and roads’ topology from other information centers accessible via Internet. It has the ability to exploit and analyze data to offer different services for every client.
- The vehicle, should be enabled with an on-board unit (OBU) connected to embedded sensors and integrated cameras to collect real time information related to the vehicle’s internal diagnostics and its environment. Various kinds of information are periodically gathered by the on-board unit and sent to the global server. Among them, we cite some diagnostics which are useful for the itinerary planning service: vehicle’s identiﬁer, round per minute (RPM), fuel level, speed, coolant temperature, location, etc. To beneﬁt from offered services such as itinerary planning, the driver should be equipped with an IHM (Interface Human Machine) such as smart phone or tablet to request the needed service and view information provided by the global server.
To enable communication between the different architecture components, three types of connections are recommended. The ﬁrst is the connection of the global server to Internet which could

5.2. ITINERARY PLANNING SERVICE FOR SMART CITIES

77

be either wired or wireless. The second is the communication between the client’s IHM and vehicle’s on-board unit which is possible using Bluetooth, IR or WiFi. The last connection is needed between vehicles and the vehicle and infrastructure to collect data and is available via V2V and V2I communication capabilities using the secure intersection-based protocol enhanced with the IPDS mechanism proposed in the previous chapter. However, the vehicle may be enhanced with various access mediums namely 2G/3G, UMTS, WiFi and IEEE802.11p which allow to recover from disconnection in case of sparse networks by switching to a new access medium.
Different actors represent the building blocks of the itinerary planning architecture where each one fulﬁll a speciﬁc role in the process of data collection and exploitation, and service providing. Thus, the global architecture is composed of two main processes: (i) data exploitation and analysis which are delegated to the global server and are based on statistical fusion techniques to combine all kinds of information, and (ii) data exchange to access the proposed service.
5.2.1.1/ ITINERARY PLANNING DATA EXCHANGE
Figure 5.3 illustrates the possible exchange generated by the itinerary planning service each time a client requests it. Potential actors involved in the exchange generated by this service are the driver’s IHM (Smart phone, tablet, etc.), the vehicle’s on-board unit and the global server beneﬁtting from its access to Internet and data center to provide responses for every request from the client. So, a client books its trip information (source and destination) via an application interface to view possible routes information.

Figure 5.3 – Itinerary planning data exchange
First, the application requests the vehicle’s identity from the on-board unit, then sends it with the source and destination information to the global server requesting a possible economic itinerary. After receiving the request, the server searches and evaluates possible routes from source to destination and replies to the client indicating the most economic route and various kinds of useful information such as the travel duration, cost and fuel consumption. However, to get such kind of information the server runs a big number of actions and algorithms in background to analyze data and assess calculation. The most challenging activity processed by the server is how to calculate the fuel consumption over the proposed routes. To do so, the global server uses several APIs through the Internet together with the real-time collected information from vehicles. First, it requests Google API to get all available routes from the given source to the destination, retrieves elevations of multiple points in every route and identiﬁes speed limits per segment. Second, it questions the

78

CHAPTER 5. EFFICIENT DATA EXPLOITATION IN A VEHICULAR NETWORK

Yahoo! Weather API to fetch weather conditions per route. Then, it extracts information about trafﬁc in each route by requesting the Trafﬁc API. These two processes are equivalent to levels 0 and 1 of the data fusion previously reviewed. Finally, and based on all these information, the server calculates the fuel consumption along each route based on the process detailed in subsection 5.2.1.2 (levels 2 and 3 of data fusion). After this, two cases appear: (i) No fuel exhaustion: the fuel level in the vehicle is sufﬁcient to complete the whole trip without need to supply again and (ii) Fuel exhaustion: the fuel level is not sufﬁcient to get the client to destination (the level should not be less than 15%) where the need to provide a path that passes by a gas station. In this case, the server requests Google place API to ﬁnd the closest gas station to the drop point with its different proposed services and prices and computes the fuel consumption to go through it. Details to calculate the fuel consumption are given by Fig.5.4 and Table 5.1. After computing the total fuel consumption along each route, the total cost is also calculated including the cost of supply within a gas station in case of fuel exhaustion. Finally, upon receiving a response about a planned trip from the server, the IHM displays to the client every route with its associated information and proposes the most economic one and for him to choose the suitable itinerary according to the following characteristics: fuel consumption, traveling time or trip cost. Once the travel starts, the vehicle periodically sends information to the global server as previously described in the data collection process.

5.2.1.2/ ITINERARY PLANNING DATA ANALYSIS
Data collected periodically from vehicles and retrieved from Internet APIs are fused and analyzed by the global server to result the most economic itinerary for a trip after each request from a client. The itinerary planning service is based on the calculation of fuel consumption along each proposed route to a destination. The calculation process must be based on vehicles’ and road’s characteristics and periodically gathered data for better efﬁciency and accuracy. This subsection describes the way the global server exploits and analyzes data to calculate the fuel consumption of a vehicle. The whole process of data analysis and fuel consumption is described in the following (see ﬁgure 5.4 and Table 5.1):
First of all, the force Fwheel needed by the vehicle to move at a given speed is calculated using equation 5.1, where Faero, Froll and Fincl are respectively the aerodynamic, rolling and gravity forces, m represents the vehicle’s mass, g is the gravity value, i is the road inclination given by the call of Google Maps API and Vrelative is the relative velocity (represents either the difference between
vehicle and wind speed if they are in the same direction or the sum if they have opposite directions). The vehicle’s mass does not only designate its own weight but also includes weights of passengers and trained trailer if it exists. The wind speed and direction are obtained by requesting Yahoo!
Weather API. The vehicle speed V could be deduced from the driving cycle and road’s speed limit. ρair is the air density, SCx is the aerodynamic penetration coefﬁcient of the frontal surface S and Cr represents the rolling coefﬁcient (depends on V , wheal pressure and vehicles characteristics). The
air density, normally depends on its temperature but for simplicity it is approximated to a constant value.

Fwheel = Faero + Fincl + Froll

Faero

=

1 2

.ρair

.SCx

.Vr2elat

ive

Fincl = m.g. sin(i)

Froll = Cr.m.g. cos(i)

(5.1) (5.2) (5.3) (5.4)

5.2. ITINERARY PLANNING SERVICE FOR SMART CITIES

79

Second, the power P to overcome the force resistance is analyzed based on equation 5.5 and the
effective power needed for vehicle’s motion (useful energy) is determined as described by equation
5.6 where η is the ratio of the overall engine which depends on vehicle’s brand and characteristics.

P = Fwheel.V P
Pe = η

(5.5) (5.6)

Third, the auxiliary power Pclim provided by the air conditioner is computed and added to the effective power to get the total needed power Ptot (see equation 5.7) by the vehicle. To get Pclim,
we based our calculation on some experiments we have made to see the regime variation of the air conditioner because it inﬂuences consumption. In fact, we consider the external temperature and ﬁx the setpoint one into the car, thus the air conditioner passes by two regimes: (i) transitional regime which will last until reaching the requested temperature where it is working in a full regime engendering the highest consumption and (ii) permanent regime where it is partially functioning with a low regime depending on the temperature variation in the car (On Off regime). In our experi-
ments we consider the extreme case where the setpoint temperature is the lowest one (15Celsus) and the external temperature was about 30Celsus. These parameters lead to a transitional regime that lasts 4 minutes before to enter the permanent one. Pclim could be then determined in function
of the engine speed (RPM) knowing the regime.

Ptot = Pe + Pclim

(5.7)

Fourth, the Speciﬁc Equivalent Fuel Consumption (SEFC) should be analyzed. It is given by the vehicle’s manufacturer in a form of 3-dimensional curves in function of engine speed (RPM) and brake mean effective pressure in the engine (BMEP) without any speciﬁcation of how to get it. Every engine has its speciﬁc variation of SEFC. For this reason, we propose a program to analyze and extract the SEFC value using provided curves. After that, we multiply the previously calculated
SEFC and Ptot to get the fuel consumption of the engine G f (i; j; k) (in gram per hour) for the given
road sub-segment, (see equation 5.8).

G f (i, j, k) = Ptot .SEFC

(5.8)

Notation
S D V R W E Cur Pos Ex

Meaning
Source Final Destination Vehicle’s characteristics Routes retrieved with Google Maps API Weather retrieved by Yahoo! API Elevations values retrieved with Google Maps API Current position Exhausion

Table 5.1 – Fuel consumption algorithm notations

Finally, to get the total fuel consumption G f in a route, a fusion of all consumptions along its seg-
ments is executed. Furthermore, to consider the trafﬁc state at each route, the server requests

80

CHAPTER 5. EFFICIENT DATA EXPLOITATION IN A VEHICULAR NETWORK

Figure 5.4 – Fuel consumption algorithm
the Trafﬁc API to get information about trafﬁc conditions in roads (e.g. trafﬁc type, location, trafﬁc duration, etc.). The fuel consumption under these conditions is then calculated and introduced to the global consumption.

5.2. ITINERARY PLANNING SERVICE FOR SMART CITIES

81

In case of fuel exhaustion in a route, the main server requests from Google place API the nearest gas stations (radius proportional to the ﬁxed threshold) and computes the quantity of fuel consumed to reach that station from the drop point in the same way as described above. Then, the total consumption of the route in question is updated. The total fuel consumption per route is detailed by algorithm 5:

Algorithm 5 Pseudo-code of the calculation of fuel consumption per route

1: Input: Route i, State trafﬁc, Service Station location.

2: Output: Total fuel consumption G f route i.

3: for j = 1..nbsegments(i) do

4: for k = 1..nbsub−segments(i, j) do

5:

if Tra f f ic == T RUE then

6:

Calculate Tc(i, j, k) fuel trafﬁc consumption with V = Vtra f f ic;

7:

Calculate Ec(i, j, k) estimated fuel consumption with V=Vlimit ;

8:

G f (i, j) = G f (i, j) + G f (i, j, k) − Ec(i, j, k) + Tc(i, j, k);

9:

end if

10:

if Fuel < T hreshold && Station == T RUE then

11:

Calculate Sc(i, j, k) fuel consumption to service station;

12:

G f (i, j) = G f (i, j) + G f (i, j, k) + Sc(i, j, k);

13:

end if

14: end for
15: G f route i = G f route i + G f (i, j);
16: end for

5.2.2/ PROOF OF CONCEPT
In this section, we describe how we implement a part of the previously presented architecture for the itinerary planning service in order to prove its feasibility and efﬁciency. The developed platform is mainly composed of two communicating parts: a vehicle and the global server. The vehicle contains an IHM to interact with the driver. Two speciﬁc on-board units are connected to each part of the architecture (mobile vehicle and ﬁxed infrastructure where the server is located) to enable them communicate together. For this reason, we perform, ﬁrst, some tests to be aware about the real performances of V2V/V2I capabilities (IEEE802.11p standard) offered by the speciﬁc OBUs before their deployment in our architecture. So, we set a scenario where we place one OBU in a ﬁxed position and integrate another one into a vehicle and test the variations of signal strength,
throughput and signal to noise (SNR) in different moving speeds (20Km/h and 40Km/h). In fact,
the static OBU is ﬁxed in the middle of a linear road where the vehicle is going in its direction at the ﬁrst stage and goes away after that. To retrieve results, we developed a data analysis toolkit based on some shell scripts and a trafﬁc generator called Iperf1 which is available among existing packages in the OBU operating system. Iperf basically generates trafﬁc between a source and destination and computes exchanged packets with their sizes to get throughput. Results shown by ﬁgure 5.5 demonstrate that the throughput keeps a constant variation when the speed increases. However, the distance from the infrastructure highly impacts the signal quality and SNR where they keep increasing when the vehicle approaches the static OBU and decreasing whenever it goes
far. The vehicle passes near the infrastructure at time t1 (at t2 respectively) when the speed is about 20Km/h (40Km/h respectively) where the signal and SNR register their highest values.
Therefore, we conclude from our experiments that the standard IEEE802.11p is very useful for
1https://iperf.fr.

82

CHAPTER 5. EFFICIENT DATA EXPLOITATION IN A VEHICULAR NETWORK

mobile environments because it keeps good throughput despite the degradation of signal quality whenever communicating nodes are in the same radio range. It also represents a good technique for opportunistic communications.

Signal(dBm)

−40
−50
−60
−70
−80 V=20km/h V=40km/h
−90 0 5 10t1 t2 20 25 30 35 40 45 50 Time(s)
(a) Signal strength

SNR (dB)

60 V=20km/h

50

V=40km/h

40

30

20

10

0 0 5 10t1 t2 20 25 30 35 40 45 50
Time(s)

(b) Signal to Noise Ratio

Throughput (Kbit/s)

1.8

1.6

1.4

1.2

1

0.8

0.6

0.4

0.2 V=20Km/h V=40Km/h
0

0

10

20

30

40

50

Time(s)

(c) Throughput

Figure 5.5 – IEEE802.11p tested performances

In the global server, we develop the data center which contains vehicle’s and fuel’s characteristics (vehicle brand, weight, fuel type, fuel density, etc.) together with data collected from vehicles’ embedded sensors. The process to calculate fuel consumption was fully developed in the server side based on RESTfull java web services which call several APIs from Internet (Google, Yahoo) together with fresh information from the local data center. However, the process to gather real-time data information about the vehicle is implemented in the vehicle’s on-board unit using also a java web service which is scheduled periodically.
To display the route computation results, we implement an Android application which calls web services from the global server. Google Maps APIv2 is used to display possible routes with their related information to the client (elevation, trip cost, time, trafﬁc, etc.) as illustrated by ﬁgure 5.7. In case of critical fuel level (less than a threshold), the drop position is located and a fetching for a

5.2. ITINERARY PLANNING SERVICE FOR SMART CITIES

83

closer gas station is initiated. When the gas station is located, a route to it is displayed as shown by ﬁgure 5.8. If no closer station is found, a marker is viewed indicating the drop position (Figure 5.6) and an alert is displayed to the driver.
The major components of the proposed architecture together with the itinerary planning service are implemented. Clients do not require to have Internet access to beneﬁt from the itinerary planning application because all processing complexity is managed by the server. Other alternatives to access the server are also envisaged based on a direct connection via 3G/4G and Wi-Fi capabilities.

Figure 5.6 – Information about possible routes

Figure 5.7 – Available information about the most economic itinerary

84

CHAPTER 5. EFFICIENT DATA EXPLOITATION IN A VEHICULAR NETWORK

Figure 5.8 – Gas station localization
To conclude, itinerary planning service offers to its clients the possibility to preserve time and money by having a global overview about the network at the time of travel. It takes into account a huge amount of information coming from various sources to enhance the accuracy of analysis. The service is enabled to clients in the global server via a service enabler and is accessible using various kinds of communication technologies (3G/4G, Wi-Fi, 802.11p, etc.). However, the selection of the best suitable communication medium for use in itinerary planning or any other application service should be executed in a smooth and seamless manner where various parameters about network, applications and users should be taken into account to preserve good quality of service. Therefore, we present in the next section our second contribution in this area, which consist in a new fuzzy-based technique to select the best communication medium in vehicles with multiple technologies.
5.3/ FUZZY LOGIC-BASED COMMUNICATION MEDIUM SELECTION FOR QOS PRESERVATION
As described in section 2.3.2, several techniques were developed in the literature to handle the handover between available communication technologies. However, little works consider this problem in vehicular networks and suffer from the problem of not considering a necessary number of parameters that inﬂuence the decision process or not stick to an open standard such as CALM. For this reason, the main concern of this work is to make the management and switch between multiple communication interfaces in an ITS equipment soft and smooth to preserve QoS for running applications. Therefore, a new fuzzy logic-based mechanism is proposed. It is compliant with the CALM architecture and considers applications’ requirements and access networks speciﬁcities in real-time. It collects information about the network and applications which are presented in linguistic format, fuses and analyzes them based on a set of fuzzy rules to give an accurate decision about the most suitable communication medium to use by every application. In fact, Fuzzy logic was introduced by Lotﬁ A. Zadeh in 1965 based on the theory of fuzzy sets [2]. This concept aims to provide approximate models for uncertain, ambiguous and vague systems whose modeling with precise mathematical approaches is very difﬁcult or sometimes irrelevant. Fuzzy inference systems based on fuzzy inference rules may be used to overcome the use of extensive mathematical details or complex algorithmic structures in system modeling while good results can still be obtained. Inputs and outputs of a fuzzy inference system (FIS) are provided in a linguistic presentation and

5.3. FUZZY LOGIC-BASED COMMUNICATION MEDIUM SELECTION FOR QOS PRESERVATION85
have linguistic values such as low, medium and high. Fuzzy inference rules are a set of if-then rules which are able to decide based on provided formal input values and give output values. In the following, we ﬁrstly detail the main building blocks and inference systems of the proposed mechanism, then we highlight the different results we got and discuss them.
5.3.1/ FUZZY LOGIC-BASED NETWORK SELECTION MECHANISM
In this section, we ﬁrst highlight the global architecture of our fuzzy-based network selection mechanism which was developed based on the architecture proposed by the CALM standard to be easy to integrate in real equipments; then, we detail each block that participates in the data exploitation, analysis and decision process about the need of handover and its execution.
5.3.1.1/ GLOBAL ARCHITECTURE
As said above, selecting the best communication medium is a very challenging issue that requires to know various kinds of information about the network, applications and user preferences. The main difﬁculties arise from the frequently changing parameters of available networks due to vehicle’s speed. For this reason, the fuzzy logic-based network selection mechanism architecture includes six main modules presented by ﬁgure 5.9: (i) application characteristics module, (ii) network and vehicles parameters set, (iii) network & vehicle parameters collection module, (iv) network inference system (NIS) , (v) network weighting inference system (NWIS) and (vi) network selection inference system (NSIS). 1- Application characteristics module: it is responsible of the identiﬁcation of running applications and determines their requirements in terms of QoS (throughput, delay, etc.), security and performance. 2- Network & vehicle parameters collection module: this module gathers information about available networks such as received signal strength intensity (RSSI) and density and retrieves the vehicle speed. These information are very important to get the performances related to each network candidate. 3- Vehicle & network parameters module: this module is used to store information collected by the previous module. 4- Network inference system (NIS) module: it is a fuzzy logic module used to determine the throughput, latency and packet loss from the fuzzy input values about RSSI, vehicle speed and network density. 5- Network weighting inference system (NWIS) module: this module takes outputs given by the previous module together with information coming from the running application, analyzes and treats them based on a set of internal rules to result a weight for each network candidate. 6- Network selection inference system (NSIS) module: it is responsible for the ﬁnal decision about the network to attribute to a running application. It is also based on a set of fuzzy rules which fuse incoming information from the previous module with the cost offered by each network to decide about the best medium to be used.

86

CHAPTER 5. EFFICIENT DATA EXPLOITATION IN A VEHICULAR NETWORK

Figure 5.9 – The fuzzy-based network selection architecture
5.3.1.2/ NETWORK INFERENCE SYSTEM (NIS)
This module is responsible for the exploitation and analysis of available data stored in the network & vehicle parameters set. It is a fuzzy logic inference system based on if-then fuzzy rules. Its objective is to extract information characterizing each communication over a candidate access network based on given indications about the vehicle speed, network density and RSSI. This module is composed of 13 fuzzy rules which we give in Table 5.2. Its inputs are presented in a linguistic format as deﬁned in the following:
- Vehicle speed: in a vehicular network, roads topology are variable and encompass highways and urban zones. So, a vehicle speed should vary from road to road depending on the type and imposed speed limit. It has the following linguistic values: low, average and high speed. When a
vehicle is traveling in a residential area with a speed limit of 50Kmph, its velocity is designated by the low speed value. The speed is average when it is between 50Kmph and 100Kmph which is the case of national/regional roads. When a vehicle is traveling with a speed higher than 100Kmph
it will be considered high.
- Received signal strength intensity (RSSI): characterizes the signal quality of a network. In
general, its value varies from −100dBm (weak) to −15dBm (strong). Its linguistic values are classiﬁed as follows: (i) if the RSSI is less then −70dBm, the signal is considered to be weak, (ii) if it is between −70dBm and −50dBm, the signal is termed as average and (iii) if it is greater then −50dBm, the signal is identiﬁed to be strong.

5.3. FUZZY LOGIC-BASED COMMUNICATION MEDIUM SELECTION FOR QOS PRESERVATION87

- Network density: represents the ratio between the number of neighbors present in the radio range of a vehicle and the maximum allowed number which may cause congestion due to competitive access between nodes. It is calculated based on the number of neighbors given by periodic exchanged beacon frames and the maximum number of vehicles that could be present in a vehicle’s radio range ((number of neighbors / maximum number in radio range) * 100). To get the maximum number of vehicles in the radio range we assume that vehicles have the same length and respect the legal ﬁxed distance between each others. The density is considered low when its value is less
than 30%, medium from 30% to 70% and high if it is greater than 70%.

RSSI
weak average strong weak average strong weak average strong strong average weak -

Density
low low low medium medium medium high high high low medium medium -

Speed
low low low low low low low low low average average average high

Throughput
medium high high medium medium high low low medium medium low low low

Latency
medium low low high medium medium high high medium medium high high high

Packet loss
medium low low medium medium low high high medium medium high high high

Table 5.2 – Network inference system (NIS) fuzzy rules

5.3.1.3/ NETWORK WEIGHTING INFERENCE SYSTEM (NWIS)
This module, ﬁrstly, reads from the application characteristics module and identiﬁes registered QoS requirements by a running application regarding latency, throughput and packet loss. Then, it maps these QoS parameters to the ones offered by each available access network to check which one best suits the application and assigns to each network a weight. This fuzzy inference system is composed of a set of fuzzy rules to assign a weight for each network ranging from 0 to 1. Designed rules consider to treat each application requirements apart. The VoIP, for example, needs very low packet loss and latency; so only networks that offer this possibility are highly weighted (high weight). For a streaming application, networks offering low and medium metrics will have good weights (high or medium). However, for a downloading application, networks with lower characteristics will have medium weights. We summarize the set of fuzzy rules for the NWIS in Table 5.3 while considering the three types of application we described; streaming, downloading and VoIP. Inputs provided by the NIS module to NWIS are given in a linguistic format as follows:
- Throughput: in this work, we consider the throughput to be low when its value is less than
0.5Mb/s, medium from 0.5Mb/s to 1.5Mb/s and high if it is greater than 1.5Mb/s.
- Latency: Applications tolerate variable latencies. A VoIP application has very hard requirements
regarding latency. The ITU-T G.114 recommends a maximum of 150ms one-way latency and most network Service Level Agreements (SLA) specify between 45ms and 65ms as the maximum latency
[170]. For daily human use streaming applications (e.g. playing game, live video conference)
100ms is considered to be a low latency. Some other applications may operate even with a high

