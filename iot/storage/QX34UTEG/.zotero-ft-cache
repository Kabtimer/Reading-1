Python for Data Analysis
Research Computing Services Katia Oleinik (koleinik@bu.edu)

Tutorial Content

Overview of Python Libraries for Data Scientists
Reading Data; Selecting and Filtering the Data; Data manipulation, sorting, grouping, rearranging
Plotting the data
Descriptive statistics
Inferential statistics
2

Python Libraries for Data Science

Many popular Python toolboxes/libraries:

• NumPy

• SciPy

• Pandas • SciKit-Learn

All these libraries are installed on the SCC

Visualization libraries
• matplotlib • Seaborn

and many more …

3

Python Libraries for Data Science
NumPy:
 introduces objects for multidimensional arrays and matrices, as well as functions that allow to easily perform advanced mathematical and statistical operations on those objects
 provides vectorization of mathematical operations on arrays and matrices which significantly improves the performance
 many other python libraries are built on NumPy
Link: http://www.numpy.org/
4

Python Libraries for Data Science
SciPy:
 collection of algorithms for linear algebra, differential equations, numerical integration, optimization, statistics and more
 part of SciPy Stack  built on NumPy
Link: https://www.scipy.org/scipylib/
5

Python Libraries for Data Science
Pandas:
 adds data structures and tools designed to work with table-like data (similar to Series and Data Frames in R)
 provides tools for data manipulation: reshaping, merging, sorting, slicing, aggregation etc.
 allows handling missing data
Link: http://pandas.pydata.org/
6

Python Libraries for Data Science
SciKit-Learn:
 provides machine learning algorithms: classification, regression, clustering, model validation etc.
 built on NumPy, SciPy and matplotlib
Link: http://scikit-learn.org/
7

Python Libraries for Data Science
matplotlib:
 python 2D plotting library which produces publication quality figures in a variety of hardcopy formats
 a set of functionalities similar to those of MATLAB
 line plots, scatter plots, barcharts, histograms, pie charts etc.
 relatively low-level; some effort needed to create advanced visualization
Link: https://matplotlib.org/
8

Python Libraries for Data Science
Seaborn:
 based on matplotlib  provides high level interface for drawing attractive statistical graphics  Similar (in style) to the popular ggplot2 library in R
Link: https://seaborn.pydata.org/
9

Login to the Shared Computing Cluster
• Use your SCC login information if you have SCC account • If you are using tutorial accounts see info on the blackboard Note: Your password will not be displayed while you enter it.
10

Selecting Python Version on the SCC
# view available python versions on the SCC
[scc1 ~] module avail python
# load python 3 version
[scc1 ~] module load python/3.6.2
11

Download tutorial notebook
# On the Shared Computing Cluster
[scc1 ~] cp /project/scv/examples/python/data_analysis/dataScience.ipynb .
# On a local computer save the link:
http://rcs.bu.edu/examples/python/data_analysis/dataScience.ipynb
12

Start Jupyter nootebook
# On the Shared Computing Cluster
[scc1 ~] jupyter notebook
13

Loading Python Libraries

In [ ]:

#Import Python Libraries import numpy as np import scipy as sp import pandas as pd import matplotlib as mpl import seaborn as sns

Press Shift+Enter to execute the jupyter cell
14

Reading data using pandas
In [ ]: #Read csv file
df = pd.read_csv("http://rcs.bu.edu/examples/python/data_analysis/Salaries.csv")
Note: The above command has many optional arguments to fine-tune the data import process.
There is a number of pandas commands to read other data formats: pd.read_excel('myfile.xlsx',sheet_name='Sheet1', index_col=None, na_values=['NA']) pd.read_stata('myfile.dta') pd.read_sas('myfile.sas7bdat') pd.read_hdf('myfile.h5','df')
15

Exploring data frames
In [3]: #List first 5 records df.head()
Out[3]:
16

Hands-on exercises

 Try to read the first 10, 20, 50 records;

 Can you guess how to view the last few records;

Hint:

17

Data Frame data types

Pandas Type object
int64 float64
datetime64, timedelta[ns]

Native Python Type

Description

string

The most general dtype. Will be assigned to your column if column has mixed types (numbers and strings).

int

Numeric characters. 64 refers to

the memory allocated to hold this

character.

float

Numeric characters with decimals.

If a column contains numbers and

NaNs(see below), pandas will

default to float64, in case your

missing value has a decimal.

N/A (but see the datetime module Values meant to hold time data.

in Python’s standard library)

Look into these for time series

experiments.

18

Data Frame data types

In [4]: #Check a particular column type df['salary'].dtype
Out[4]: dtype('int64')

In [5]: #Check types for all the columns df.dtypes

Out[4]: rank discipline phd service sex salary dtype: object

object object int64 int64 object int64

19

Data Frames attributes

Python objects have attributes and methods.

df.attribute
dtypes columns axes ndim size shape values

description
list the types of the columns list the column names list the row labels and column names number of dimensions number of elements return a tuple representing the dimensionality numpy representation of the data

20

Hands-on exercises
 Find how many records this data frame has;  How many elements are there?  What are the column names?  What types of columns we have in this data frame?
21

Data Frames methods

Unlike attributes, python methods have parenthesis. All attributes and methods can be listed with a dir() function: dir(df)

df.method()

description

head( [n] ), tail( [n] ) describe() max(), min()

first/last n rows generate descriptive statistics (for numeric columns only) return max/min values for all numeric columns

mean(), median()

return mean/median values for all numeric columns

std()

standard deviation

sample([n])

returns a random sample of the data frame

dropna()

drop all the records with missing values

22

Hands-on exercises
 Give the summary for the numeric columns in the dataset  Calculate standard deviation for all numeric columns;  What are the mean values of the first 50 records in the dataset? Hint: use
head() method to subset the first 50 records and then calculate the mean
23

Selecting a column in a Data Frame
Method 1: Subset the data frame using column name: df['sex']
Method 2: Use the column name as an attribute: df.sex
Note: there is an attribute rank for pandas data frames, so to select a column with a name "rank" we should use method 1.
24

Hands-on exercises
 Calculate the basic statistics for the salary column;  Find how many values in the salary column (use count method);  Calculate the average salary;
25

Data Frames groupby method
Using "group by" method we can: • Split the data into groups based on some criteria • Calculate statistics (or apply a function) to each group • Similar to dplyr() function in R
In [ ]: #Group data using rank df_rank = df.groupby(['rank'])
In [ ]: #Calculate mean value for each numeric column per each group df_rank.mean()
26

Data Frames groupby method
Once groupby object is create we can calculate various statistics for each group:
In [ ]: #Calculate mean salary for each professor rank: df.groupby('rank')[['salary']].mean()
Note: If single brackets are used to specify the column (e.g. salary), then the output is Pandas Series object. When double brackets are used the output is a Data Frame
27

Data Frames groupby method
groupby performance notes: - no grouping/splitting occurs until it's needed. Creating the groupby object only verifies that you have passed a valid mapping - by default the group keys are sorted during the groupby operation. You may want to pass sort=False for potential speedup:
In [ ]: #Calculate mean salary for each professor rank: df.groupby(['rank'], sort=False)[['salary']].mean()
28

Data Frame: filtering
To subset the data we can apply Boolean indexing. This indexing is commonly known as a filter. For example if we want to subset the rows in which the salary value is greater than $120K:
In [ ]: #Calculate mean salary for each professor rank: df_sub = df[ df['salary'] > 120000 ]
Any Boolean operator can be used to subset the data: > greater; >= greater or equal; < less; <= less or equal; == equal; != not equal;
In [ ]: #Select only those rows that contain female professors: df_f = df[ df['sex'] == 'Female' ]
29

Data Frames: Slicing
There are a number of ways to subset the Data Frame: • one or more columns • one or more rows • a subset of rows and columns
Rows and columns can be selected by their position or label
30

Data Frames: Slicing
When selecting one column, it is possible to use single set of brackets, but the resulting object will be a Series (not a DataFrame):
In [ ]: #Select column salary: df['salary']
When we need to select more than one column and/or make the output to be a DataFrame, we should use double brackets:
In [ ]: #Select column salary: df[['rank','salary']]
31

Data Frames: Selecting rows
If we need to select a range of rows, we can specify the range using ":"
In [ ]: #Select rows by their position: df[10:20]
Notice that the first row has a position 0, and the last value in the range is omitted: So for 0:10 range the first 10 rows are returned with the positions starting with 0 and ending with 9
32

Data Frames: method loc
If we need to select a range of rows, using their labels we can use method loc:
In [ ]: #Select rows by their labels: df_sub.loc[10:20,['rank','sex','salary']]
Out[ ]:
33

Data Frames: method iloc
If we need to select a range of rows and/or columns, using their positions we can use method iloc:
In [ ]: #Select rows by their labels: df_sub.iloc[10:20,[0, 3, 4, 5]]
Out[ ]:
34

Data Frames: method iloc (summary)
df.iloc[0] # First row of a data frame df.iloc[i] #(i+1)th row df.iloc[-1] # Last row
df.iloc[:, 0] # First column df.iloc[:, -1] # Last column

df.iloc[0:7]

#First 7 rows

df.iloc[:, 0:2] #First 2 columns

df.iloc[1:3, 0:2] #Second through third rows and first 2 columns

df.iloc[[0,5], [1,3]] #1st and 6th rows and 2nd and 4th columns

35

Data Frames: Sorting
We can sort the data by a value in the column. By default the sorting will occur in ascending order and a new data frame is return.
In [ ]: # Create a new data frame from the original sorted by the column Salary df_sorted = df.sort_values( by ='service') df_sorted.head()
Out[ ]:
36

Data Frames: Sorting
We can sort the data using 2 or more columns:
In [ ]: df_sorted = df.sort_values( by =['service', 'salary'], ascending = [True, False])
df_sorted.head(10)
Out[ ]:
37

Missing Values
Missing values are marked as NaN
In [ ]: # Read a dataset with missing values flights = pd.read_csv("http://rcs.bu.edu/examples/python/data_analysis/flights.csv")
In [ ]: # Select the rows that have at least one missing value flights[flights.isnull().any(axis=1)].head()
Out[ ]:
38

Missing Values

There are a number of methods to deal with missing values in the data frame:

df.method()

description

dropna()

Drop missing observations

dropna(how='all')

Drop observations where all cells is NA

dropna(axis=1, how='all') Drop column if all the values are missing

dropna(thresh = 5)

Drop rows that contain less than 5 non-missing values

fillna(0)

Replace missing values with zeros

isnull()

returns True if the value is missing

notnull()

Returns True for non-missing values

39

Missing Values
• When summing the data, missing values will be treated as zero • If all values are missing, the sum will be equal to NaN • cumsum() and cumprod() methods ignore missing values but preserve them in
the resulting arrays • Missing values in GroupBy method are excluded (just like in R) • Many descriptive statistics methods have skipna option to control if missing
data should be excluded . This value is set to True by default (unlike R)
40

Aggregation Functions in Pandas
Aggregation - computing a summary statistic about each group, i.e. • compute group sums or means • compute group sizes/counts
Common aggregation functions:
min, max count, sum, prod mean, median, mode, mad std, var
41

Aggregation Functions in Pandas
agg() method are useful when multiple statistics are computed per column:
In [ ]: flights[['dep_delay','arr_delay']].agg(['min','mean','max']) Out[ ]:
42

Basic Descriptive Statistics

df.method()
describe min, max mean, median, mode var, std sem skew kurt

description
Basic statistics (count, mean, std, min, quantiles, max) Minimum and maximum values Arithmetic average, median and mode Variance and standard deviation Standard error of mean Sample skewness kurtosis

43

Graphics to explore the data
Seaborn package is built on matplotlib but provides high level interface for drawing attractive statistical graphics, similar to ggplot2 library in R. It specifically targets statistical data visualization
To show graphs within Python notebook include inline directive:
In [ ]: %matplotlib inline
44

Graphics

distplot barplot violinplot
jointplot regplot pairplot boxplot swarmplot factorplot

description
histogram estimate of central tendency for a numeric variable similar to boxplot, also shows the probability density of the data Scatterplot
Regression plot
Pairplot
boxplot categorical scatterplot General categorical plot

45

Basic statistical Analysis
statsmodel and scikit-learn - both have a number of function for statistical analysis
The first one is mostly used for regular analysis using R style formulas, while scikit-learn is more tailored for Machine Learning.
statsmodels: • linear regressions • ANOVA tests • hypothesis testings • many more ...
scikit-learn: • kmeans • support vector machines • random forests • many more ...
See examples in the Tutorial Notebook
46

Conclusion
Thank you for attending the tutorial. Please fill the evaluation form: http://scv.bu.edu/survey/tutorial_evaluation.html
Questions: email: koleinik@bu.edu (Katia Oleinik)
47

