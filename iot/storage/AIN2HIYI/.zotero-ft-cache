RF and network
basics
Antonio Liñán Colina

• Architectures: 8-bit, 16-bit, 32-bit • Open Source (source code openly
available) • IPv4/IPv6/Rime networking • Devices with < 8KB RAM • Typical applications < 50KB Flash • Vendor and platform independent • C language • Developed and contributed by Universities,
Research centers and industry contributors • +10 years development

Zolertia RE-Mote

Zolertia RE-Mote (Zoul inside)
• ARM Cortex-M3, 32MHz, 32KB RAM, 512KB FLASH
• Double Radio: ISM 2.4GHz & 863-925MHz, IEEE 802.15.4-2006/e/g
• Hardware encryption engine and acceleration
• USB programing ready • Real-Time Clock and Calendar • Micro SD slot and RGB colors • Shutdown mode down to 150nA • USB 2.0 port for applications • Built-in LiPo battery charger to work with
energy harvesting and solar panels • On-board RF switch to use both radios over
the same RP-SMA connector • Pads to use an external 2.4GHz over U.Fl
connector, o solder a chip antenna

02-ipv6
examples/zolertia/tutorial/02-ipv6

HTTP, CoAP, MQTT, WebSockets
TCP, UDP

Application Transport

IPv6/IPv4, RPL Network/Routing

6LoWPAN

Adaptation

CSMA/CA
ContikiMAC, CSL
IEEE 802.15.4

MAC (medium access control) Radio duty cycling (RDC) Radio (PHY)

examples/zolertia/tutorial/02-ipv6

HTTP, CoAP, MQTT, WebSockets
TCP, UDP

Application Transport

IPv6/IPv4, RPL Network/Routing

6LoWPAN

Adaptation

CSMA/CA
ContikiMAC, CSL
IEEE 802.15.4

MAC (medium access control) Radio duty cycling (RDC) Radio (PHY)

examples/zolertia/tutorial/02-ipv6

examples/zolertia/tutorial/02-ipv6

Low-power radios
• Lowest power consumption respect to WiFI and alike • Depending on the operating frequency it might have the
same or longer wireless range than WiFI • Slower data rate: 1.2kbps to 1Mbps, depending on the
transceiver • IEEE 802.15.4 standard defines operating modes according
to countries regulations
examples/zolertia/tutorial/02-ipv6

http://www.ti.com

examples/zolertia/tutorial/02-ipv6

http://www.slideshare.net/Techtsunami/cn-prt-iot-v1

examples/zolertia/tutorial/02-ipv6

http://www.slideshare.net/usmanusb/elements-of-iot-connectivity-technologies

examples/zolertia/tutorial/02-ipv6

IEEE 802.15.4-2006/e, 2.4GHz channels (11-26)

http://www.founten.com/

examples/zolertia/tutorial/02-ipv6

IEEE 802.15.4g MR-FSK

https://dl.cdn-anritsu.com

examples/zolertia/tutorial/02-ipv6

examples/zolertia/tutorial/02-ipv6

examples/zolertia/tutorial/02-ipv6

As the transmission power increases the wireless range should increase as well.
examples/zolertia/tutorial/02-ipv6

https://github.com/alignan/IPv6-WSN-book

examples/zolertia/tutorial/02-ipv6

How to improve the wireless range:
• Increase the transmission power • Use antennas with higher gain • Increase antenna’s height • Use directive antennas • Try to orient the antennas
examples/zolertia/tutorial/02-ipv6

Omnidirectiona Antena 2.4GHz 5dBi “whip”
Yagi Directional antenna examples/zolertia/tutorial/02-ipv6

http://hackster.io/zolertia

HTTP, CoAP, MQTT, WebSockets
TCP, UDP

Application Transport

IPv6/IPv4, RPL Network/Routing

6LoWPAN

Adaptation

CSMA/CA
ContikiMAC, CSL
IEEE 802.15.4

MAC (medium access control) Radio duty cycling (RDC) Radio (PHY)

examples/zolertia/tutorial/02-ipv6

examples/zolertia/tutorial/02-ipv6

examples/rssi-scanner/rssi-scanner-cc2420.c

examples/zolertia/tutorial/02-ipv6

examples/zolertia/tutorial/02-ipv6

http://www.digikey.com/en/resources/conversion-calculators/conversion-calculator-battery-life

HTTP, CoAP, MQTT, WebSockets
TCP, UDP

Application Transport

IPv6/IPv4, RPL Network/Routing

6LoWPAN

Adaptation

CSMA/CA
ContikiMAC, CSL
IEEE 802.15.4

MAC (medium access control) Radio duty cycling (RDC) Radio (PHY)

examples/zolertia/tutorial/02-ipv6

examples/zolertia/tutorial/02-ipv6

examples/zolertia/tutorial/02-ipv6

examples/zolertia/tutorial/02-ipv6

https://tools.ietf.org/html/draft-ietf-6lowpan-hc-06

The default prefix is FD00::
core/net/ipv6/sicslowpan.c platforms/zoul/contiki-conf.h

HTTP, CoAP, MQTT, WebSockets
TCP, UDP

Application Transport

IPv6/IPv4, RPL Network/Routing

6LoWPAN

Adaptation

CSMA/CA
ContikiMAC, CSL
IEEE 802.15.4

MAC (medium access control) Radio duty cycling (RDC) Radio (PHY)

examples/zolertia/tutorial/02-ipv6

RPL: IPv6 Routing Protocol for Low power and Lossy Networks
Directed Acyclic Graph (DAG) Destination Oriented DAG (DODAG) ICMPv6 control messages
• DAG Information Object (DIO): sends DODAG information downwards
• Destination Advertisement Object (DAO): sends destination information upwards
• DAG Information Solicitation (DIS): requests a DIO

https://tools.ietf.org/id/draft-ietf-roll-rpl-19.txt

examples/zolertia/tutorial/02-ipv6

https://tools.ietf.org/id/draft-ietf-roll-rpl-19.txt

1. Nodes periodically send link-local multicast DIO messages
2. Nodes listen for DIO and use their information to join a new DODAG, or to maintain an existing DODAG
3. Nodes may use a DIS message to solicit a DIO
4. Based on information in the DIO the node chooses parents that minimize path cost to the DODAG root
examples/zolertia/tutorial/02-ipv6

examples/zolertia/tutorial/02-ipv6

platforms/zoul/contiki-conf.h

HTTP, CoAP, MQTT, WebSockets
TCP, UDP

Application Transport

IPv6/IPv4, RPL Network/Routing

6LoWPAN

Adaptation

CSMA/CA
ContikiMAC, CSL
IEEE 802.15.4

MAC (medium access control) Radio duty cycling (RDC) Radio (PHY)

examples/zolertia/tutorial/02-ipv6

UDP: User Datagram Protocol
• IETF RFC 768 • Minimal, unreliable, best-effort service • Connectionless • Best tailored for time-sensitive applications, as dropping packets
is preferable to waiting for delayed packets • Less energy-expensive (than TCP), lesser messages are required
to be exchanged • Used in DNS, DHCP, SNMP, RIP, OpenVPN, etc
examples/zolertia/tutorial/02-ipv6

Connect two RE-Motes and program the example: make 01-udp-local-multicast.upload && make login
examples/zolertia/tutorial/02-ipv6/01-udp-local-multicast

examples/zolertia/tutorial/02-ipv6/01-udp-local-multicast

RE-Motes have 2 factory MAC addresses stored in its flash memory, it can be overriden
platforms/zoul/contiki-conf.h examples/zolertia/tutorial/02-ipv6/01-udp-local-multicast

Sicslowpan (6LoWPAN implementation), CSMA and ContikiMAC (RDC) are enabled as default.
NullRDC leaves the radio on, increasing the throughput at the cost of energy consumption. Recommended for testing only, or if the devices are not running on batteries
examples/zolertia/tutorial/02-ipv6/project-conf.h examples/zolertia/tutorial/02-ipv6/01-udp-local-multicast

examples/zolertia/tutorial/02-ipv6/example.h examples/zolertia/tutorial/02-ipv6/01-udp-local-multicast

PANID 0xABCD

PANID 0xBEEF

PANID 0x1234

PANID (…)

CH15

PAN identifiers (PANID) allows the radio to filter out messages addressed to different PANs, allowing networks to share the same channel
examples/zolertia/tutorial/02-ipv6/example.h examples/zolertia/tutorial/02-ipv6/01-udp-local-multicast

examples/zolertia/tutorial/02-ipv6/01-udp-local-multicast

examples/zolertia/tutorial/02-ipv6/01-udp-local-multicast

examples/zolertia/tutorial/02-ipv6/01-udp-local-multicast

Structures to be used in the example: UDP and custom one for payload data
The my_msg_t structure content
An ID type if required Number of messages sent The core temperature will be stored here The ADC1 will be stored here The ADC2 will be stored here The ADC3 will be stored here The voltage level of the RE-Mote
examples/zolertia/tutorial/02-ipv6/01-udp-local-multicast

examples/zolertia/tutorial/02-ipv6/01-udp-local-multicast

examples/zolertia/tutorial/02-ipv6/example.h examples/zolertia/tutorial/02-ipv6/01-udp-local-multicast

examples/zolertia/tutorial/02-ipv6/01-udp-local-multicast

examples/zolertia/tutorial/02-ipv6/01-udp-local-multicast

examples/zolertia/tutorial/02-ipv6/01-udp-local-multicast

examples/zolertia/tutorial/02-ipv6/01-udp-local-multicast

examples/zolertia/tutorial/02-ipv6/01-udp-local-multicast

Experiment with the Radio settings and wireless link:
• How does the RSSI/LQI change if moving the devices apart, or putting an obstable in between?
• Rotate the RE-Mote’s so the antenna position is different, in which position yields better results in terms of RSSI?
• Try to decrease the transmission power to the minimum, and move the devices until they no longer hear each other.
• Increase the transmission power to the maximum and move the devices apart, what is the maximum distance? What would happen if you increase the height of one of the devices by 1 meter?
• Write down the addresses of your devices and your neighbors, try to identify the other groups devices
examples/zolertia/tutorial/02-ipv6/01-udp-local-multicast

examples/zolertia/tutorial/02-ipv6/03-sniffer

https://github.com/g-oikonomou/sensniff

examples/zolertia/tutorial/02-ipv6/03-sniffer

Check the channel and PAN ID matches your application examples/zolertia/tutorial/02-ipv6/03-sniffer/project-conf.h

Program a RE-Mote as sniffer (change the USB port accordingly)
make sniffer.upload PORT=/dev/ttyUSB0
Execute the Sensniff application
python sensniff.py --non-interactive -d /dev/ttyUSB0 -b 460800 –p test.pcap
In another terminal run:
sudo wireshark -i /tmp/sensniff
examples/zolertia/tutorial/02-ipv6/03-sniffer

Configure the context, default in Contiki are “aaaa::” and “fd00::” Configure the frame format as shown:

Experiment with the radio sniffer: • Try to filter the sniffed packets and only visualize your own • Try to identify the RPL control messages from the wireshark
capture, what types of messages can you spot? • Expand the protocol’s tabs and check the headers and its
fields, search for the PANID and other fields like the RSSI and LQI metadata.
examples/zolertia/tutorial/02-ipv6/03-sniffer

Conclusions
You should be able to:
• Understand how low power radio devices work and how to use link quality estimators
• Understand concepts like RDC, MAC and RPL networking basics • Understand the basics about 6LoWPAN • Change parameters like the transmission power, channel and
PAN ID • Create link-local networks and send sensor data wirelessly over
UDP • Use a Wireless packet sniffer to debug your application

Antonio Liñán Colina
alinan@zolertia.com antonio.lignan@gmail.com
Twitter: @4Li6NaN LinkedIn: Antonio Liñan Colina github.com/alignan hackster.io/alinan

