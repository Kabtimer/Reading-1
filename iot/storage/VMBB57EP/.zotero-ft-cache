Contiki introduction
Antonio Liñán Colina

https://www.arm.com/products/internet-of-things-solutions/mbed-IoT-device-platform.php

RAM ROM/FLASH
Processor

> 1MB RAM/ROM

• Architectures: 8-bit, 16-bit, 32-bit • Open Source (source code openly
available) • IPv4/IPv6/Rime networking • Devices with < 8KB RAM • Typical applications < 50KB Flash • Vendor and platform independent • C language • Developed and contributed by Universities,
Research centers and industry contributors • +10 years development

http://www.riva-lighting.de/ http://cetic.github.io/6lbr/

http://www.thingsquare.com http://www.tado.com
http://www.lifx.com

www.contiki-os.org https://github.com/contiki-os/contiki

Install Contiki

“INSTANT CONTIKI” VIRTUAL MACHINE
VMWare virtualized develop environment

http://www.contiki-os.org/start.html

Password is: user
Approx 2-3Gb Download size
Approx 8Gb Hard Drive

“IOT IN FIVE DAYS” VIRTUAL MACHINE
VMWare image built specific for the workshop

https://sourceforge.net/projects/zolertia/files/VM/IoT%20Workshop%20VM.7z

Password is: user
Approx 2-3Gb Download size
Approx 8Gb Hard Drive

CONFIGURE THE VIRTUAL MACHINE AS “BRIDGED”

Installing Contiki from scratch (Linux)
Install requirements (and extra goodies)
sudo add-apt-repository ppa:wireshark-dev/stable sudo apt-get update sudo apt-get install gcc-arm-none-eabi gdb-arm-none-eabi sudo apt-get -y install build-essential automake gettext sudo apt-get -y install gcc-arm-none-eabi curl graphviz unzip wget sudo apt-get -y install gcc gcc-msp430 sudo apt-get -y install openjdk-7-jdk openjdk-7-jre ant sudo apt-get –y install git git-core wireshark
Get a Contiki working copy:
git clone --recursive https:github.com/alignan/contiki cd contiki git submodule –update git checkout iot-workshop

Installing Contiki from scratch (OSX)
Install requirements (only the toolchain)
# Install Homebrew - http://brew.sh/ brew tap PX4/homebrew-px4 brew update # Install GCC Arm Toolchain brew install gcc-arm-none-eabi-49
Get a Contiki working copy:
git clone --recursive https:github.com/alignan/contiki cd contiki git submodule –update git checkout iot-workshop

Installing Contiki from scratch (Windows)
Install requirements (only the toolchain)
# Download ARM toolchain https://launchpad.net/gcc-arm-embedded/+download # Download and install MINGW https://sourceforge.net/projects/mingw/files/latest/download
Get a Contiki working copy:
git clone --recursive https:github.com/alignan/contiki cd contiki git submodule –update git checkout iot-workshop
https://github.com/alignan/IPv6-WSN-book/blob/master/3.asc#windows-installation-re-mote-only

Contiki structure

Applications/Engines that may be used by other applications: MQTT, CoAP Contiki core libraries: IPv4/IPv6, MAC, RDC, etc MCU implementation: MSP430 (Z1), CC2538 (RE-Mote) Devices implementation (radio, etc): CC2420 (Z1), CC1200 (RE-Mote)
Examples: IPv6, Zolertia-specific, sensors, etc. Platform specific implementation (Z1, RE-Mote)
Tools (flashing, emulation, visualization)

Specific Z1 applications Specific sensors and actuators drivers Makefiles (where the platform specifies the files to use and include)
Specific Contiki configuration CMoanintikAipplication, Z1 initialization (booting) and application entry point
Specific platform configuration (pin-out, peripherals)

Sensors and actuators ported Specific Firefly platform files
Specific RE-Mote platform files Makefiles (where the platform specifies the files to use and include)
Specific Contiki configuration Main Application, initialization (booting) and application entry point

Specific RE-Mote Makefile Specific RE-Mote initialization

IoT workshop content Specific Z1 examples and demos Specific RE-Mote examples and demos

Zolertia RE-Mote

Zolertia RE-Mote (Zoul inside)
• ARM Cortex-M3, 32MHz, 32KB RAM, 512KB FLASH
• Double Radio: ISM 2.4GHz & 863-925MHz, IEEE 802.15.4-2006/e/g
• Hardware encryption engine and acceleration
• USB programing ready • Real-Time Clock and Calendar • Micro SD slot and RGB colors • Shutdown mode down to 150nA • USB 2.0 port for applications • Built-in LiPo battery charger to work with
energy harvesting and solar panels • On-board RF switch to use both radios over
the same RP-SMA connector • Pads to use an external 2.4GHz over U.Fl
connector, o solder a chip antenna

01-basics
examples/zolertia/tutorial/01-basics

Fixes a problem related to being allowed to write to USB ports as the /dev/ttyUSB0 used to flash the nodes
sudo usermod -a -G dialout user
For the change to take effect, you need to logout and log back in Not required if using the “IoT in five days” virtual image!

VERIFY THE RE-MOTE IS CONNECTED

examples/zolertia/tutorial/01-basics/01-hello-world.c

examples/zolertia/tutorial/01-basics/Makefile

To compile an application:
make TARGET=zoul 01-hello-world
The TARGET is used to tell the compiler which hardware platform it should compile for. For the Z1 platform is “z1”, for the RE-Mote (and others zoul-based platforms) is “zoul”
You can save the TARGET so next time you don’t have to type it:
make TARGET=zoul savetarget
This will create a Makefile.target file. If no TARGET argument is added in the compilation command line, the compiler will search a valid target in the Makefile.target file (if exists).

To compile and program an application to a RE-Mote:
make 01-hello-world.upload
The upload argument tells the compiler to invoke the programming scripts required to program the compiled binary to the device.
If no specific PORT argument is given, it will program all the REMotes connected over USB.
make 01-hello-world.upload PORT=/dev/ttyUSB0

Programming over the USB is posible as the “bootloader backdoor” is enabled as default in Contiki.
The CP2104 USB to serial converter creates the USB connection, when flashing the image to be programmed is transferred over USB from the Host to the on-board PIC-BSL microcontroller, which automatically puts the RE-Mote in “flashing mode” and transfers the image to the RE-Mote’s CC2538.
The script invoked by the compiler to program the RE-Mote is the cc2538-bsl, located in tools/cc2538-bsl. It is already included in Contiki.

MicroUSB CP2104 PIC-BSL

RE-Mote CC2538

https://github.com/JelmerT/cc2538-bsl

MANUALLY ENTER THE FLASHING MODE
Press and hold user button, then press and hold reset button… release the reset button and then release the user button
https://youtu.be/6vg4f7U_kF4

To visualize the application output in a readable format, the following command is used:
make login
If no PORT is specified, it will open a connection to the first connected device it finds over USB.
make login PORT=/dev/ttyUSB0
Note you can execute one command after the other:
make 01-hello-world.upload PORT=/dev/ttyUSB0 && make login PORT=/dev/ttyUSB0

The next command is similar to make login, but it appends an UNIX timestamp:
make serialview
If no PORT is specified, it will open a connection to the first connected device it finds over USB.
make serialview PORT=/dev/ttyUSB0
You can also list the connected devices:
make motelist

Buttons and LEDs
Events and actions can be triggered by pressing the user button: send a message over the radio, take a sensor sample, start a process, etc.
The LEDs (light-emitting diodes) help us to understand what happens in the device, by using different colours and blinking sequences we know when an event is happening, if there are any errors or what happens in our application.

examples/zolertia/tutorial/01-basics/02-led-and-button.c

The application will wait (as it will be paused) until this event happens, saving processing cycles and energy
examples/zolertia/tutorial/01-basics/02-led-and-button.c

Press and hold the button, the LED will be on When the button is released, the LED will be off
examples/zolertia/tutorial/01-basics/02-led-and-button.c

platforms/zoul/remote/board.h

16 in binary is 00010000 Same as (1 << 4) The LED on should be the Green: #define LEDS_GREEN (1 << 4) /**< LED1 (Green) -> PD4 */
examples/zolertia/tutorial/01-basics/02-led-and-button.c

platforms/zoul/dev/button-sensor.h

Always after making a change to the source code, clean the previously compiled objects
make clean

What Color the LEDs will show? What number is printed when the LEDs are on? What will happen each time we press the button?
examples/zolertia/tutorial/01-basics/02-led-and-button.c

Each time we press the button, the LED will toggle on and off showing a yellow-ish color
examples/zolertia/tutorial/01-basics/02-led-and-button.c

We are waiting for ANY event to happen examples/zolertia/tutorial/01-basics/02-led-and-button.c

The press and hold option extends the possible alternatives the application would have to handle the user input
examples/zolertia/tutorial/01-basics/02-led-and-button.c

Timers
Timers allow to execute actions periodically, like measuring a sensor periodically, waiting a few seconds before executing a function, sending hourly reports, etc.

examples/zolertia/tutorial/01-basics/03-timers.c

The timer and stimer are computing-intensive, whereas the etimer, ctimer and rtimer generate events/callbacks only when the counter expires, saving processing cycles and energy
examples/zolertia/tutorial/01-basics/03-timers.c

CLOCK_SECOND is a constant defined by each platform, specifies the number of ticks a second has according to the platform’s clock. If you want to specify a 5 seconds timer, then use (CLOCK_SECOND * 5), or likewise half a second would be the nearest integer to (CLOCK_SECOND / 2)
examples/zolertia/tutorial/01-basics/03-timers.c

Each timer has its own API Aapplication Programming Interface) or commands, but mostly are alike:
core/sys/etimer.h

Depending on the type of timers we need to use, include a given header and create a timer structure
examples/zolertia/tutorial/01-basics/03-timers.c

RTIMER_NOW() is a macro returning the current tick count RTIMER_SECOND is a platform-defined constant, number of ticks/second
examples/zolertia/tutorial/01-basics/03-timers.c

examples/zolertia/tutorial/01-basics/03-timers.c

Print the value of CLOCK_SECOND and RTIMER_SECOND Turn on only the red LED each time the “tick” counter variable is even, and the blue LED whenever is odd. Use only the ctimer from the example Stop the timers whenever the user button is pressed Restart the timer and set the tick variable value to zero when the user button is pressed again
examples/zolertia/tutorial/01-basics/03-timers.c

examples/zolertia/tutorial/01-basics/03-timers.c

Processes
Contiki has two execution contexts: cooperative and preemptive Processes are cooperative and sequential, interrupts (button, sensors events) and the real-timer are preemptive.

https://github.com/contiki-os/contiki/wiki/Processes

examples/zolertia/tutorial/01-basics/04-processes.c

The process control block (RAM): contains runtime information about the process such as the name of the process, the state of the process, and a pointer to the process thread of the process.

The process thread (ROM): the code of the process

https://github.com/contiki-os/contiki/wiki/Processes

examples/zolertia/tutorial/01-basics/04-processes.c

https://github.com/contiki-os/contiki/wiki/Processes

core/sys/process.h

Process A

process_post()

Event Queue

Process B

https://github.com/contiki-os/contiki/wiki/Processes

examples/zolertia/tutorial/01-basics/04-processes.c

Process A process_post_synch()
Process B

https://github.com/contiki-os/contiki/wiki/Processes

examples/zolertia/tutorial/01-basics/04-processes.c

Interrupt or function

process_poll()

Process B

The only function that can be called from preemptive context

https://github.com/contiki-os/contiki/wiki/Processes

examples/zolertia/tutorial/01-basics/04-processes.c

Increment a counter

1

Process 1

process_start()

Process 3

and toggle green LED

When counter is 10 or higher, request termination

process_post(&process1, …)

process_start()

process_exit()

2

Process 1

Process 3

Toggle red LED for 10 seconds and terminate process3

PROCESS_EVENT_EXITED

Process 2

examples/zolertia/tutorial/01-basics/04-processes.c

examples/zolertia/tutorial/01-basics/04-processes.c

examples/zolertia/tutorial/01-basics/04-processes.c

examples/zolertia/tutorial/01-basics/04-processes.c

Create two processes: One that increments a counter and toggles a LED. When the counter reaches ten (10), it should print a message to the screen. A second process that each time the user button is pressed, it will change the color of the LED to be toggled (i.e from Green to Blue, then Red, and repeat).
examples/zolertia/tutorial/01-basics/04-processes.c

Conclusions
You should be able to:
• Create and compile a basic Contiki application • Program a Zolertia device • Implements timers, LEDs and buttons in your application • Understand how Contiki processes and protothreads are
implemented • Create processes and tasks interacting with each other • Identify connected devices, visualize the debug output in the
screen

Antonio Liñán Colina
alinan@zolertia.com antonio.lignan@gmail.com
Twitter: @4Li6NaN LinkedIn: Antonio Liñan Colina github.com/alignan hackster.io/alinan

