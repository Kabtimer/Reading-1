1
1
٧۷ OpenWSN  Important!
Implementing the Internet of Things!

Cedric Adjih
Inria

Thomas Watteyne
Research Lead, OpenWSN project, UC Berkeley

Workshop Internet Of Things / Equipex FIT IoT-LAB 6 November 2014, Montbonnot, France

Outline
2

Why OpenWSN? Technical Overview Example Projects Opportunities and Road Ahead

Time Synchronized Channel Hopping

3

• Motes are synchronized

• Communication follows a schedule

• Schedule gives tunable trade-off between

• packets/second

• latency • robustness

…and energy consumption

A

C

B

E

D

G

F

16 channel offsets

{i}IoT · Thomas Watteyne

e.g. 33 time slots

I
H J

Time Synchronized Channel Hopping

4

2006

Time Synchronized

Wireless

Mesh

Extension to

Protocol

HART

2007

2009

2012

Integrates IPv6 technology

IEEE802.15.4e Time

de-facto standard for process control

Slotted Channel Hopping

tens of thousands of networks ! proven technology
• Clean layer 2 technology: can combine with IoT upper stack • Enables different scheduling approaches, identify limits

Open Source Implementation

Standardization

OpenWSN.berkeley.edu

5
AApAppplpipclilacictaiaotitnoiosnn

CoAP

HTTP

UDP

TCP

RPL

6LoWPAN

6top (6TiSCH)

IEEE802.15.4e TSCH IEEE802.15.4 (PHY)
APAplapptpfliolcicramatitsoionn

Open Source Collaboration Tools
6

source code (GitHub)

documentation
openwsn.berkeley.edu

ticketing

continuous integration (Travis-CI and Jenkins-CI)

source code documentation

Architecture
7
Internet

DAGroot motes

OpenVisualizer

serial

software

firmware

Porting OpenWSN

8
AApAppplpipclilacictaiaotitnoiosnn

CoAP

HTTP

UDP

TCP

RPL

6LoWPAN

6top (6TiSCH)

IEEE802.15.4e TSCH IEEE802.15.4 (PHY)
APAplapptpfliolcicramatitsoionn

10% BSP

90% hardware independent

OpenMote-CC2538

GINA

WSN430v13b

WSN430v14

Z1

TelosB

OpenMoteSTM

SAM R21

IoT-LAB_M3

AgileFox

Build System
9
board

mspgcc armgcc gcc
toolchain
OpenWSN Build System

project

binary
scons board=<board> toolchain=<toolchain> <project>

OpenVisualizer
10
data
Internet

• communicates with the devices • receives data • sends data • receives status • configures (DAG) root
• 6LoWPAN/IPv6 compression • RPL source route calculation • written in Python

status

status

Slotted Structure
11

16 channel offsets

{i}IoT · Thomas Watteyne

e.g. 33 time slots

A

C

B

E

D

G

F

I
H J

Interacting with motes

143
AApAppplpipclilacictaiaotitnoiosnn

CoAP

HTTP

UDP

TCP

RPL

6LoWPAN

6top (6TiSCH)

IEEE802.15.4e TSCH IEEE802.15.4 (PHY)
APAplapptpfliolcicramatitsoionn

CoAP is the “HTTP for motes”
Internet

OpenWSN on IoT-LAB
14
WSN430 port 
https://openwsn.atlassian.net/wiki/display/OW/WSN430
IoT-LAB_M3 Port (+AgileFox) 
https://openwsn.atlassian.net/wiki/display/OW/IoT-LAB_M3

Isabel Vergara Franck Rousseau

Pedro Helou

Oana Iova

Automated exp. on IoT-LAB 
https://github.com/adjih/exp-iotlab
IoT-LAB tutorial 
(w/ architecture, example of cstorm.c, tests, fixes, and a lot more) 
  https://openwsn.atlassian.net/wiki/display/OW/Running+a+Network
https://openwsn.atlassian.net/wiki/display/~gaillard/Running +OpenWSN+experiments+on+IoT-Lab+M3+nodes
iot-lab.openwsn.org

Adilla Susungi Fabrice Theoleyre Alaeddine Weslati Cedric Adjih
Guillaume Gaillard

OpenWSN on IoT-LAB
15

OpenSim Emulator

176
AApAppplpipclilacictaiaotitnoiosnn

CoAP

HTTP

UDP

TCP

RPL

6LoWPAN

6top (6TiSCH)

IEEE802.15.4e TSCH IEEE802.15.4 (PHY)
APAplapptpfliolcicramatitsoionn

Python

C

OpenVisualizer

propagation model

… emulated mote
(Python extension module)

emulated mote
(Python extension module)

• same interface as real motes • omniscient debugging:
• see all packets (Wireshark) • see all pin activity (logic analyzer) • models: • clock • propagation/topology
scons board=python toolchain=gcc oos_openwsn
openVisualizerWeb.py --sim --simCount=3

OpenPi
17
Internet
openpi

OpenVM

• OpenVisualizer pre-installed on Raspberry Pi image • built nightly with latest OpenVisualizer
openpi.openwsn.org

• run with (free) vmware Player • all toolchains pre-installed
openvm.openwsn.org

19
{Open}Projects 
some examples

19
• An easy-to-use ecosystem of IoT hardware • Centered about the OpenMote-CC2538

OpenMote TI CC2538 SoC (Cortex M3 + radio) 4 LEDs, 2 Buttons
2 antennas

OpenBase Ethernet PHY+MAC USB-to-UART port 10-pin ARM JTAG

Xavi Vilajosana Pere Tuset OpenMote, Barcelona, Catalunya
OpenBattery Temp./Humd. Acceleration
Light 2xAAA batteries

www.openmote.com

Mercator
20
Dense Wireless Connectivity Datasets for the IoT
Mercator is a collection of connectivity datasets gathered on the IoT-LAB sites. These datasets are: • dense in time, variation of connectivity over time. • dense in space, how connectivity is affected by the location of transmitter and receivers. • dense in frequency, how connectivity is affected by the communication frequency.

Constanza Perez Garcia Diego Dujovne Universidad Diego Portales, Chile

https://github.com/openwsn-berkeley/mercator

integration
21
• Goal: combine the RIOT preemptive scheduler with the OpenWSN protocol stack

Thomas Eichinger Oliver Hahm Emmanuel Baccelli Inria/Freie Universitat Berlin, Germany

Application Application

07-App

System Network Libraries Stack
Kernel (Scheduling, threading…)
Hardware abstraction

04-TRAN 03b-IPv6 03a-IPHC 02b-MAChigh 02a-MAClow 01-PHY

Hardware Platform

Demonstrated during 6TiSCH plugfest at IETF90, Toronto, July 2014.

OpenMote-STM
23

Tengfei Chang

Qin Wang

University of Science & Technology Beijing, China

• STM32 micro-controller, Atmel AT86RF231 radio • XBee-compliant pin-outs

plugfests
24

IETF89, London, March 2014

IETF90, Toronto, July 2014

Next step for IoT-LAB
24
M3 != M3-A8
! “Port” on M3-A8 ! Update of moteProbe 
to run on open-A8
IoT-LAB tools
! Sniffers with timestamps ! Wireshark 6TiSCH dissector
Advanced 6TiSCH architectures
! GPS time sync.

Road Ahead
25
[Q4 2014] FreeRTOS support (RIOT?) [Q1 2015] 6TiSCH Minimal security [Q2 2015] 6TiSCH interop
! By ETSI, IETF93 Prague, July 2015
[Q3 2015] Cloud-based (re)programming [Q4 2015] distributed scheduling
Open for porting opportunities Open for collaboration

Contributors
26
https://openwsn.atlassian.net/wiki/display/OW/Team
Adilla Susungi, Ahmad Dehwah, Alaeddine Weslati, Andrew Pullin, Ankur Mehta, Anita Flynn, Boyang Zhang, Branko Kerkez, Constanza Pérez García, Cedric Adjih, Charles McParland, Chol Su Kang, Christopher Snyder, Chuang Qian, David Burnett, David Stanislowski, Diego Dujovne, Edmund Ye, Emmanuel Baccellli, Emily Chen, Fabien Chraim, Fabrice Theoleyre, Franck Rousseau, Giuseppe Piro, Giuseppe Ribezzo, Guillaume Gaillard, Hilfi Alkaff, Isabel Vergara, Jonathan Simon, Kazushi Muraoka, Ken Bannister, Kevin Weekly, Kris Pister, Laura Keys, Leonid Keselman, Marcelo Barros de Almeida, Mathivanan, Michael Lin, Min Ting, Nahir Sarmicanic, Nicola Accettura, Oleksiy Budilovsky, Oliver Hahm, Pascal Thubert, Pedro Issa Helou, Peng Du, Pere Tuset, Qin Wang, Ricardo Cervera-Navarro, Russ Tremain, Sahar Mesri, Tengfei Chang, Thomas Eichinger, Thomas Watteyne, Vinoth Kumar, Vincent Ladeveze, Vitor Garbellini, Xavi Vilajosana.
if I left you off the list, send me an email! It wasn't intentional.

Cedric Adjih
298

Cedric Adjih is currently a researcher in the Infine team of Inria Saclay-Île-de-France. He received his PhD diploma in 2001 from Versailles University (France). He graduated from ECP (Ecole Centrale de Paris) in 1994.
His research interests have focused on wireless multihop networks (ad-hoc networks, mesh networks, sensor networks). He has studied various aspects related to performance evaluation, algorithm and protocol design, and practical experimentation, on different subjects, including: efficient routing, reliable routing, broadcasting and multicasting ad-hoc military networks, energy-efficiency, quality of service, queueing theory, autoconfiguration, security issues. His current research interests include modern Wireless Sensor Networks, Internet of Things, network coding, Information Centric Networking (ICN), caching, …
Cedric follows and participates continuously to standardization efforts, with contributions to within 802.11 task group "s”, OLSR protocol (RFC 3626), IEEE 802.14 (cable), network coding research group at IRTF, …
He is co-managing the IoT-LAB site located at Rocquencourt (with Emmanuel Baccelli).

Thomas Watteyne
3209
Thomas Watteyne (http://eecs.berkeley.edu/~watteyne/) is an insatiable enthusiast of low-power wireless mesh technologies. He is a Senior Networking Design Engineer at Linear Technology, in the Dust Networks product group, the undisputed leader in supplying low power wireless mesh networks for demanding industrial process automation applications. He designs networking solutions based on a variety of Internet-of-Things (IoT) standards. Since 2013, he co-chairs the IETF 6TiSCH working group, which standardizes how to use IEEE802.15.4e TSCH in IPv6-enabled mesh networks, and recently joined the IETF Internet-of-Things Directorate. Prior to that, Thomas was a postdoctoral research lead in Prof. Kristofer Pister’s team at the University of California, Berkeley. He founded and is the coordinator of Berkeley’s OpenWSN project, an open-source initiative to promote the use of fully standards-based protocol stacks for the IoT. Between 2005 and 2008, he was a research engineer at France Telecom, Orange Labs. He holds a PhD in Computer Science (2008), an MSc in Networking (2005) and an MEng in Telecommunications (2005) from INSA Lyon, France. He is fluent in 4 languages.

