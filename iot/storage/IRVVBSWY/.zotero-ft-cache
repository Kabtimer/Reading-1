Case Study 3: Queueing Systems
Case Study 3: Queueing Systems
Alain Jean-Marie INRIA/LIRMM, Université Montpellier, CNRS
Alain.Jean-Marie@inria.fr
RESCOM Summer School 2019 26 June 2019

Case Study 3: Queueing Systems
Contents
specifying a queue constructing the probability transition matrix solving the equilibrium equations in closed form extending the model

Case Study 3: Queueing Systems Specifying a queue
The simple discrete-time queue
Consider a single-server queue in discrete time. In each slot:
arrival of a batch of customers with size distributed according to a general probability distribution:
P{A = k} = ak . service of one customer, if at least one is present. If the odrer of events is: 1 arrival of batches 2 departure of customers

Case Study 3: Queueing Systems Constructing the transition matrix
Evolution equations

Let Qn denote the number of customers in queue at time n, just after departures, but before new arrivals. The evolution of this variable is given by:

Qn+1 = [Qn + An − 1]+.

Let Rn denote the number of customers in queue at time n, just before departures and new arrivals. The evolution of this variable is given by:

Rn+1 = [Rn − 1]+ + An.

Both are connected by:

Rn = Qn + An .

Case Study 3: Queueing Systems Transitions
Transition diagram, transition Matrix

For the Markov chain {Qn; n ∈ N}:

a3 a2

a3 a2

a3

a3

a2

a2

a2

0 a0 + a1

1
a0 a1

n−1

n

n+1

a0

a0

a0

a1

a1

a1

a0 + a1 a2 a3 . . .

 

a0

P= 

 

0

a1 a2 . . .

a0

a1

.

.

 .

 ...

...

...

.

.

 .

Case Study 3: Queueing Systems Transitions
Transition diagram, transition Matrix

For the Markov chain {Rn n ∈ N}:

a2 a1

a3 a2

a3

a3

a2

a2

a2

0

1

a0

a0

a1

n−1

n

n+1

a0

a0

a0

a1

a1

a1

a0 a1 a2 . . .

a0

a1

a2

.

.

.

 

P= 

 

0

a0

a1

.

.

.

  

 ... . . . . . . . . .

Case Study 3: Queueing Systems Stationary distribution
Solution

Solving for the stationary equations (process {Rn}):

a0 a1 a2 . . .

a0 a1 a2 . . .

π0 π1 π2 . . .

=

π0

π1

π2

...

.

 

0

a0

a1

.

.

 .

 ...

...

...

.

.

 .

π0 = a0π0 + a0π1 π1 = a1π0 + a1π1 + a0π2 ... ...
n+1
πn = anπ0 + an+1−k πk
k =1

Case Study 3: Queueing Systems Stationary distribution

The generating function approach

Recurrences such as
n+1
πn = anπ0 + an+1−k πk ,
k =0
can be handled with generating functions.

n≥0

One introduces the probability generating functions:

∞

R(z) :=

πnzn = E(zR )

n=0

∞

A(z) :=

anzn = E(zA) .

n=0

From the recurrence, it is deduced that:

R(z) = π0A(z)

1− 1 z

A(z )

+

R(z) .

z

The function R(z) is therefore solution of the equation:

1−z R(z) = π0A(z) A(z) − z .

Case Study 3: Queueing Systems Stationary distribution

The generating function approach (ctd.)

The quantity π0 is unknown in the formula: 1−z
R(z) = π0A(z) A(z) − z .

One way to determine it is letting z → 1. For probability generating functions: R(1) = A(1) = 1. Then, using L’Hôpital’s rule,
−1 1 = π0a0 A (1) − 1

and A (1) = EA. Conclusion:

π0 = 1 − EA.

Or ... directly with Little’s formula! Finally:

R (z )

=

(1 − EA)

A(z)(1 − z) A(z) − z

.

Case Study 3: Queueing Systems Stationary distribution
The generating function approach (end)

From the generating function, one recovers the moments of π, the distributions of R and Q:

EQ

=

EA2 − EA 2(1 − EA)

ER = EQ + EA

EQ 2

=

3(EA2)2

−

9EA2EA

+

6(EA)2 + 2EA3 6(1 − EA)2

−

2EA3EA

+

3EA2

−

3EA

ER2 = EQ2 + 2EQEA + (EA)2 .

and for speciﬁc distributions of A, the distribution of Q. For instance, if A ∼ Geom(ρ):

πk

=

(1 − 2ρ)

ρk (1 − ρ)k+1

,

k ≥ 1,

1 − 2ρ π0 = 1 − ρ .

Case Study 3: Queueing Systems Variants
Model variant #1: ﬁnite capacity

New rules: Buﬀer capacity K Partial batches accepted up to capacity.
New diagram, new (K + 1) × (K + 1) matrix:

a0 a1 a2 . . . aK−1 aK + aK+1 + . . .

a0 a1 a2 . . . aK−1 aK + aK+1 + . . .



P=

 

0

a0

a1

...

  

  

...

... ... ...

  

0 ...

a0

a1 + a2 + . . .

Case Study 3: Queueing Systems Variants

Model variant #2: services of geometric duration

The geometric law is memoryless: if G ∼ Geom(ρ) (on the set {1, 2, . . .}),

P{G ≥ n + m|G ≥ n} = P{G ≥ m} .

Another way of looking at it: if G ∼ Geom(ρ), with probability 1 − ρ, G = 1 with probability ρ, G = 1 + G with G ∼ Geom(ρ).
So, transitions from a queue size n > 0 are now: with probability (1 − ρ)ai , to n − 1 + i with probability ρai , to n + i.

a2

ρa3 + ρa2

ρa3 + ρa2 ρa3 + ρa2

a1

ρa2 + ρa1

ρa2 + ρa1

ρa2 + ρa1

0

1

a0

ρa0

ρa1 + ρa0

n−1

n

n+1

ρa0

ρa0

ρa0

ρa1 + ρa0 ρa1 + ρa0 ρa1 + ρa0

Case Study 3: Queueing Systems Variants
Model variant #3: deterministic services
Assume now that services last s slots. The process {Rn} is not Markovian anymore. How to ﬁx this? Two main ideas
adding variables to the state space: the “method of phases” of “method of the supplementary variable” or embedding the process at speciﬁc times such that the resulting process is now Markovian. Both methods of phases and embedding can be generalized to general service distributions.

Case Study 3: Queueing Systems Variants
The method of phases

Let Sn be the amount of service given to the customer in service, at the beginning of slot n, just after arrivals. Then the process (Rn, Sn) ∈ N × {0, 1, . . . , s − 1} is a Markov Chain. Its diagram (s = 3):
a2
a1

S = 0 0 a1 1

a0 S=1

a0 a1
1

n−1
a0 a1
n−1

n

n+1

a2 n

n+1

a0 S=2

a0 1

a0

n − 1 a1

n

n+1

Case Study 3: Queueing Systems Variants
The method of embedding
Let {Bm} be the process of the number of customers in queue when: either some service begins some slot begins if no customer in service
This is a Markov chain with transitions for n > 0: n → n + a − 1 with probability P{A1 + A2 + A3 = a} for n = 0: n → n + a with probability P{A = a}.

Case Study 3: Queueing Systems Variants
Model variant #4: Batch services

Assume that there are B servers that work in parallel. The evolution equation is now:

Rn+1 = [Rn − B]+ + An .

Transition matrix for B = 2:

 a0 a1 a2 . . .

a0 + a1 a2 a3 . . .



P

=

 

a0

a1

a2

.

.

 .



 

0

a0

a1

.

.

 .

 ...

...

...

.

.

 .

Case Study 3: Queueing Systems Variants
Model variant #5: Arrivals with phases

It may happen that the arrival process undergoes phases: e.g. some with high arrival rate, some with low arrival rate.
Assume that the switch from H to L occurs according to a Markov Chain:
1−a

a

H

L

b

1−b
When the phase: is H, batch sizes have probabilities hi = P{A = i|H} is L, batch sizes have probabilities i = P{A = i|L}.

Case Study 3: Queueing Systems Variants
Arrivals with phases, ctd.

Transition table:
origin (H, 0) (H, 0) (L, 0) (L, 0) (H, m) (H, m) (L, m) (L, m)

destination
(H, n) (L, n) (L, n) (H, n) (H, m + n − 1) (L, m + n − 1) (L, m + n − 1) (H, m + n − 1)

probability
ahn (1 − a)hn bn (1 − b) n
ahn (1 − a)hn bn (1 − b) n

restriction
n≥0 n≥0 n≥0 n≥0 m > 0, n ≥ 0 m > 0, n ≥ 0 m > 0, n ≥ 0 m > 0, n ≥ 0

Case Study 3: Queueing Systems Variants
Model variant #6: Impatient customers
Assume that customers are impatient: with probability α, each of them may leave the queue if not being served. How to calculate Pij ? Introduce Zn, the number of patient customers, remaining after
service has begun impatient customers have left Then
Rn+1 = Zn + An .
Pij = P{Rn+1 = j |Rn = i } = P{Zn + An = j|Rn = i }
i
= P{Zn + An = j|Zn = z} P{Zn = z|Rn = i }
z =0 i
= P{An = j − z} P{Zn = z|Rn = i }
z =0

Case Study 3: Queueing Systems Variants
Impatient customers, ctd.

There remains to compute P{Zn = z|Rn = i}. If i = 0: P{Zn = 0|Rn = 0} = 1. If i > 0, one customer enters service. Impatience among the i − 1
remaining ones:

P{Zn = z|Rn = i} = P{z stay out of i − 1} = i − 1 αz−i+1(1 − α)z . z

Finally, for i > 0,

Pij = P{Rn+1 = j |Rn = i }

i −1
= aj−z
z =0

i − 1 αz−i+1(1 − α)z . z

Case Study 3: Queueing Systems Variants
Model variant #7: service with threshold
Assume that the server does not start before there are at least ν customers in the queue. Add also the buﬀer capacity K . The evolution equations are now
if Rn < ν: Rn+1 = min{Rn + An, K } if Rn ≥ ν: Rn+1 = min{Rn − 1 + An, K } The chain now evolves over E = {ν − 1, ν, . . . , K }. Starting the server has cost Cs . Losing a customer because buﬀer capacity is exceeded has cost CL. What is the best ν?

Case Study 3: Queueing Systems Variants
Average cost in the queue

Evaluation of the average cost:

1

Jν

=

lim
n→∞

N

E

N −1
(Cs 1{service starts at n} + CL#{customers lost at n}

.

n=0

Considering this is a Markov reward process, we have:

K

Jν = Cs πν−1P{An > 0} + CL

πi E(An − (K − i ))

i =ν −1

K

∞

= Cs πν−1(1 − a0) + CL

πi

jaj .

i=ν−1 j=K −i

→ to be evaluated for each possible ν.

Case Study 3: Queueing Systems Summary
Summary
In this “case study”: description of the queue in discrete time; order of the events equations of evolution, useful for the construction of probability transition matrices many variants with service duration, arrival processes, service discipline setup of an optimization problem.
More to be done in the Lab!

