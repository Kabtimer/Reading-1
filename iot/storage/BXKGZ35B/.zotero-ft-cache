Author’s Accepted Manuscript
Software defined networks: A survey Rahim Masoudi, Ali Ghaffari

www.elsevier.com/locate/jnca

PII: DOI: Reference:

S1084-8045(16)30029-7 http://dx.doi.org/10.1016/j.jnca.2016.03.016 YJNCA1606

To appear in: Journal of Network and Computer Applications

Received date: 2 December 2015 Revised date: 14 February 2016 Accepted date: 22 March 2016

Cite this article as: Rahim Masoudi and Ali Ghaffari, Software defined networks: A survey, Journal of Network and Computer Applications, http://dx.doi.org/10.1016/j.jnca.2016.03.016

This is a PDF file of an unedited manuscript that has been accepted for publication. As a service to our customers we are providing this early version of the manuscript. The manuscript will undergo copyediting, typesetting, and review of the resulting galley proof before it is published in its final citable form. Please note that during the production process errors may be discovered which could affect the content, and all legal disclaimers that apply to the journal pertain.

Software Defined Networks: A survey
Rahim Masoudi, Ali Ghaffari
Department of Computer Engineering, Tabriz branch, Islamic Azad University, Tabriz, Iran
E_mail: stu.rmasoudi@iaut.ac.ir
E_mail: A.Ghaffari@iaut.ac.ir
Abstract
As a result of the development of internet and ICT (information-centric technology) advances including mobile, cloud, social networking, big data, multimedia and the tendency towards digital society, the management and configuration of them have become highly complex, challenging and time consuming. Also, access to high bandwidth, extendibility and dynamic management are of critical significance, especially when network devices are vertically integrated. Hence, a set of unique predefined line commands and operating systems or firmware should be used. SDN (software-defined networking) is a structure designed for simplifying and improving network management with high flexibility by splitting control plane and data plane. Thus, network programmability is enhanced which in turn leads to more innovation opportunities. Although SDN is regarded as a new research issue, it has attracted numerous researchers’ attention from both industrial and academic institutes. In this paper, data plane, control plane and application plane as the three planes of SDN and the interfaces between them such as OpenFlow are investigated and the challenges and the latest technologies in relation to SDN are examined. The investigation and overview of SDN reported in this paper might be used by the interested future researchers to better understand and apply SDN in real-life applications.
Keywords: SDN (software-defined network), OpenFlow, network virtualization, network security, QoS (quality of service), control plane, data plane, programmable networks.
1. Introduction
As a result of the development of internet and ICT (information-centric technology) advances including mobile, cloud, social networking, big data, multimedia and the tendency towards digital society, the management and configuration of them have become highly complex, challenging and time consuming. Also, access to high bandwidth, extendibility and dynamic management are of critical significance, especially when network devices are vertically integrated. Hence, a set of unique predefined line commands and operating systems or firmware should be used. SDN (software-defined networking) is a structure designed for simplifying and improving network management with high flexibility by splitting control plane and data plane. Thus, network programmability is enhanced which in turn leads to more innovation opportunities. Although SDN is regarded as a new research issue, it has attracted numerous researchers’ attention from both industrial and academic institutes. In this paper, data plane, control plane and application plane as the three planes of SDN and the interfaces between them such as OpenFlow are investigated and the challenges and the latest

technologies in relation to SDN are examined. The investigation and overview of SDN reported in this paper might be used by the interested future researchers to better understand and apply SDN in real-life applications.
Internet structure and computer networks usually consist of different network devices such as router, switch and different types of middle-boxes which are vertically-integrated and designed by chips and ASIC (application-specific integrated circuits) with high throughput and a specific function. For managing and configuring such network devices, a set of specific and predefined line commands based on embedded operating system is used. Hence, it can be argued that managing a large number of network devices is a big challenge which is prone to many errors. Thus, traditional networks are hardware-centric which suffer from significant shortcomings regarding research and innovations, reliability, extensibility, flexibility and flexibility and manageability. Since internet and mobile networks develop and new technologies such as cloud, social networking and virtualization emerge, the need for networks with higher bandwidth, higher accessibility and dynamic management is becoming a critical issue.
For solving the problems and limitations of traditional networks, a structure, known as SDN, was proposed where network control is split from the forwarding mechanism and it can be programmed and controlled directly. SDN uses a controller which is logically centralized and has a global view towards the network and several simple packet forwarding devices (SDN switches) are controlled and configured through interfaces such as ForCES and Open-Flow. SDN switches are made up of one or more forwarding tables which are controlled by the centralized controller. In other words, they are controlled and programmed in the control plane. Using this mechanism, software developers can easily control network resources. Also, packets are handled by forwarding tables. That is, with respect to the policies accomplished by the centralized controller on forwarding tables, SDN switches can operate in the same way as router, switch, NAT, firewall, etc. Splitting control plane and data plane simplifies the management of modern networks and provides the opportunity for more innovations. As a result, researchers can test and investigate their own ideas and evaluate the results. Since SDN plays significant roles in modern internet structure and ICT technology, it has attracted researchers’ attention.
SDN structure consists of three main parts. At the lowest level, it includes data plane. At the highest level, it has the application plane and the control plane is between them. The communication between controllers and data plane is maintained via SBI (southbound interface) which is located in SDN switches and the communication between applications and controllers is maintained by NBI (northbound interface) which is located in the control plane (figure 1). Using the split between control and data planes, applications follow their own particular purpose such as security method, QoS, traffic engineering and solutions for network measurement and monitoring. Furthermore, controller helps applications to reach their purpose by controlling SDN switches through forwarding tables. In other words, network adjusts itself to users’ needs and, using controller and API (application program interface), network managers can easily control the network automatically by adding new features to the control plane without making changes in the data plane.
In this paper, using a comprehensive knowledge and understanding of the key concepts of SDN, the researchers focused on the latest investigations and findings on data, control and application planes and tried to address the hottest and most challenging issues in this domain. Nevertheless, many previous studies focused on only one plane. One of the objectives of this study was to provide an overview on SDN so that research gaps can be highlighted and examined in the future studies. The

remaining sections of this paper are organized in the following way. In section two, the related works are briefly reviewed. Then, in sections three, four and five, different classifications of SDN, i.e. application plane, control plane and data plane are discussed, respectively and the related technologies are shortly described. In section six, the challenges and future works on SDN are given and described. Finally, in section seven, the conclusion to the study is given.

Software

Application(closed)
(Telnet, HTTP, … )
Control Plane(closed) (Network map, Flow control, …)
Data Plane Operating System

CPU

Memory

Data Plane (Forwarding, Routing, Frame processing …)

ASIC

ASIC

ASIC

Data Plane

Control Plane

Network Apps
Programmable Open APIs Northbound Interface
Controller
E.g., OpenFlow Southbound Interface
Switches

APP Plane

NetwoPrhkysiAcapl Spwliitcchaetsion
Programming Languages
Language-based Virtualization

BusinePshyssiAcapl Spwliitcchaetsion

Cloud Orchestration

Northbound API Network OS
Network Hypervisor

Management API

Control API

HardwPhaysriecalSSwwiticthcehs es

SoftwPhayrseicaSl Swwiittcchehses

Hardware

Traditional device

SDN architecture

Figure 1: Component of traditional device and SDN structure

2. Related works

In this section, we present an overview of early SDN-related survey efforts. In(1), the authors provided an overview of history of programmable networks from early ideas until recent developments, also they described in detail the SDN paradigm and architecture and the OpenFlow(2) standard that laid the foundation for many of the ideas we are seeing today. And current SDN implementations and testing platforms, applications and examined network services that have been developed based on the SDN paradigm were presented. A comprehensive survey of the important topics in SDN/OpenFlow implementation, including the basic concept, applications, language abstraction, controller, virtualization, quality of service, security issues, and its integration with wireless and optical networks in (3) were surveyed. In(4), the definition of SDN and highlighted benefits of SDN in offering enhanced configuration, improved performance, and encouraged innovation were presented. Moreover, a literature survey of recent SDN researches in the infrastructure layer, the control layer, the application layer and OpenFlow were provided. (5)try to review SDN-related technologies and cover three main parts of SDN: applications, the control plane, and the data plane. The authors argue that data plane programmability needs to be considered in the SDN definition. They provide data plane technologies and discuss several future directions to realize data plane programmability. And they believe that current southbound APIs are not flexible and are mostly translated as OpenFlow. If we can define a better southbound API, then we can add interesting operation and management features and facilities to the data plane. The authors in (6) presented the

state of-the-art in network programmability, highlighting the key technologies on both data plane and control plane programmability. They categorize a broad set of technologies, ranging from softwaredefined networks, virtualization, software-defined radios as well as full software data plane implementations, showing that they are complementary tools that can be used to build programmable networks. Traffic engineering (TE) is an important mechanism to optimize the performance of a data network by dynamically analyzing, predicting, and regulating the behavior of the transmitted data. The authors in(7) provide an overview of traffic engineering mechanisms in SDN architectures. They study the traditional traffic engineering technologies from early ideas in ATM networking through current developments in IP and MPLS networking. Also, availability, scalability, reliability, and consistency in data networking with SDN, the traffic management with regard to load balancing, fault tolerance, consistent network update methods, as well as traffic analysis for testing and debugging network systems and network monitoring tools were investigated.
In (8), the authors report on early deployments of SDN on university campuses. The deployments, combined with the applications and experimentation, played an important role in demonstrating the SDN potential, and gain the community’s mindshare. They also demonstrated the key value proposition of SDN; proved that the physical infrastructure can support multiple concurrent virtual networks for research and production use; revealed a number of performance tradeoffs; provided valuable input to the OpenFlow specification process; and helped vendors and help grow the larger ecosystem.
Recent and state-of-the-art projects in SDN were surveyed in (9) and have been classified key challenges and opportunities along a number of different areas including architectural models, programmability, convergence, wireless and mobility, cloud platforms, and security. It shows that the networking community is heavily involved in SDN research, however, most of the investigations continue to focus on topics such as control plane/data plane, distributed vs. centralized control plane, scalability of solutions, Hybrid solutions, call graph, networking models etc. So, while these research efforts are important, they need to occur in the context of overall network programmability and scalability goals.
Wireless networking has been one of the most important and rapidly growing revolutions in recent years, changing everyone’s lives and giving people access to the Internet anywhere and anytime. The state of the art of SDN in the context of wireless networks and published research literature on the application of SDN ideas in wireless networks in (10) were surveyed. It begins with a brief overview of the history of SDN and what the term entails. It also presents an overview of the major design trends and highlight key differences between them. The SDN concept of centralized control was extended to wireless distributed networks (WDNs). In (11) a new SDN architecture for WDNs was presented, which eliminates the need for multi-hop flooding of route information and therefore enables WDNs to easily expand. The key idea is to split network control and data forwarding by using two separate frequency bands. The forwarding nodes and the SDN controller exchange link-state information and other network control signaling in one of the bands, while actual data forwarding takes place in the other band.
Existing commercial wireless networks are inherently hardware-based and rely on closed and inflexible architectural designs. SoftAir (12) as a new paradigm towards next-generation (5G) wireless networks was proposed. SoftAir is high flexible architecture, which can accelerate the innovations for both hardware forwarding infrastructure and software networking algorithms through control and data plane separation, enable the efficient and adaptive sharing of network resources

through network virtualization, achieve maximum spectrum efficiency through cloud based collaborative baseband processing, encourage the convergence of heterogeneous networks through open and technology independent interfaces, and enhance energy efficiency through the dynamic scaling of computing capacity of the software-defined base stations (SD-BSs). Moreover, SDN concept can be applied to wireless mesh network that has been widely adopted by various applications. A novel architecture of software-defined wireless mesh networks (SD-WMNs) (13) providing Internet services was proposed. Since wireless spectrum is a scarce resource that is shared by both data and control traffic in SD-WMNs, three novel spectrum allocation and scheduling algorithms, namely FB-NS(fixed-bands non-sharing algorithm), NFB-NS(non-fixed-bands nonsharing algorithm), and NFB-S(non-fixed-bands sharing algorithm) that orchestrate both control and data traffic was proposed.
Different from the concept of decoupling the control and data planes in SDN, network functions virtualization (NFV) aims to introduce and deploy new network functions to provide flexible management using server virtualization techniques without specialized hardware in an open and standardized information technology (IT) environment. So, both SDN and NFV are effective approaches to mitigate the challenges of legacy networks. (14) reviews the concepts of SDN and WNV, and then design a SDN based approach to realize WNV, called software-defined virtual wireless network (SDVWN).
The SDN architecture can be exploited to enhance network security with the provision of a highly reactive security monitoring, analysis and response system. The logical centralization of network intelligence presents exciting challenges and opportunities to enhance security in such networks, including new ways to prevent, detect and react to threats, as well as innovative security services and applications that are built upon SDN capabilities. (15, 16)present a comprehensive survey of recent works that apply SDN to security, and identify promising future directions that can be addressed by such research. The authors in (16) have classified their work in two main streams threat detection, remediation and network correctness (which simplify and enhance security of programmable networks), and security as a service (which offers new innovative security functionality to users, such as anonymity and specialized network management).
3. Data plane
Review related-SDN works from the beginning of SDN research, focuses are more on the development and programmability of the control plane. So we need data plane focused research in addition to control plane for SDN. In this section, we review data plane related contributions in SDN to indicate there is a gap that need to be considered from the community. Next, were presented some existing technologies that can be used to realize a software-centric SDN data plane compared with the current hardware-centric proposals; and finally interfaces between data plane and control plane.
Packet forwarding is one of the basic and primary functions of the data plane. In addition, data plane programmability enables various functions such as network appliances (e.g., for deep packet inspection), in-network processing (e.g., cache and transcoding). Furthermore, networking tasks such as anomaly detection and traffic engineering depend on either customized hardware or special protocols like IP. So, data plane programmability may be able to satisfy those requirements: First, supporting a new protocol needs a change in the data plane and second, flexibility in adapting to new protocols and architectures rely on an open infrastructure.

3.1. Packet forwarding infrastructure
Similarly to a traditional network, a SDN infrastructure is composed of a set of networking equipment (switches, routers and middle-box appliances). In SDN, forwarding elements are simple without embedded control or software to take autonomous decisions. Network intelligence and state are logically centralized, and the underlying network infrastructure (switches, vSwitches, routers, etc.) is abstracted from the applications. OpenFlow provides an open standards interface to vendor network devices. The network devices can be programmed by the SDN controller using the OpenFlow protocol. There are two main elements in SDN/OpenFlow architecture, the controllers and the forwarding devices, as shown in figure 2. A packet is forwarded by the switches based on the entries in the flow table. The flow entries of flow tables can be updated, deleted, and added by Controller with using OpenFlow messages. OpenFlow switches possess a much simpler flow table than ordinary switches. The flow table in the OpenFlow switch consists of many flow entries, each of which includes six parts (figure 2). The Match fields is used to match against packets, which consists of ingress port and packet headers; the Priority is adopted for matching the precedence of the flow entry; the Counters is used to update for matching packets; the Instructions is used to modify the action set or pipeline processing; the Timeouts sets the maximum amount of time or idle time before flow is expired by the switch; and the Cookie is the opaque data value chosen by the controller, which can be used by the controller to filter flow statistics, flow modification, and flow deletion. The Match field supports 12 header fields.

Network Apps
SDN Controller
Networking Operating System
Control Communication
Control Communication
SDN Device
Flow Tables
3.2. OpenFlow switch

Match

Action

Counters

Timeouts

Priority

Cookie

Opaque data value chosen by the controller

Matching precedence of the flow entry

Maximum amount of time or idle time before flow is expired by the switch

Packet +Byte counters

1. Forward packet to port(s) 2. Encapsulate and forward to controller 4. Send to normal processing pipeline 3. Drop the packet 4. Enqueue the packet 5. Modify packet fields

In Port

Src MAC

Dst MAC

Eth Type

VLAN ID

IP Tos

IP Proto

IP Src

IP Dst

+ mask what fields to match

TCP Src Port TCP Des Port MPLS Lable

Figure 2: OpenFlow-enabled SDN devices

An OpenFlow switch is a software program or hardware device that forwards packets in a softwaredefined networking (SDN) environment. An OpenFlow switch consists of at least three main parts: i) flow table: is used to lookup packet and also do forwarding ii) secure channel: is usually a TLS or SSL channel between switch and controller iii) OpenFlow protocol: is for communicating with the switches and managing them. OpenFlow switches are either based on the OpenFlow protocol or compatible with it (figure 3).

Controller

Controller

OpenFlow Protocol

OpenFlow Protocol

Hardware Software Hardware Software

Control Plane

OpenFlow Switch Agent

OpenFlow Switch Agent

Data Plane(HWs, Flow Tables)

Data Plane(HWs, Flow Tables)

Compatible With OpenFlow-Switch

OpenFlow-Switch

3.2.1 Software switches

Figure 3: OpenFlow switch

Open source software switch aims to implement a switch platform in virtualized server environments. It supports standard management interfaces and enables programmatic extension and control of the forwarding functions. There are currently several SDN software switches available that can be used, for example, to run a SDN testbed or when developing services over SDN. Table 1 summarizes a list of current software switch implementations with a brief description including implementation language and the OpenFlow standard version that the current implementation supports.

Table 1: OpenFlow-related software projects switches

Product contrail-router (17)

Maker/ Developer Type

Juniper Networks

vrouter

Description The Contrail Virtual Router implements the data-plane functionality that allows a virtual interface to be associated with a VRF.

Version 1.0

LINC (18)

LINC is a pure OpenFlow software switch which is implemented in

FlowForwarding

switch

1.4

operating system's user space as an Erlang node.

ofsoftswitch13 (19) Open vSwitch (20)

Ericsson , CPqD Open Community

switch switch

Ofsoftswitch13 is an OpenFlow 1.3 compatible user-space software switch

implementation.

1.3

Open vSwitch is a network switch specifically built for virtual environments.

1.0-1.3

OpenFlow Reference (21) Stanford

OpenFlowClick (22)

Yogesh Mundada

OpenFlowJ (23)

Stanford

switch OpenFlow Switching capability to a Linux PC with multiple NICs.
vrouter OpenFlow switching element for Click software routers.
Source code implementation of OpenFlow protocol. Both Beacon and FlowVisor incorporate this code.

1.0 1.0 1.0-1.3

OpenFaucet (24)

Midokura

Source code implementation of OpenFlow protocol 1.0, used in both 1.0
controllers and switches.

Pantou/OpenWRT (25)

Stanford

switch Turns a wireless router into an OF-enabled switch.

1.0

Switch Light (26)

Big Switch

switch Thin switching software platform for physical/virtual switches.

1.0

XorPlus (27)

Pica8

switch Switching software for high performance ASICs.

1.0

3.2.2 Hardware switches
The OpenFlow standard is one of the main SDN enabling technologies currently being implemented in commodity hardware networking. Table 2 gives a brief list of commercial switches that are currently available in the market, status about OpenFlow version and their Maker.
Table 2: OpenFlow-compatible commercial switches

Product
8200zl and 5400zl (28) Arista 7150 Series (29) BlackDiamond X8 (30) CX600 Series (31) EX9200 Ethernet (32) EZchip NP-4 (33) MLX Series (34) NoviSwitch1248 (35) NetFPGA (36) RackSwitch G8264 PF5240 and PF5820 (36) Pica83920 (37) Plexxi Switch 1 (38) V330 Series (39) Z-Series (40)

Maker/ Developer
Hewlett-Packard Arista Networks Extreme Networks Huawei Juniper EZchip Technologies Brocade NoviFlow NetFPGA IBM NEC Pica8 Plexxi Centec Networks Cyan

Type
chassis switch switch router chassis chip router switch card switch switch switch switch switch switch

Description
Data center class chassis (switch modules). Data centers hybrid Ethernet/OpenFlow switches. Cloud-scale hybrid Ethernet/OpenFlow switches. Carrier class MAN routers. Chassis based switches for cloud data centers. High performance 100-Gigabit network processors. Service providers and enterprise class routers. High performance OpenFlow switch. 1G and 10G OpenFlow implementations. Data center switches supporting Virtual Fabric and OpenFlow. Enterprise class hybrid Ethernet/OpenFlow switches. Hybrid Ethernet/OpenFlow switches. Optical multiplexing inter connect for data centers. Hybrid Ethernet/OpenFlow switches. Family of packet-optical transport platforms

Version
1.0 1.0 1.0 1.0 1.0 v1.1 1.0 1.3 1.0 1.0 1.0 1.0 1.0 1.0 1.0

3.3. Data plane technologies
In this section we review current efforts towards developing the SDN data plane which are mostly OpenFlow-centric and software-centric SDN data plane
3.3.1 OpenFlow-centric SDN data plane
There are a few researches that show two limitations in current switching chips and the OpenFlow protocol: i) current hardware switches are quite rigid, allowing “Match-Action” processing on only a fixed set of fields ii) The OpenFlow specification only defines a limited repertoire of packet processing actions. In (41) the authors propose the RMT (reconfigurable match tables) model, a new RISC-inspired pipelined architecture for switching chips, which allows the forwarding plane to be changed in the field without modifying hardware. Also, RMT allows the programmer to modify all header fields much more comprehensively than in OpenFlow. The authors in (42) argue the way forward requires carefully extending SDN to control the fast-path scheduling and queueing behavior of a switch. They propose adding a commodity/programmable hardware such as FPGA (field

programmable gate arrays) to the data plane to enable SDN programmability extended. In (43), the authors focus on the data path and analyze the OpenFlow implementation in Linux based PCs. They compare OpenFlow switching, layer-2 Ethernet switching and layer-3 IP routing performance. Forwarding throughput and packet latency in under-loaded and over-loaded conditions are analyzed, with different traffic patterns. System scalability is analyzed using different forwarding table size, and fairness in resource distribution is measured.
A complementary design approach to OpenFlow's conventional designs was proposed in (44), which used network processor based acceleration cards to perform OpenFlow switching. It shows a 20% reduction on packet delay and the comparable packet forwarding throughput compared to conventional designs. The authors in (45), show how end-hosts can coordinate with the network to implement a wide-range of network tasks, by embedding tiny programs into packets that execute directly in the data plane. The key contribution is a programmatic interface between end-hosts and the switch ASICs that does not sacrifice raw performance. This interface allows network tasks to be refactored into two components: i) a simple program that executes on the ASIC; ii) an expressive task distributed across end-hosts. The authors in (46) propose an architectural design to improve lookup performance of OpenFlow switching in Linux using a standard commodity network interface card based on the Intel 82599 Gigabit Ethernet controller. It shows packet switching throughput increasing up to 25 percent compared to the throughput of regular software-based OpenFlow switching. In (47), the authors presented research directions that can significantly reduce TCAM (ternary-contentaddressable memory) and control plane requirements via classifier sharing and reuse of existing infrastructure elements. They show how to generalize virtual pipeline architecture to distribute workload which, OpenFlow can be extended to distribute processing.
3.3.2 Software-centric SDN data plane
The most basic and fundamental requirement for a software-centric data plane, is Software based packet switching and forwarding. In this section, we review many proposals for software forwarding plane that focus on the performance aspects of the research using different underlying commodity hardware such as CPU, GPU, NPU (network processing unit), and FPGA. In (48), the authors propose a software router architecture that parallelizes router functionality both across multiple servers and across multiple cores within a single server. By exploiting parallelism, a 35Gbps parallel router prototype was demonstrated; its capacity can be linearly scaled through the use of additional servers. PacketShader (49) is a high-performance software router framework for high performance network packet processing with graphics processing unit (GPU) acceleration. It minimizes per-packet processing overhead in network stack and performs packet processing in the user space without serious performance penalty. So, a well-designed PC-based router can achieve 40 Gbps forwarding performance with full programmability even on today’s commodity hardware. FLARE switch (50) is a programmable switch using Click environment and multicore CPUs. It has a couple of SFP+ ports and provides a Linux and Click environment for network research. It uses many core NPUs to run the packet forwarding and processing routines in concurrent manner. In (51), the authors present an FPGA-based architecture to support 100 Gbps packet classification, which based on HyperSplit, a memory-efficient tree search algorithm. This approach uses significantly less FPGA resources; Compared to state-of-the-art FPGA based solutions and can support over 50K rules with a single FPGA chip. Also, Compared to multi-core based solutions, this approach has at least a 10x speedup. L7Classifier (52) is a packet classification method based on the packet payload (i.e., application layer) compared with traditional methods that use L2- L4 header information. It stores TCP flow information and performs regular expression matching to packet payload.

Most routers or switches have closed, static, and inflexible designs. Network administrators cannot easily implement new functions, specify or even identify the interactions of different functions, but they may be able to turn router functions on or off. Extensions require access to software interfaces in the router’s forwarding path, but these often don’t exist, don’t exist at the right point, or aren’t published. Click (53) is a new software architecture for building flexible and configurable routers. It is assembled from packet processing modules called elements. Individual elements implement simple router functions like packet classification, queueing, scheduling, and interfacing with network devices. The authors in (54) presented ClickOS to making the data plane more programmable. ClickOS is a tiny network operating system based on Xen and the Click modular router system which can run a wide range of middle-boxes. So, it can be used add and remove features very fast and dynamic. vNode (55) is a Click-like programming environment to the user in order to enable implementing new features and requirements easier and faster with network virtualization technology.
Current SDN/OpenFlow data plane does not allow statefull processing of packets within the switch box. OpenState (56) proposes a first step in the direction of supporting statefull per flow processing over closed platforms. It offers a viable abstraction based on extended finite state machines as an extension (super-set) of the OpenFlow match/action abstraction. SP4(57) is a software-based programmable packet processing platform that supports statefull packet processing useful for analyzing traffic flows with session semantics. It are used for performing high-throughput analysis of traffic traces for a variety of applications, such as filtering out unwanted traffic and detection of DDoS attacks using machine learning based analysis. In the similar way, the authors in (58), extend the programmability and flexibility of SDN to the data plane to allow network owners to add their custom network functions while keeping the programmability of existing SDN. As an example, NetOpen switch node (59) supports customized in-network processing and verify its programmability and innetwork processing performance for multiple flows (also (60),(61) and (62)).
There are several security threats to OpenFlow, which introduced in (63); and some data plane and control plane mechanisms can provide security for end-points and users. FRESCO (64), is an OpenFlow security application development framework designed to facilitate the rapid design, and modular composition of OpenFlow-enabled detection and mitigation modules. It introduces minimal overhead and enables rapid creation of popular security functions with significantly (over 90%) fewer lines of code. FRESCO offers a powerful new structure for prototyping and delivering innovative security applications into the rapidly evolving world of SDNs. In (65) the authors offer highperformance SSL(secure sockets layer) acceleration using commodity processors. They show that modern GPUs can be easily converted to general-purpose SSL accelerators. By exploiting the massive computing parallelism of GPUs, SSL cryptographic operations beyond what state-of-the-art CPUs provide was accelerated.
3.4. Southbound interface
Southbound interfaces are the APIs that enables communications between the control plane and the data plane. OpenFlow protocol is the most well-known interface between forwarders and controllers in SDN. OpenFlow is an SDN technology proposed to standardize the way and defines an API for the communication between the controller and the switches (figure 4). It provides a specification to migrate the control logic from a switch into the controller. Therefore, both the controller and the switches should understand the OpenFlow protocol. OpenFlow-based architectures have specific capabilities that can be exploited by researchers to experiment with new ideas and test novel applications. These capabilities include software-based traffic analysis, centralized control, dynamic

updating of forwarding rules and flow abstraction. OpenFlow-based applications have been proposed to ease the configuration of a network, to simplify network management and to add security features, to virtualize networks and data centers and to deploy mobile systems. The authors in (66) presented a survey on OpenFlow related technologies that have been offered as a means for researchers, network service creators, and others to easily design, test, and deploy their innovative ideas in experimental or production networks to accelerate research activities on network technologies.

Network Apps
SDN Controller
Networking Operating System
OpenFlow controller

OpenFlow APP

OpenFlow Library

Language Bindings Pythone, Ruby

OpenFlow Protocol Stack

OpenFlow Protocol (Via secure channel)

Input Port

OpenFlow-Switch

OpenFlow Protocol Stack
OpenFlow Switch Agent
Packet Processing Data Structures
Packet Processing Pipeline

Kernel

User

Output Port

Figure 4: OpenFlow architectural components
OpenFlow protocol has different versions and features of each version are as follows.
 Version 0.2.0: released in March 2008 as a draft.  Version 1.0: specification is the first version which has official vendor support (67). It
supports a single flow table with flow entries consist of three components: Header Fields, Counters and Actions.

 OpenFlow 1.1: was released on February 28, 2011, which introduced multiple tables pipeline processing (68).
 Version 1.2: In December 2011, the ONF board approved OpenFlow version 1.2 and published it in February 2012, which added support for IPv6 (69). With OpenFlow 1.2 the switches can connect to multiple controllers concurrently. This allows for a better failure recovery and also loads balancing between controllers.
 Version 1.3: It provides more support for protocols such as MPLS BoS bit and IPv6 extension headers. It also includes a better expression of switch capabilities (i.e., refactor capabilities negotiation) and improves metering facilities (e.g., per flow metering) (70).
 Version 1.4: It improves the OpenFlow extensible match introduced in v1.2 that gives more flexible classification capabilities to the user to match packet header fields and classify flows (71).
 Version 1.5: The next version of the main branch, version 1.5, is being worked on and planned for late 2014 (72).The set of features in 1.5 is not finalized; some of the features may not survive the specification process. Some example features planned for 1.5 are delegation of learning, egress table, flexible statistics, matching on TCP flags, a copy-field action and support for optical switches.
OpenFlow is not the only available southbound interface for SDN; there are also other southbound interfaces such as Open vSwitch database management protocol (OVSDB) (73), forwarding and control element separation (ForCES) (74), protocol oblivious forwarding ( POF) (75), OpFlex control protocol (76), OpenFlow Config (OF-Config) (77), OpenState (56), revised OpenFlow library (ROFL) (78), hardware abstraction layer (HAL) (79) and Programmable Abstraction of Data path (PAD) (80).
4. Control plane
The control plane in SDN is called a controller; it acts as an intermediary layer between applications by northbound Interface (NBI) and the data plane by southbound interface (SBI). A controller plays a main role like a brain and provides an abstract and centralized view of the overall network. Each control plane is built from two components; applications and network operating system (NOS). The application part is in many of software programs from metering to monitoring which network virtualization is one of them and NOS acts as a SDN controller. So, in the control plane, it is significant to design interfaces and the controller itself in an effective way. Network could have more than one controller, so each controller is responsible to control a group of network switches, which may interfere with each other, thus one Controller is chosen to be the main controller and the others would be backups. In this section, we review existing efforts, particularly OpenFlow-related research, to realize and improve various aspects of the control plane; because OpenFlow is prominently successful, whereas other approaches (e.g. ForCES) are not as successful in practice.
4.1. Northbound interfaces
Interfaces between SDN Applications and Controllers are SDN northbound interfaces and typically provide abstract network views and enable direct expression of network behavior and requirements. NBI presents a programmable application programming interface (API) to network control and management applications. The NBIs and SBIs are two key abstractions layer of the SDN system. All controller solutions today have proprietary APIs for application interfaces. That is, no standard northbound interface exists in reality, although some are attempting to work on this problem such as

the Open Daylight Project. But, the southbound interface has already a widely accepted proposal (OpenFlow and ForCES). One value of SDN lies in the expectation that these interfaces are implemented in in an open, vendor-neutral and interoperable way. In architectural overview, the northbound interface is normally drawn at the top of the component it is defined in, hence the name northbound interface. JSON(81) or Thrift (82) is examples of a northbound interface.
4.2. Controller designs
In OpenFlow, several switches were managed by a physically or logically centralized controller. So, the controller design is the most important component in the SDN architecture and importantly affects the overall performance of the network. Due to this, there are many researches on enhancing the controller design to improve the performance of various aspects such as State consistency, scalability, flexibility, security, availability, Latency and placement.
4.2.1 State consistency
OpenFlow controllers and SDN-switches need to hold the same forwarding policy for stable forwarding. FlowAdapter (83) is an innovative middle layer which converts flow entry polices from the controller flow table pipeline to switch hardware flow table pipeline, so that the same polices can be fitted into different types of hardware. The authors in (84), proposed a similar technique which offers a set of principles for policy transformation to enable rewriting of polices between multiple switches while preserving the forwarding policy. Palette distribution framework (85) decomposes large SDN tables into small ones and then distributes them across the network while preserving the overall SDN policy semantics. It is especially important as switch table sizes can become a bottleneck in scaling SDNs. Moreover, it facilitates handling the heterogeneity of switches in the network and the changes of equipment. HOTSWAP (86) is a system for upgrading SDN controllers in a disruptionfree and correct manner. It is a hypervisor (sitting between the switches and the controller) that maintains a history of network events. In (87) the authors proposed efficient rule-placement algorithms that distribute forwarding policies across general SDN networks while managing rulespace constraints, and show how to support dynamic, incremental update of policies. ONOS (88) maintains consistency across the distributed state by providing a network topology database to the controller. The idea of a network information base is also proposed in (89) so as to satisfy the state consistency and durability requirements. HyperFlow (90) is a distributed event-based control plane for OpenFlow and it is logically centralized but physically distributed. HyperFlow provides scalability while keeping the benefits of network control centralization. By passively synchronizing networkwide views of OpenFlow controllers, HyperFlow localizes decision making to individual controllers, thus minimizing the control plane response time to data plane requests. To realize consistent packet processing (91), the controller uses transactional semantics. The trade-off between update time and rule-space overhead (92) and the trade-off between maintaining consistency during configuration updates and the update performance (93) are also studied.
4.2.2 Scalability
With the increasing popularity of SDN, designing a scalable SDN control plane becomes a critical problem. An effective technique to enhance the scalability is to design distributed architecture of SDN control plane. The scalability issue in specific areas is studied which try to improve the scalability, particularly by reducing the overhead of the centralized controller in several aspects. DevoFlow (94) is a modification of the OpenFlow model which can simplify the design of high-performance

OpenFlow switches and enable scalable management architectures. It reduces the number of interactions between the controllers and switches by handling mice flows (i.e. short flows) at the OpenFlow switch and elephant flows (i.e. larger flows) at the controller. Similarly, DIFANE (95) is a scalable and efficient solution which attempts to reduce the number of requests to the controller by proactively pushing the flow entries to switches. It partitions rules over the switches, and keeps all traffic in the data plane by selectively directing packets through intermediate switches. Kandoo (96) is a highly configurable and scalable control plane, which uses two layers of controllers to limit the overhead of frequent events on the control plane for creating a distributed control plane. Most of the frequent events using the state of a single switch are handled by the controllers at the bottom layer and the events that cannot be handled by the controllers at the bottom layer, are handles by a logically centralized controller of the top layer. The authors in (97) proposed a hybrid control model for flowbased SDN that combines both central control and distributed control, in order to provide a more relaxed and scalable control. They try to reduce the overhead of the central controller by defining new features such as the proactive flows to be activated under certain conditions. AutoSlice (98) is a distributed hypervisor architecture that can handle a large number of flow table control messages from multiple tenants to support scalable SDN slicing. It enables the maker with the ability to redesign the SDN for different applications while minimizing operator intervention. SDN is a natural platform for network virtualization, but supporting numerous tenants with different topologies and controller applications raises scalability challenges. To handle this problem, the authors in (99) proposed the FlowN architecture which aims to offer a scalable solution for network virtualization by providing an efficient mapping between virtual and physical networks and by leveraging scalable database systems. To fully utilize the replicated servers in online services, depend on load balancing. The authors in (100) argue that the controller should exploit switch support for wildcard rules for a more scalable solution that directs large aggregates of client traffic to server replicas. They present several methods that compute wildcard rules that achieve a target distribution of the traffic, and automatically adapt to changes in load-balancing policies without disrupting existing connections. The authors in (101) deconstructed scalability concerns and discussed several scalability trade-offs in SDN design space. They argue that they are not unique to SDN.
4.2.3 Flexibility and modularity
The mapping between a switch and a controller (statically configured) is a key limitation of the distributed controllers, which may outcome in uneven load distribution among the controllers. There have been few recent attempts to address this issue. ElastiCon (100), is an elastic distributed controller architecture, which manages the controller pool that is dynamically expanded or reduced according to traffic conditions. The mechanism dynamically shifts the load traffic through controllers to gracefully handle it. SDN protocols, to support a global view, expose several counters for each flow-table rule. These counters must be maintained by an ASIC in data plane, but ASIC-based counters are inflexible. To realize far more flexible processing of counter-related information, the authors in (102) proposed software-defined counters that utilize general-purpose CPUs rather than ASIC-based counters. In a similar spirit, to overcome the limitations of the ASIC-based approach, the authors in (103) used a CPU as a traffic co-processor in the switches to handle not only the control plane but also data plane traffic. XSP (extensible session protocol)(104) is a framework for applications to interface with SDNs in a secure and dynamic manner, within a general and extensible protocol for managing the interaction between applications and network-based services, also between the devices. One of the major factors in managing complexity of any software system such as SDN is modularity. The work in (105) proposed new abstractions for building applications from multiple, independent modules that

jointly manage network traffic to ensure that rules installed to perform one task do not override other rules.
4.2.4 Availability
Tolerating and recovering from link and switch failures are basic requirements of most networks, such as SDN. So, the OpenFlow controller and switches should be powerful in various situations. The authors in (106), propose a runtime system that automates failure recovery and enables network developers to write simpler, failure-agnostic code by spawning a new controller instance that runs in an emulated environment. Then, it quickly replays inputs observed by the controller before the failure occurred. Finally, it recovers the network by installing the difference rule set between emulated and current forwarding states. The efficient solutions was presented in (107) which controller can install static rules on the switches to verify topology connectivity and locate link failures based on these rules. To discover link and node failures and trigger restoration actions, the centralized controller can use link-layer discovery protocol (LLDP) messages. This monitoring and recovery mechanism has serious scalability limitations because the controller has to be involved in the processing of all of the LLDP monitoring messages. To overcome this issue and fast recovery is needed to frequent issuing of monitoring messages, but this may place a significant load on the controller. In (108), the authors propose to implement a monitoring function on OpenFlow switches, which can emit monitoring messages without posing a processing load on the controller. RuleBricks (109) is a system for flexibly embedding high availability support in existing OpenFlow policies by presenting three key primitives: drop, insert, and reduce. In this work, the authors discuss how these primitives can express various flow assignments and backup policies demonstrating the one offered by the Chord protocol.
4.2.5 Security and dependability
The OpenFlow architecture involves third-party development efforts, and therefore suffers from potential trust issue on OpenFlow applications. The misuse of such trust could lead to various types of attacks impacting the entire OpenFlow network. To eliminate such threat, PermOF was proposed in (110) which allows a minimum privilege to the applications. PermOF is a fine-grained permission mechanism that incorporates a customized permission set and a thread-based isolation system. In the same way, FortNOX was proposed in (111), empowers OpenFlow security applications with the ability to produce enforceable flow constraints. It is a software extension that provides role-based authorization, rule reduction, conflict evaluation, policy synchronization, and security directive translation for the NOX OpenFlow controller. The authors in (112), show a new fingerprinting attack against SDN networks and further launch efficient resource consumption attacks. So, SDN brings new security issues that may not be ignored. A brief overview of the vulnerabilities present in the OpenFlow protocol as it is currently deployed by hardware and software vendors was provided in (63). The authors also and also highlight the classes of vulnerabilities that emerge from the separation of the control plane and data planes in OpenFlow network designs. Furthermore, the security and dependability of the SDN has largely been a neglected topic and remains an open issue. The authors in (113) present a broad overview of the security implications of each SDN layer/interface.
4.2.6 Placement and latency
The position of the controller in the SDN architectures may impact the performance, reliability and scalability of an SDN. The authors in (114), open the investigation by focusing on two specific questions: given a topology, how many controllers are needed, and where should they go? To answer

these questions, we examine fundamental limits to control plane propagation latency. They show that the answers rely on the topology and that one controller location is often sufficient to meet existing reaction-time requirements. Similarly, the impact of the latency between an OpenFlow switch and its controller was discussed in (115). In this work, the authors show bandwidth arbitrates how many flows the controller can process, as well as the loss rate if the system is under heavy load, while latency drives the overall behavior of the network. The issue of placing controllers in SDN to maximize the reliability of control networks was handled in (116).The authors in this work, present a metric to characterize the reliability of SDN control networks and developed several placement algorithms.

4.3. Controller implementations
To date, different types of OpenFlow (compatible) controllers have been developed in the context of SDN which we will introduce in more detail in table 3. All the controllers were reviewed here support the OpenFlow protocol version 1.0, unless stated otherwise.

Table 3: Current controller implementations

Controller Implementation

Developer

NOX (117)

C++/Python Nicira

POX (118)

Python

Nicira

SNAC (119)

C++

Nicira

Maestro (120)

Java

Rice University

Ryu (121)

Python

NTT

MUL (122)

C

Beacon (123)

Java

Kucloud Stanford University

Floodlight (23) Java

BigSwitch

IRIS (124)

Java

ETRI

OESS (125)

Perl

Jaxon (126)

Java

NodeFlow (127) JavaScript

ovs-controller C
(20)

NDDI independent developer independent developer
independent developer

Flowvisor (128) C

ON.LAB

Overview NOX is the first Open Flow controller. NOX Classic was written in C++ and Python and current NOX is written in C++. POX is a general, open-source SDN controller that supports OpenFlow controller. SNAC is an OpenFlow controller based on NOX-0.4. It supports a graphical user interface and a policy definition language and uses a web-based, user-friendly policy manager to manage the network, configure devices, and monitor events. Maestro tries to improve the system throughput by exploiting multicore processors and parallelism. it provides interfaces for implementing modular network control applications and for them to access and modify network state. Ryu is an SDN operating system that aims to provide logically centralized control and APIs to create new network management and control applications. It is a componentbased SDN framework that supports OpenFlow v1.0, v1.2, and v1.3. MUL is an OpenFlow controller that supports a multi-threaded infrastructure and a multi-level northbound interface. It supports OpenFlow v1.0 and v1.3. Beacon is a cross-platform and modular OpenFlow controller. It supports event-based and threaded operation. Floodlight supports a broad range of virtual and physical OpenFlow switches and can handle mixed OpenFlow and non-OpenFlow networks. It based on the Beacon implementation. IRIS is a recursive OpenFlow controller that aims to support scalability, high availability, and multi-domain support. OESS is a set of softwares to configure and control dynamic VLAN networks using OpenFlow-enabled switches. Jaxon is a NOX-dependent OpenFlow controller. NodeFlow is an OpenFlow controller written for Node.JS. ovs controller is a simple OpenFlow controller reference implementation with Open vSwitch for managing any number of remote switches through the OpenFlow protocol; as a result the switches function as L2 MAClearning switches or hubs (20) As a transparent proxy between OpenFlow switches and multiple OpenFlow controllers, Flowvisor allows multiple tenants to share the same physical

RouteFlow (129) C++

Helios (130)

C

CPQD NEC

infrastructure by dividing traffic flow space into slices. RouteFlow provides virtualized IP routing services over OpenFlow-enabled hardware. RouteFlow is composed by an OpenFlow controller, an independent RouteFlow server, and a virtual network environment. Helios is an extensible OpenFlow controller that provides a programmable shell for performing integrated experiments (not publicly available).

4.4. Development tools
SDN simplifies network evolution and innovation by allowing rapid deployment of new services and protocols. In this section, we review currently available tools and environments for developing various aspects of SDN.
4.4.1 Simulators and Frameworks
 Mininet (131): It is an emulator platform using OpenFlow protocol, runs a set of end-hosts, switches, routers and links on a single Linux kernel by using lightweight virtualization. Components of Mininet act as real network components to check the possible bandwidth, the connectivity among nodes and deepest nodes, and the speed of flows.
 Mininet-HiFi (132): Mininet-HiFi is an evolution of Mininet that enhances the containerbased (lightweight) virtualization with mechanisms to enforce performance isolation, resource provisioning, and accurate monitoring for performance fidelity. One of the main goals of Mininet-HiFi is to improve the reproducibility of networking research.
 Mininet CE (133) and SDN Cloud DC (134): They are extensions to Mininet for enabling large scale simulations.
 NS-3 (135): It supports OpenFlow switches within its environment, though the current version only implements OpenFlow v0.89.
 OMNeT++ (136, 137): The OMNeT++ has been created with the simulation of communication networks, multiprocessors and other distributed systems. It supports OpenFlow v1.2 through a plugin.
 EstiNet 8.0 (138): It supports many OpenFlow 1.3.2 and 1.0.0 switches. Besides this advantage, in the simulation mode of EstiNet; POX, NOX, Floodlight and Ryu controllers will have the role of SDN controller plane.
 Trema (139): Trema is a framework for developing OpenFlow controllers in Ruby and C.  Mirage (140): Mirage is an Exokernel for constructing network applications across a variety
of platforms and supports OpenFlow.
4.4.2 Debuggers
Programmable feature of SDN controller increases the probability of inadvertently errors; and generally, finding bugs is hard and time-consuming. So, debuggers are one of the important components of OpenFlow/SDN. Debuggers are tools that test and diagnose program and provide programmers interact with program while it is executing on computer.
 STS (141): SDN troubleshooting system is a simulator designed to allow developers to specify and apply a variety of test cases, while allowing them to interactively examine the state of the network.

 NICE (142): It presents efficient, systematic techniques for testing unmodified controller programs. NICE tool applies model checking to explore the state space of the entire system, the controller, the switches, and the hosts.
 Cbench (143): Cbench is a program which tests controller performance by generating requests for packet forwarding rules and watching for responses from the controller.
 OFLOPS (144): It is a software framework which tests the capabilities and performance of OpenFlow-enabled software and hardware switches.
 OFTest (145): OFTest is a Python-based framework that tests basic functionality of OpenFlow switches.
 OFRewind (146): OFRewind enables scalable, multi-granularity, temporally consistent recording and coordinated replay in a network, with finegrained, dynamic, centrally orchestrated control over both record and replay for troubleshooting problems in production networks.
 VeriFlow (147): It is a dynamic solution design and a layer between a SDN controller and network devices that analyzes and checks network configuration in real-time to find bugs without having negative impact on network performance.
 FlowChecker (148): FlowChecker is a property-based verifier solution to identify any intraswitch misconfiguration within a single Flow table. The main information for debugging is gathered from flow table, different traffic statistics and controller messages.
 HAS (header space analysis) (149): HAS is a general and protocol agnostic framework, that allows statically checking of network specifications and configurations to identify an important class of network failures.
 ATPG (automatic test packet generation)(150): ATPG is an automated and systematic approach for testing and debugging networks such as SDN. It generates a minimum set of test packets to (minimally) exercise every link in the network or (maximally) exercise every rule in the network to detect both functional (e.g., incorrect forwarding rules) and performance problems (e.g., a congested queue).
 ndb (151): ndb is a prototype network debugger inspired by gdb, which implements two primitives useful for debugging an SDN: breakpoints and packet backtraces.
There also have been several works to troubleshoot bugs in SDN control software and improving OpenFlow development. The authors in (152) propose the structure of the SDN software stack to automate the process of troubleshooting networks. They discuss two techniques for programmatically localizing the root cause of network problems: cross layer correspondence checking to find what problems exist in the network, and where in the control software the problem first developed; and simulation-based causal inference to identify when the triggering event(s) occurred.
4.4.3 Testbeds
Several testbeds have been built and deployed to allow multiple network experiments to be conducted concurrently in a production network. They support OpenFlow protocol.
 PlanetLab Europe (PLE) (153): It supports OpenFlow capabilities through a sliver-ovs (modified version of OpenVSwtich). Experimenters can to create an OpenFlow overlay network by specifying the links between PLE nodes.
 OpenFlow in Europe linking infrastructure and applications (OFELIA) (154): OFELIA is a testbed in which researchers can dynamically control and extend the network via OpenFlow.

OFELIA control framework (OCF) provides tools for user verification and access, allocation of the slice, configuration of the network.  Future internet testbed experimentation between brazil and Europe (FIBRE) (155): It aims to deploy and create a testbed based on OpenFlow which create common space between Brazil and Europe for future Internet architectures.  Internet2 (156): Internet2 supports advanced network services, such as IPv6 and QoS and have provided wide area testbeds for the network research community, including support for projects such as PlanetLab, and GENI.  Research infrastructure for large-scale network experiments (RISE) (157) : This is another project that aims at building a large-scale international OpenFlow testbed based on JGN-X network in Japan.  SURFnet (158) : SURFnet is an OpenFlow testbed and it can be used for all forms of SDNrelated work, such as gaining hands-on experience with OpenFlow switches and controllers, developing SDN prototypes and/or testing third-party SDN software.  California OpenFlow testbed network (COTN) (159): The OpenFlow-enabled COTN will aid researchers to the development of tomorrow’s Internet using today’s networks as a testbed for innovation. It connects with other OpenFlow testbed within the national research networks such as NLR and Internet2.  Emulab (160): It is a network testbed that does not support OpenFlow, but provides network topologies defined by the user, in a controllable, predictable, and repeatable environment. So tries to add functionality to support OpenFlow.  Global environment for network innovations (GENI) (161): GENI federated some platform such as PlanetLab, Internet 2, Emulab, etc. to support experimental research in networking by creating a huge testbed. It is supported by the National Science Foundation.  Open-access research testbed for next-generation wireless networks (ORBIT) (162): It is intended to be used to test and evaluate innovative protocols in real-world settings and it includes an OpenFlow-based network.
4.4.4 High level language
Some works were presented to assist SDN development by providing high-level abstractions; such as to translate application requirements into packet forwarding rules. So, this function dictates a communication protocol (e.g., a programming language) between the application plane and the control plane. SDN presents a simple, centralized programming mechanism for managing complex networks. However, there are some challenges in managing low-level details, such as installing and maintaining correct and efficient forwarding tables on distributed switches.
 Maple (163): Maple is a powerful mechanism that simplifies SDN programming by allowing a user to use a standard programming language to design an arbitrary, centralized algorithm, to decide the behaviors of an entire network for every packet entering. Additionally, to overcome the challenge of translating a high-level policy into sets of rules on distributed switches, it provides an abstraction that runs on every packet entering a network.
 Fault tolerating regular expressions (FatTire)(164): It is a new language for writing fault-tolerant network programs. FatTire is an example of a declarative language that based on regular expressions to allow users to v network paths with the degree of fault tolerance requirements.

 Flow-based management language (FML) (165): FML is a high level declarative policy language that specifies management and security policies for OpenFlow networks. It, uses NOX to calculate and deploy flow table entries on switches.
 Procera (166): It is a language that applies the principles of functional reactive programming to provide a declarative, expressive, and compositional framework that allows operators to express network policies based on both reactive and temporal behaviors, which are typically necessary to express common, simple network policies.
 Frenetic (167, 168): Frenetic language allows the programs written for one platform to work in other platforms. It eliminates complicated asynchronous and event-driven interactions between SDN applications and switching devices. Additionally, supports for designing a compiler, run-time environment, and modular programming constructs for SDN (165), also constructs for certain tasks such as updates (92).
4.4.5 Industry standardizations, work/research group and forums
For developing, standardizing, coordinating, and implementing SDN and related technologies such as NFV (Network Function Virtualization) and cloud computing have been several approaches.
 Open networking foundation (ONF) (169): ONF is the group that is most associated with the development and standardization of SDN. Particularly, they focus on standardizing the northbound and southbound interfaces.
 Internet engineering task force (IETF) (170): The mission of the IETF is to make the Internet work better by producing high quality, relevant technical documents that influence the way people design, use, and manage the Internet. The IETF Overlay Routing Area (NVO3, L2VPN, TRILL, LISP, PWE3), API (NETCONF, ALTO, CDNI, XMPP, SDNP, I2AEX), Controller (PCE, ForCES), Protocol (IDR, IS-IS, OSPF, MPLS, CCAMP, BFD), and Interface to the Routing System (I2RS) (171) working groups are also involved with SDNrelated activities. For example, the ForCES (172) working group defines protocols and interfaces for the separation of IP control and forwarding, centralized network control, and the abstraction of network infrastructure. Internet research task force (IRTF) (173) initiated an SDN working group to contribute to the community. Software-defined networking research group (SDNRG) (174) discusses SDN from various perspectives (e.g., scalability, abstractions, and programming languages) to identify approaches that can be used in nearterm and future research challenges.
 International telecommunication union telecommunication standardization sector (ITU-T) (175): ITU-T is capable of undertaking comprehensive discussions on the public networks, particularly with regard to their international connections, of covering billing issues and of aspects related to restrictions. Some ITU-T study groups are working on requirements for SDN. For example, ITU-T SG13 is developing SDN-related questions and network virtualization. ITU-T SG11 is investigating signaling requirements and protocols for SDN, and this work aligns with the functional requirements and architectures developed by ITU-T SG13. Joint coordination activity on SDN (JCA-SDN) (176) is established for coordinating and helping plan work to ensure that the ITU-T SDN standardization progresses in a wellcoordinated manner among relevant SGs (e.g., SG13 on use-cases, requirements, and architecture; SG11 on protocols and interoperability).
 Metro Ethernet forum (MEF) (177): MEF is a nonprofit international industry consortium and now introducing SDN technologies to the Carrier Ethernet paradigm.

 European telecommunications standards institute (ETSI) (178): ETSI is an independent, notfor-profit, standardization organization in the telecommunications industry (equipment makers and network operators) in Europe, and owns an initiative on NFV.
 Institute of electrical and electronics engineers (IEEE) (179): Its objectives are the educational and technical advancement of electrical and electronic engineering, telecommunications, computer engineering and allied disciplines. The IEEE SDN (180)Initiative is composed by seven committees: Conference, Education, Publications, Publicity, Standards, Pre-industrial and Outreach. Although IEEE is still not involved deeply with SDN, we can find some 802.1 Overlay Networking projects that look at SDN-related concepts.
The open source software community, including OpenDaylight(181) , OpenStack (182), and Apache CloudStack (183) is developing basic building blocks for SDN implementation for the advancement of SDN. For example, OpenDaylight is intended to be extensible and configurable to potentially support emerging SDN open standards (e.g., OpenFlow).
Table 4 summarizes existing efforts for controller design aspects, development tools and industry standardizations.
Table 4: Summarizes existing efforts for the control plane

Name Controller design aspects Simulation & Framework
Debuggers
Testbeds
Programming Languages Standards

Description
State consistency, scalability, flexibility, availability, security, placement and latency Mininet, Mininet-HiFi, Mininet CE, SDN Cloud DC, ns-3, OMNeT++, Trema EstiNet 8.0, Mirage, STS, NICE, Cbench, OFLOPS, OFTest, OFRewind, Frenetic, VeriFlow, FlowChecker, HAS, ATPG, ndb PlanetLab Europe, OFELIA, FIBRE, Internet2, RISE, SURFnet, COTN, Emulab, GENI Maple, FatTire, FML, Procera, Frenetic ONF, IETF, IRTF, SDNRG, ITU-T, MEF, ETSI, IEEE

5. Application layer
The application layer is at the top of the SDN architecture, which includes all the applications that exploit the services provided by the controller in order to perform network-related tasks in various areas.
5.1. Traffic engineering
A dynamic and efficient network management needs information about current network status and timely change of network control. The authors in (184) present Aster*x, a prototype distributed load balancer, which uses OpenFlow to measure the state of the network and makes load balancing

scalable, dynamic, and flexible to directly control the forwarding paths. Similarly, in (68) the authors utilize the network information (collected by the centralized SDN controller) to get significant improvements in network utilization and reduce packet losses and delays. Particularly, they show these improvements are possible even in cases where there is only a partial deployment of SDN capability in a network. Also, they formulate the SDN controller’s optimization problem for traffic engineering with partial deployment. Networks today rely on middle-boxes to provide critical performance, security, and policy compliance capabilities. Plug-n-Serve (185) is an Open-Flow based server load-balancing solution that leverages an OpenFlow controller to effectively reduces response time of web services in unstructured networks built with cheap commodity hardware. SIMPLE (186) is an SDN-based policy enforcement layer for efficient middle-box-specific traffic engineering. SIMPLE exploits SDN technologies to ensure that the traffic is directed through the desired sequence of middle-boxes to realize efficient middle-box applications. In the work (187) a novel data center architecture based on load-balanced forwarding with in-packet Bloom filters enabled proposed, by two support services that distribute the directory and topology state of OpenFlow controller applications. A general framework to formulate the multi-flow update sequence scheduling problem and come up with an optimal flow migration ordering solution was proposed in (188), which minimizes the maximum link utilization and significantly reduces the possibility of congestion.
Recently, some researchers proposed enhancement methods for QoS over SDN. The authors in (189) proposed an architecture to support QoS flows in an OpenFlow environment with a centralized controller and many forwarders. They focused on the analytical framework for optimization of the QoS flow routing, and the functionality needed within the controller and forwarders to efficiently support QoS and also describe the control layer messaging between the controller and forwarder to set up queues, detect congestion and reroute traffic streams that require QoS. OpenQoS (190), is a novel OpenFlow controller design for multimedia delivery with end-to-end QoS support. This approach is based on QoS routing where the routes of multimedia traffic are optimized dynamically to fulfill the required QoS. OpenQoS can guarantee seamless video delivery with little or no video artifacts experienced by the end-users. A network QoS control framework was proposed in (191) for automated fine-grained management of converged network fabric. The QoS controller can create network slices to assign different applications traffic to different slices, and provision the slices dynamically to satisfy the performance requirements across all applications. Video over softwaredefined networking (VSDN) (192), is capable of selecting the optimum path for video applications which can improve the QoS of video applications. A VSDN API allows application developers to request service from VSDN enabled networks.
5.2. Network management
There have been some works that propose new network management systems using SDN technologies. Integrated network management and control system (I-NMCS) framework (193)combines legacy network management functions (e.g., discovery, fault detection) with the endto-end flow provisioning and control enabled by SDN. In (194) To simplify and improve various aspects of network operations and management , such as enabling frequent changes to network conditions and state, providing support for network configuration in a high-level language, and better visibility and control over tasks such as network diagnosis and troubleshooting, the authors proposed Procera. Procera is an event-driven network control framework based on SDN. The authors of (195) propose how SDN provide an inter-domain routing component to an SDN control plane. They implement it using an NOX-OpenFlow architecture that was originally created only for routing in

enterprise networks. VeriFlow (147) is a verification tool in order to achieve a real-time checking in SDN networks to keep OpenFlow rules consistent and thus control the network traffic in a stable way.
5.3. Measurement & monitoring
FleXam (196) is a flexible sampling extension for OpenFlow controller to access packet-level information, In other words, the controller can define which packets should be sampled, what part of packet should be selected, and where they should be sent. In (197), the authors proposed SoR-based programmable network for effective future SDN which enables layer-2 to layer-7 information to be captured, analyzed, and stored and has a high-throughput database(DB) and is able to analyze all transactions on its interfaces. Also, SoRs can provide APIs to access stored contents in order to enrich services. Similarly, Atlas (198) is a framework which incorporates application awareness into SDN, which is currently capable of L2/3/4-based policy enforcement but agnostic to higher layers. It enables fine-grained, accurate and scalable application classification in SDN. Another tool proposes a software-defined traffic measurement architecture called OpenSketch (199), it proposed to support more customized and dynamic measurement while guaranteeing the measurement accuracy. To achieve this goal, OpenSketch separates the measurement data plane (supporting many measurement tasks) from the control plane (configuring and allocating different measurement tasks).
5.4. Middle-box
Middle-boxes (for example a load balancer) and in-network services (for example in-network caching) are very popular in today’s networks. SDN technologies can be used to simplify the network by eliminating it from middle-boxes and integrating their functionality within the network controller to produce better middle-box-based services. Dynamic and traffic-dependent modifications enforced by middle-boxes make it difficult to reason about the correctness of network-wide policy enforcement (e.g., access control, accounting, and performance diagnostics). FlowTags (200) is an extended SDN architecture in which middle-boxes add tags to outgoing packets so that tags are used on switches and (other) middle-boxes for systematic policy enforcement. In addition, SDN simplifies to embed various in-network services, such as advertisement targeting (60), where a software control in the middle of the network injects related advertisements based on the session content. In the similar approach, in (61) an In-network processing (INP) framework was proposed which orchestrates various computing resources and network devices and enables seamless and efficient deployments of network services. CoMb (201), is a new architecture for middle-box deployments that systematically explores opportunities for consolidation, both at the level of building individual middle-boxes and in managing a network of middle-boxes. The authors in (202) try to realize a software-defined middle-box networking framework to simplify management of complex, diverse functionalities and engender rich deployments. They discuss the major challenges that arise—representing, manipulating, and knowledgeably controlling middle-box state—and also present initial thoughts on the appropriate abstractions and interfaces to address them.
5.5. Security & dependability
The centralized control of SDN is useful for implementing security applications. Supervision of SDN on whole network flow and monitoring behavior of users makes SDN possible to detect attack rapidly and prevent more damage. OpenFlow random host mutation (OFRHM) (203) uses OpenFlow to develop a moving target defense (MTD) architecture that transparently mutates IP addresses with high unpredictability and rate, while maintaining configuration integrity and minimizing operation

overhead. In this approach, the OpenFlow controller dynamically allocates a random virtual IP (translated to/from the real IP of the host) to each host to avoid exposing an authentic IP that could be used by the attacker. The authors in (204), have shown that SDN OpenFlow and NOX allow flexible, highly accurate, line rate detection of anomalies inside Home and SOHO (small office/home office) networks. The standardized interface provided by a SDN would allow our applications to be updated easily as new security threats emerge while maintaining portability across a broad and diverse range of networking hardware. Resonance (205) is a system for securing enterprise networks, where the network elements themselves enforce dynamic access control policies based on both flow-level information and real-time alerts. Resonance uses programmable switches to manipulate traffic at lower layers and allows the switches to take actions (e.g., dropping) to enforce high-level security policies and distributed monitoring and inference systems. Some works exploit SDN capabilities to develop applications such as edge-based authentication gateways (206, 207).
5.6. Virtualization
Migrating virtual machines (VMs) along with their connections has numerous benefits in data centers, ranging from load balancing to power saving to optimization of performance and utilization by VM reallocation. However, directly migrating individual components can lead to inconsistencies and overloads of resources. In (208), the authors use the abilities of SDN (i.e., running algorithms in a logically centralized controller and manipulating the forwarding layer of switches) to handle VM migration issues. Particularly, given the network topology, service-level agreement (SLA) requirements, and set of VMs that are to be migrated, along with their new locations, the algorithms (running in the SDN controller to orchestrate these changes within the network) output an ordered sequence of VMs to migrate, also a set of forwarding state changes. LIME(live migration of ensembles) (209) is an SDN-based solution for live migration of VMs, which handles the network state during migration and automatically configures network devices at new locations. The traditional IP multicast technique based on IGMP (internet group management protocol) is not scalable because it consumes a large amount of resources such as IP multicast tables and CPU time. the authors in (210), extended OpenFlow to manage an IP multicast in overlay networks. In particular, they eliminate periodic Join/Leave messages and achieve more than 4,000 tenants. It is as well as possible to combine SDN and NFV to provide a virtual networking lab for computer science education without any simulation (211).
5.7. Networks
5.7.1 Wireless and mobility
SDN also can be deployed for wireless and mobility networks. Currently, main research focus in SDN wireless and mobility architecture is centralized control of them. Odin (212), is a SDN framework to introduce programmability in enterprise wireless local area networks (WLANs) by exploiting a light virtual AP abstraction. Enterprise WLANs need to support a wide range of services and functionalities (e.g., authentication, authorization and accounting, mobility, interference management, load balancing and AP association decision). Odin allows a network operator to implement enterprise WLAN services as network applications while not requiring client-side modifications. OpenRadio (213) is a novel design for a programmable wireless data plane that provides modular and declarative programming interfaces across the entire wireless stack. OpenRadio can be used to realize modern wireless protocols, such as Wi-Fi and LTE, while providing flexibility to modify the PHY and MAC layers. OpenRoads (214) is an open-source platform for innovation in mobile networks over NOX.

OpenRoads or in other words, OpenFlow Wireless aims to create an open platform where various mobility solutions, network controllers, and routing protocols are examined. OpenRoads provides flexible control of the data path and device configuration using OpenFlow and SNMP, respectively. This allows researchers to implement wildly different algorithms and run them concurrently in one network. The authors in (215) propose an open (but backward compatible) wireless network infrastructure that can be easily deployed on college campuses worldwide. An architecture that integrates OpenFlow with WMNs (wireless mesh network) was proposed in (216), which provides flow-based routing and forwarding capabilities. SoftRAN (217), is a centralized software-defined radio access network designed for performing handovers efficiently. In SoftRAN all the base stations are abstracted and controlled in a centralized way. The centralized control of SDN can also be used to achieve complete virtualization and programmability in radio access networks (RAN). OpenRAN (218) is an architecture for software-defined RAN via virtualization. It provides open, controllable, flexible and evolvable wireless networks. For handling significant scalability issues exist in cellular networks and enable new services, (219) proposed a cellular SDN architecture with local control agents with ability to make simple decisions. The centralized controller responsible for interpreting flows with high level abstractions. SDN can be applied in wireless sensor networks (WSNs) (220). Generally, using SDN in WSNs provided the SDN benefits such as flexibility, easier management, optimized resource utilization, congestion control (221) etc.. The network controllers have the power to set policies to support several applications by utilizing sensor based software-defined wireless network. Also this approach would permit using the same sensor nodes for several applications. In (222) a SDN based Sleep Scheduling algorithm SDN-ECCKN is proposed to manage the energy of the network. In (223), the authors explore SDN mechanisms, which exploit OpenFlow to optimize handovers in heterogeneous wireless environments, particularly for media-independent handover procedures. To apply concepts of abstraction to wireless ad hoc network of smartphone, SDN in ad hoc networks (224) was developed. This Hybrid platform has been implemented on Android operating system. The purposed platform is more modular and easier for modification and extension of its components. The authors in (225), proposed a novel plastic architecture for the advanced 5G network infrastructure by harvesting latest advances of SDN, network functions virtualization and edge computing. Other use case were mentioned in (226) referred the benefit of based SDN. SoftCell (227) is scalable architecture that supports fine-grained policies for mobile devices in cellular core networks, using commodity switches and servers was proposed in. SoftCell enables operators to realize high-level service policies that direct traffic through sequences of middle-boxes based on subscriber attributes and applications. WiVi (228) is a Wi-Fi network virtualization infrastructure that not only enables multiple coexisting access points to work concurrently, but also enables data plane programmability for potential application developers. Two latest and promising innovations of Internet, SDN and network virtualization, to mobile and wireless scenarios was discussed in (229).
5.7.2 Optical network
There is a great deal of benefits when adopting SDN/OpenFlow for optical network control (230). SDN provides many benefits such as improved network control, programmable, abstracted interface for flexible application re-configurations in optical control units. The potential benefits and challenges of extending SDN concepts to various transport network architectures include optical wavelength and fiber switches, circuit switches, and sub-wavelength optical burst switches are discussed in (231). The combination of SDN controller with optical switching to explore the tight integration of application and network control discussed in (232). In addition it particularly studies the run-time network configuration for big data applications to jointly optimize application performance and network utilization. It shows that the combination has great potential to improve application performance with

relatively small configuration overhead. The authors in (233), argued that the applying SDN to circuit based transport networks could be the enabler for both packet-optical integration and improved transport network applications. They discuss extensions to OpenFlow v1.1 to achieve control of switches in the multi-technology transport layer. Moreover, a unified OpenFlow/GMPLS (generalized multiprotocol label switching) control plane that can be used to provide GMPLS-specific features to OpenFlow networks was proposed in (234). Similarly, OpenFlow-based control plane in Flexi-Grid optical networks (235), feasible the dynamic light path establishment and adjustment via extended OpenFlow protocol. In (236), the authors introduce a Software-defined optical network (SDON) architecture and develop a QoS-aware unified control protocol for optical burst switching in OpenFlow-based SDONs. OpenFlow is also exploited to dynamically create a bidirectional wavelength circuit for a TCP flow (237) or wavelength path control for light-path provisioning in transparent optical networks (238). A simple programmable architecture in (239) was proposed which abstracts a core transport node into a programmable virtual switch, that meshes well with the software-defined network paradigm while leveraging the OpenFlow protocol for control.
5.7.3 Home and small networks
Small networks such as those found in the home or small businesses have become increasingly complex and prevalent with the widespread availability of low-cost network devices, the need for more careful network management and tighter security has correspondingly increased. Several projects have examined how SDN could be used in them. The authors in (240), believe that users desire greater understanding and control over their networks’ behavior; and present a prototype for a home network in which SDN is used to provide users a view into how their network is being utilized while offering a single point of control. In managing and troubleshooting home networks, one of the challenges is in knowing what is actually happening. So, the authors in (241) proposed instrumenting the network gateway/controller to act as a Home Network Data Recorder to create logs that may be utilized for troubleshooting or other purposes. By exploiting the SDN switches that enable flexible remote management, the authors in (241) propose an architecture for home network security which outsources the management and operations of these networks to a third party (e.g. ISP) which has a broader view of network activity. The controller applies distributed inference to detect performance and security problems in the local networks.
5.7.4 Cloud and data center networking
OpenFlow enables a network to reduce energy consumption by selectively powering down links and redirecting traffic to alternate paths during periods of lighter load. One approach to applying OpenFlow to energy savings in the data center, called ElasticTree (242). ElasticTree is a networkwide energy optimizer that monitors data center traffic conditions and chooses the set of network elements that must stay active to meet the performance requirements. The authors discuss several strategies to find minimum-power network subsets and show energy savings between 25-62% under varying traffic conditions. The authors in (243), exploit the capabilities of SDN and proposed Scissor which tries to save energy by removing redundant traffic. Scissor effectively replaces the redundant header information with a flow ID to be used for the forwarding. Scissor leverages SDN technologies to dynamically allow switches to route packets based on the flow IDs. NCP (244), is a system that uses network based replication to enable service replication in data centers through software-defined networking. NCP allows its users to identify flows based on network addresses and ports and to specify a replication target for each such flow. NCP identifies flows based on network addresses and ports, and specifies a replication target for each identified flow. NCP then determines the ideal switch

for replication and installs corresponding forwarding rules so that the identified flow goes to a designated server. Some work tries to satisfy the need for customized routing and management of distributed data centers that cannot be easily achieved by a traditional WAN (wide area network) architecture. B4 (245) designed by Google, is a hybrid approach with simultaneous support of existing routing protocols and novel OpenFlow SDN approach. The centralized traffic engineering is applied to easily satisfy massive bandwidth requirements, maximize average bandwidth, and enable rate limiting and measurement at the edge. They address the critical performance and reliability issues that WANs faced when delivering terabits per second of aggregate bandwidth across thousands of individual links. By exploiting the global network view enabled by the SDN paradigm, SWAN (246) is a software-driven WAN (SWAN) proposed by Microsoft, utilizes policy rules to allow inter-data center WANs to carry significantly more traffic for higher-priority services, while maintaining fairness among similar services. SWAN controls when and how much traffic each service sends, and re-configures the data plane to match current traffic demand. M2cloud (247) is a software-defined framework providing scalable network control for multi-site data centers. M2cloud employs two-level controllers with decoupled functions, providing each tenant with flexible virtualization support in both intra- and inter- data center networks. In addition, SDN provides opportunities to extend the service provisioning model of infrastructure as a service (IaaS). CloudNaaS (248), is a network service platform that enables tenants to leverage many of the network functions needed for production enterprise applications to run in IaaS clouds.
5.7.5 Information-centric networking
Recently, many researchers claimed that current internet architecture is not able to response the emerging and future need of users. There for, new architectures were introduced such as information centric network (ICN) to solve fundamental limitations. ICN is a new paradigm proposed for the future architecture of the Internet, which supports content-oriented services (249). ICN is a novel networking paradigm which promises to provide technological solutions that best fit with the way in which Internet is actually utilized. Assessment of proposed solutions requires appropriate experimental testbeds. In this regard, SDN is a valuable tool to build a testbed for ICN (250, 251) and also SDN features can also be utilized to realize ICN capabilities in an efficient manner. In (252), the authors have discussed some issues related to the application of SDN concepts to ICN and also, how ICN functionalities can be implemented over an OpenFlow network and how OpenFlow should be modified to better suit ICN functionalities. They present which how SDN and ICN could concretely be combined, deployed, and tested. In addition, they implemented a possible realization of a novel design for ICN solutions and point to possible testbed deployments for future testing. Caching strategy might dramatically influence performance and efficiency of content-centric networks. In (253), an OpenFlow-based architecture that performs efficient caching for content-centric networks was proposed. C-flow (254) seeks to achieve efficient content delivery by leveraging the current OpenFlow functionalities. C-flow can deliver content to mobile hosts by using the byte-range option of the HTTP header. Multicasting/unicasting is naturally supported by mapping between files and their corresponding IP addresses. A routing protocol (255) which supports mobility by means of controller, can be easily implemented using software-defined ICN. The authors in (256), discussed the role of virtualization in NDN (Named Data Networking), an architecture based on ICN, and outlined traffic optimization, traffic engineering and in-network catching management as the advantages of implementing NDN over SDN, specially for multimedia traffics. In (257), the authors present the detailed design and implementation of an OpenFlow-based CCN (content-centric networking) with the primary aim to achieve forwarding and end-to-end communication.

6. Research challenges and future direction
The overview of the related studies in this paper indicates that both industrial and academic settings have become highly interested in SDN and its protocols such as OpenFlow. The solutions provided by SDN have their own challenges and lead to new research questions which should be addressed in the future works. Some of the most generic questions are: how to optimize SDN? How to apply SDN in different networks? How to establish a tradeoff between different SDN implementations? In this section, different challenges which need be investigated in the upcoming studies are mentioned as directions for further research.
6.1. Data plane 6.1.1. Data plane programmability
Research into SDN focuses mainly on the development and programmability of the control plane. Although supporting data plane programmability is feasible, very few studies have addressed this issue and it is regarded as an under-researched issue in most SDN-related studies (258). Research should be conducted on all three planes of SDN so as to better figure out programmability in networking stack. Indeed, many recent schemes such as SDN, NFV and network service chaining (NSC) have been proposed so that networks can be converted into programmable platforms with a focus on control plane (SDN) and data plane, respectively (NFV/NSC). Figure 4 illustrates DPN (deeply programmable network) which is regarded as the overall solution for programming both data and control planes deeply.
Network Apps

APP Plane

Control Plane

Data Plane OpenFlow-switch

Northbound Interface
Controller
E.g., OpenFlow Southbound Interface
Flow table

CPU

Memory

Queue

...

SDN

 Control Plane Programmability

 Route Control  Access Control  Network Management

Target Scope of OpenFlow/SDN

DPN

 Data Plane Programmability

 Packet Data Processing  Cache  Transcode  DPI

OpenFlow/SDN with external processors
and NVF

 Handling New Protocols  IPvN(N>6)  New Layer2  Content Centric Network(CCN)

Irrelevant with
OpenFlow (+processors)

 Meta Control Plane Programmability
 Defining New Proprietary APIs Out of scope of OpenFlow

Figure 5: Deep programmability within network
SDN can be extended to provide simple programmability for data plane and support interface definition or redefinition for it which reduces maintenance complexity and decreases life-cycle costs

related to hardware-based inflexible data plane elements. FLARE(50) can be considered as one of the current efforts for accomplishing DPN.
6.1.2. Southbound APIs
Although OpenFlow significantly helps customize control plane of a router, at the present, there are no available solutions for data plane customization. Indeed, APIs are required to achieve different tasks for data plane similar to OpenFlow for control plane. Inasmuch as data plane can look inside a packet, hence, many applications such as deep packet inspection can be implemented and used. It should be noted that the major challenge and difficulty is to make a balance between efficiency and flexibility of data plane APIs. That is to say, enough throughputs should be maintained as well as packet processing mechanisms should be deployed as the data plane APIs should deal with a delaysensitive environment. The first implementation of edge router was introduced in (259) which makes it possible to customize data plane processing.
6.1.3. Extensibility and platform independency
Both common hardware-centric networking and OpenFlow-compatible switches make networking dependent on a special family of hardware or software which impedes innovation and extensibility. The independence of networking from particular hardware or protocols can result in more productivity and innovation. This limitation and dependency can motivate researchers and experts to enhance SDN independency from all kinds of underlying technologies. In line with this purpose, commodity (e.g., x86 architecture) or programmable hardware (e.g., NPU and GPU) can be regarded as remarkable movements towards SDN independence. In a similar vein, regarding software-related issues, SDN should be developed in such a way that it its dependencies are minimized. As discussed in (75), POF (protocol-oblivious forwarding) can eliminate such dependencies of protocol-specific configurations on forwarding elements. Also, it can enhance data-path with new statefull instructions or actions to support genuine SDN behavior.
6.1.4. Switch designs
Recent OpenFlow switches are diverse and differ remarkably from one another in terms of feature set (flow table size, optional actions), performance (fast vs. slow path, control channel latency/throughput), interpretation and adherence to the protocol specification and architecture (hardware vs. software designs).
Heterogeneous implementation: the type of implementation has a fundamental impact on behavior, accuracy, and performance of switches including differences from flow counter behavior to other performance metrics. One method to accommodate such heterogeneity is through NOSIX, a portable API that separates the application expectations from the switch heterogeneity (260).
Flow Table Capacity: Flow matching rules are stored in flow tables within network devices. One practical difficulty is related to providing switches with large and efficient flow tables so that rules can be stored (261). TCAMs (Ternary content addressable memories) are a common choice for holding flow tables. Although TCAMs are flexible and efficient with respect to matching capabilities, they are costly and typically small (from 4K to 32K entries). Some research studies have focused on compression techniques for reducing the number of flow entries in TCAMs (262), (263).

Performance: throughput of commercial OpenFlow switches can vary from 38 to 1000 flow-mod per second where most devices achieve throughput values less than 500 flow-mod per second. This issue is clearly considered to be a limiting factor which should be taken into account in the switch design process. As the procedure proposed in (102), one method for handling this problem is to add more powerful CPUs into switches.
Evolving switch designs & hardware enhancements: As it can be observed in software/hardware innovation cycle, certain hardware improvements are required to optimize SDN capabilities and performance. Novel SDN switch designs are appearing where a myriad of hardware combinations such as SRAM, RLDRAM, DRAM, GPU, FPGA, NPs and CPUs work together with TCAMs among other specialized network processors. Similar to the method proposed by the Rain Man firmware (264), alternatives to TCAM-based designs include new hardware architectures and components in addition to new and more scalable forwarding planes.
Native SDN Switch Designs: The majority of studies for (re)designing SDN switches have usually followed evolutionary approaches for retrofitting specific programmable features into existing hardware layouts. Such studies are based on common wisdom on switch/router designs and consolidated technologies such as SRAM, TCAM, FPGA. One deviation from this approach is the ongoing research study on forwarding metamorphosis (265) which is a reconfigurable match table model inspired from RISC-like pipeline architecture applied to switching chips.
6.2. Controller platforms
As mentioned above, controller platform is deemed to be a significant component of SDN architecture. Hence, studies should be conducted to enhance the following factors in SDN controllers: performance, scalability, distribution, modularity, highly available programmer-friendly software. As a case in point, distributed controller platforms should deal with a number of challenges. That is, the latency between forwarding devices and controller instances, fault-tolerance, load-balance, consistency and synchronization can be regarded as some of the significant challenges. Operators should consider and figure out how the combination of different functions and modules can improve the network.
Modularity & Flexibility: A number of ongoing research studies are aimed at the modular and flexible composition of controllers. For instance, RAON (266) is regarded as a recursive abstraction of OpenFlow controllers where each controller can observe the controllers below OpenFlow switches. Hence, research gaps in this area include the definition of suitable interfaces between different layers in a hierarchy of controllers.
Interoperability and application portability: Like forwarding devices, vendor agnosticism which stems from standard southbound interfaces is critical for fostering interoperability between controllers. Early studies favoring more interoperable control platforms include portable programming languages such as Pyretic (105) and east/westbound interfaces among controllers such as SDNi (267). Nevertheless, these efforts are yet far from fully realizing controller interoperability and application portability
High-Availability: with respect to production, SDN controllers should maintain their proper functioning even under the pressure of different objectives from the applications they host. Indeed, many improvements and optimizations are required so that potential risk vectors of controller-based

solutions can be handled (268). Future studies should introduce consistent, fault-tolerant data stores for building reliable distributed controllers (269), (270), (271).
Delegation of control: for enhancing operational efficiency, SDN controllers can delegate control functions for reporting state and attribute value changes, threshold crossing alerts, hardware failures, etc. These notifications typically follow a publish/subscribe model, i.e., controllers and applications subscribe (on-demand) to the particular class of notifications they are interested in. Furthermore, these subsystems can provide resilience and trustworthiness properties (272).
6.3. User-driven control
The majority of SDN APIs were designed to be used by network operators and/or administrators. Although these APIs are useful, some APIs should be also implemented by users (273)). For endusers, APIs can be utilized to realize on-demand services. For instance, an intrusion detection application on a user machine can request network to manipulate traffic from a specific source. On the other hand, a MapReduce-style application can ask for bandwidth guarantees for optimizing performance of its shuffle phase. Such instances can be interpreted in a way that API should be present between network control plane and its client applications. These rules require read and write access so as to figure out network status and make independent configuration variations for their own benefit, respectively (273). With respect to the purpose of user-defined controlling, many challenges and difficulties should be sorted out. As a case in point, trust may play an important role in such APIs since a section of network control should be assigned to a semi-external entity. Moreover, the conflicts among various users’ requests should be eliminated and, meanwhile, baseline fairness and security should be maintained.
6.4. Resilience
Establishing resilient communication is deemed to be one of the critical objectives in networking. Hence, SDNs should be able to yield the same degrees of availability as legacy and other modern technological alternatives. One important research question regarding split control architectures like SDN is (274) related to their actual resilience against faults which might compromise communications ween control and data planes. Consequently, it leads to the production of “brainless” networks. Indeed, the malfunctioning of particular SDN elements should not destroy availability. When critical control plane functions such as those related to link failure detection or fast reaction decisions are considered, the relocation of SDN control plane functionality from inside the boxes to remote, logically centralized locations is a challenge. OpenFlow network resilience is a function of both faulttolerance in data plane (as in traditional networks) and high availability of the (logically) centralized control plane functions. Thus, it can be argued that SDN resilience is a thorny issue due to the multiple possible failures of the different pieces of the architecture. As discussed in (275), there is a notable research lacuna with regard to building and operating fault-tolerant SDNs. Indeed, Google B4 (245) can be considered as one of the few cases which indicated that SDN can be resilient. Distributed controller architectures are instances of approaches towards resilient SDN controller platforms with different compromises regarding consistency, durability and scalability.
6.5. Performance evaluation
Numerous implementations of OpenFlow from hardware and software vendors are used in different networks from small enterprises to large-scale data centers. Hence, an increasing number of

experiments are expected to be done on SDN-enabled networks in the near future. Hence, future studies will inevitably raise more research questions and gaps and these questions on SDN performance and scalability should be systematically investigated. The overview of the related works in this study revealed that few studies have evaluated the performance of OpenFlow and SDN architecture. Although simulation studies and experimentation are among the most widely used performance evaluation techniques, analytical modeling has its own benefits too. A closed-form description of a networking architecture paves the way for network designers to have a quick (and approximate) estimate of the performance of their design, without the need to spend considerable time for simulation studies or expensive experimental setup. Some work has investigated ways to improve the performance of switching capabilities in SDN. These mainly consist of observing the performance of OpenFlow-enabled networks regarding different aspects, such as lookup performance (276), hardware acceleration (44), the influence of types of rules and packet sizes (43), performance bottlenecks of current OpenFlow implementations (94), how reactive settings impact the performance on data center networks (277), and the impact of configuration on OpenFlow switches (143).
6.6. Deployment
In the past, SDN was mainly applied in networks of academic settings and data centers. Nevertheless, in more recent studies, SDN has been expanded to an extensive range of networks from optical, home, wireless, cellular networks to ICN (section 5.7). Inasmuch as each network has specific settings, the application of SDN to new networks has created opportunities and challenges which should be addressed in future studies (278). One more research issue is related to incremental deployment. Many of the studies using SDN suppose a complete SDN deployment. However, in real-life situations, one part of network can only be updated at a time in case budgets are limited. Hence, one problem is that the compatibility between existing network components and SDN-enabled components should be supported (e.g., (279)). Another challenge is related to specifying which existing switches or routers should be upgraded for enhancing SDN advantages (280).
Furthermore, inter-networking across multiple SDN domains should be considered as a research lacuna. The majority of recent studies on SDN have investigated the context of a single administrative domain. One important research question is related to logically centralized SDN control. Nevertheless, it should be noted that logically centralized control might not be appropriate for multiple SDN networks since in these networks, controls are independently driven by their own controllers. As a case in point, physically disseminated SDN networks (including testbeds) require agreement from the corresponding administrators. moreover, controller might have to expanded so as to cover inter-networking.
6.7. Virtualization and cloud services
SDN paradigm can be used in carrier networks as a technological tool for sorting out some generic and old issues. The followings are regarded as new architectures for a smooth migration from:
 Current mobile core infrastructure to SDN (281), and techno-economic models for virtualization of these networks (282)
 Carrier-grade OpenFlow virtualization schemes (283),(284) such as virtualized broadband access infrastructures (285), methods which offer network-as-a-service (286)

 Programmable GEPON and DWDM ROADM (79), (287), (80), (288)  Large-scale inter-autonomous systems (ASs) SDN enabled deployments (195)  Flexible control of network resources (289) like offering MPLS services by means of an SDN
approach (290)  Investigation of new network architectures including the ones for separating network edge
from the core (291), (292), with the latter forming the fabric that transports packets as defined by an intelligent edge, to software-defined Internet exchange points (293), (294).
It is obvious that that SDN can be considered as an opportunity for telecom and cloud providers which results in flexibility, cost-efficacy, and better handling of their networks. In fact, some earlier ideas and theories regarding SDN have been realized but still many other open issues which were mentioned is this overview should be addressed in future studies.
6.8. SDN: a missing piece of software-defined puzzle
Converging different technologies facilitates the development of fully programmable IT infrastructures. At the present, the entire IT stack can be dynamically and automatically configured or reconfigured from the network infrastructure up to the applications so that workload changes can be better handled. The latest advances and developments make on-demand provisioning of resources at nearly all infrastructural layers possible. Recently, the automated provisioning and orchestration of IT infrastructures was labelled software-defined environments (SDEs) (295), (296) by IBM. Indeed, it is a new method which is of remarkable significance in simplifying IT management, optimizing infrastructure use, reducing costs and time of new ideas and products. Workloads in SDE can be easily and automatically allocated to proper IT resources based on the followings: application characteristics, security and service level policies, the best available resources for continuous and dynamic optimization and reconfiguration of infrastructure issues in a rapid and responsive manner. It should be noticed that one missing key piece of SDE is software-defined networking. The followings are regarded as the four major building blocks of SDE (297):
 Software-defined networks (SDN) (298),(295)  Software-defined storage (SDS) (299)  Software-defined compute (SDC) (296)  Software-defined management (300) (SDM)
IBM SmartCloud orchestrator is known as the initial instances of SDE (296), (295).
7. Conclusion
As discussed in the paper, handling traditional networks is a complex and challenging task which is partially attributed to the fact that control and data planes are vertically integrated and vendor specific. The popularity of SDN is increasingly enhanced thanks to the interesting features it offers by providing innovations with regard to design, organization and management of the networks. Some of the outstanding concepts of SDN are: dynamic programmability in forwarding devices through open southbound interfaces, decoupling control and data plane and the global view of the network which is due to logical centralization. However, it should be noted that there are still many open research questions and gaps which need to be solved so that successful SDN can be accomplished.

In this paper, a comprehensive overview of programmable networks, i.e. the emerging field of Software-Defined Networking (SDN) was given. SDN architecture and its three planes, namely data plane, control plane and application plane were discussed in detail. Moreover, OpenFlow which was the standard protocol for control and data planes were described. It should be noted that the majority of related works have focused on the structure of SDN, control plane and OpenFlow. However, we not only investigated them but also we provided an exhaustive categorization of the state-of-the-art SDN technologies in all the three planes. Also, current SDN implementations, testing platforms and current standardization efforts were mentioned in this paper. Furthermore, we examined network services and applications based on a range of SDN paradigms from heterogeneous networks to ICN. As mentioned earlier in the paper, as promising research domain, SDN should be optimized in all three planes so that it can be successfully applied in industry and other required settings. Addressing the above-mentioned directions for further research can help sort out the existing challenges and improve SDN.
References
1. Nunes B, Mendonca M, Nguyen X-N, Obraczka K, Turletti T. A survey of software-defined networking: Past, present, and future of programmable networks. Communications Surveys & Tutorials, IEEE. 2014;16(3):1617-34.
2. McKeown N, Anderson T, Balakrishnan H, Parulkar G, Peterson L, Rexford J, et al. OpenFlow: enabling innovation in campus networks. ACM SIGCOMM Computer Communication Review. 2008;38(2):69-74.
3. Hu F, Hao Q, Bao K. A survey on software-defined network and openflow: from concept to implementation. Communications Surveys & Tutorials, IEEE. 2014;16(4):2181-206.
4. Xia W, Wen Y, Foh CH, Niyato D, Xie H. A survey on software-defined networking. Communications Surveys & Tutorials, IEEE. 2014;17(1):27-51.
5. Farhady H, Lee H, Nakao A. Software-Defined Networking: A survey. Computer Networks. 2015;81:79-95.
6. Macedo DF, Guedes D, Vieira LF, Vieira MA, Nogueira M. Programmable Networks—From Software-Defined Radio to Software-Defined Networking. Communications Surveys & Tutorials, IEEE. 2015;17(2):1102-25.
7. Akyildiz IF, Lee A, Wang P, Luo M, Chou W. A roadmap for traffic engineering in SDNOpenFlow networks. Computer Networks. 2014;71:1-30.
8. Kobayashi M, Seetharaman S, Parulkar G, Appenzeller G, Little J, Van Reijendam J, et al. Maturing of OpenFlow and Software-defined Networking through deployments. Computer Networks. 2014;61:151-75.
9. Hakiri A, Gokhale A, Berthou P, Schmidt DC, Gayraud T. Software-defined networking: challenges and research opportunities for future internet. Computer Networks. 2014;75:453-71.
10. Jagadeesan NA, Krishnamachari B. Software-defined networking paradigms in wireless networks: a survey. ACM Computing Surveys (CSUR). 2014;47(2):27.

11. Abolhasan M, Lipman J, Ni W, Hagelstein B. Software-defined wireless networking: centralized, distributed, or hybrid? Network, IEEE. 2015;29(4):32-8.

12. Akyildiz IF, Wang P, Lin S-C. SoftAir: A software defined networking architecture for 5G wireless systems. Computer Networks. 2015;85:1-18.

13. Huang H, Li P, Guo S, Zhuang W. Software-defined wireless mesh networks: architecture and traffic orchestration. Network, IEEE. 2015;29(4):24-30.

14. Cao B, He F, Li Y, Wang C, Lang W. Software defined virtual wireless network: framework and challenges. Network, IEEE. 2015;29(4):6-12.

15. Scott-Hayward S, O'Callaghan G, Sezer S. Sdn security: A survey. Future Networks and Services (SDN4FNS), 2013 IEEE SDN For. 2013:1-7.

16. Ali ST, Sivaraman V, Radford A, Jha S. A survey of securing networks using software defined networking. Reliability, IEEE Transactions on. 2015;64(3):1086-97.

17. Juniper/contrail-vrouter:

@github;

https://github.com/Juniper/contrail-vrouter.

2016.

Available

from:

18. FlowForwarding/LINC-Switch:

@github;

https://github.com/FlowForwarding/LINC-Switch.

2016.

Available

from:

19. CPqD/ofsoftswitch13:

@github;

https://github.com/CPqD/ofsoftswitch13.

2016.

Available

from:

20. Open vSwitch 2016. Available from: http://openvswitch.org/.

21. OpenFlow 2016. Available from: http://archive.openflow.org/wp/downloads/.

22. OpenFlowClick

-

OpenFlow

Wiki

http://archive.openflow.org/wk/index.php/OpenFlowClick.

2016.

Available

from:

23. floodlight/loxigen: @github; 2016. Available from: https://github.com/floodlight/loxigen.

24. rlenglet/openfaucet:

@github;

https://github.com/rlenglet/openfaucet.

2016.

Available

from:

25. Pantou : OpenFlow 1.0 for OpenWRT - OpenFlow Wiki 2016. Available from: http://archive.openflow.org/wk/index.php/OpenFlow_1.0_for_OpenWRT.

26. Switch Light 2016. Available from: http://www.bigswitch.com/products/switch-light.

27. Pica8 Xorplus 2016. Available from: http://sourceforge.net/projects/xorplus/.

28. HP, “HP 8200 ZL switch series 2016. Available from: http://h17007.www1.hp.com/us/en/networking/products/switches/HP8200zlSwitchSeries/.

29. Networks A. Arista Networks, “7150 series,” @AristaNetworks; 2016. Available from: http://www.aristanetworks.com/media/system/pdf/Datasheets/7150S Datasheet.pdf.

30. Extreme Networks, “Blackdiamond x8,” 2016. http://www.extremenetworks.com/libraries/products/DSBDX 1832.pdf.

Available

from:

31. Huawei Technologies Co., Ltd., “Cx600 metro services platform,” 2016. Available from: http://www.huawei.com/ucmf/groups/public/documents/attachments/hw 132369.pdf.

32. Juniper Networks, “Ex9200 ethernet switch,” 2016. Available from: http://www.juniper.net/us/en/local/pdf/datasheets/1000432-en.pdf.

33. EZchip | Network Processors 2016. Available from: http://www.ezchip.com/.

34. Brocade MLX Series - Brocade 2016. Available from: http://www.brocade.com/en/productsservices/routers/mlx-series.html.

35. Networking | Systems: Lenovo Corporation; 2016. Available from: http://shop.lenovo.com/us/en/systems/networking/.

36. Nec. NEC ProgrammableFlow https://www.necam.com/SDN/.

Networking

2016.

Available

from:

37. Pica8, “Pica8 3920,” 2016. Available from: http://www.pica8.org/documents/pica8datasheet-64x10gbe-p3780-p3920.pdf.

38. PlexxiInc. Plexxi, “Plexxi Switch 1,” @PlexxiInc; 2016. Available from: http://www.plexxi.com/wp-content/themes/plexxi/assets/pdf/Plexxi Switch 1 Datasheet Dec 2012.pdf.

39. Centec Networks - SDN/OpenFlow Switch - V330: CodeDevelopment Platform; 2016. Available from: http://www.centecnetworks.com/en/SolutionList.asp?ID=42.

40. Z-Series Packet-Optical Transport Platforms | Cyan 2015. Available from: http://staging.cyaninc.com/products/z-series-packet-optical.

41. Bosshart P, Gibb G, Kim H-S, Varghese G, McKeown N, Izzard M, et al. Forwarding metamorphosis: Fast programmable match-action processing in hardware for SDN. ACM SIGCOMM Computer Communication Review. 2013;43(4):99-110.

42. Sivaraman A, Winstein K, Subramanian S, Balakrishnan H. No silver bullet: Extending SDN to the data plane. Proceedings of the Twelfth ACM Workshop on Hot Topics in Networks. 2013:19.

43. Bianco A, Birke R, Giraudo L, Palacin M. Openflow switching: Data plane performance. Communications (ICC), 2010 IEEE International Conference on. 2010:1-5.

44. Luo Y, Cascon P, Murray E, Ortega J. Accelerating OpenFlow switching with network processors. Proceedings of the 5th ACM/IEEE Symposium on Architectures for Networking and Communications Systems. 2009:70-1.

45. Jeyakumar V, Alizadeh M, Kim C, Mazières D. Tiny packet programs for low-latency network control and monitoring. Proceedings of the Twelfth ACM Workshop on Hot Topics in Networks. 2013:8.

46. Tanyingyong V, Hidell M, Sjödin P. Improving pc-based openflow switching performance. Proceedings of the 6th ACM/IEEE Symposium on Architectures for Networking and Communications Systems. 2010:13.
47. Kogan K, Nikolenko S, Culhane W, Eugster P, Ruan E. Towards efficient implementation of packet classifiers in SDN/OpenFlow. Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking. 2013:153-4.
48. Dobrescu M, Egi N, Argyraki K, Chun B-G, Fall K, Iannaccone G, et al. RouteBricks: exploiting parallelism to scale software routers. Proceedings of the ACM SIGOPS 22nd symposium on Operating systems principles. 2009:15-28.
49. Han S, Jang K, Park K, Moon S. PacketShader: a GPU-accelerated software router. ACM SIGCOMM Computer Communication Review. 2011;41(4):195-206.
50. Nakao A, editor FLARE: Open deeply programmable switch. The 16th GENI Engineering Conference; 2012.
51. Qi Y, Fong J, Jiang W, Xu B, Li J, Prasanna V. Multi-dimensional packet classification on FPGA: 100 Gbps and beyond. Field-Programmable Technology (FPT), 2010 International Conference on. 2010:241-8.
52. ANDO S, NAKAO A. L7Classifier: Packet Classification applying Regular Expression to Packet Payload. Technical Committee on Communication Quality. 2014;113(405):35-40.
53. Kohler E, Morris R, Chen B, Jannotti J, Kaashoek MF. The Click modular router. ACM Transactions on Computer Systems (TOCS). 2000;18(3):263-97.
54. Ahmed M, Huici F, Jahanpanah A. Enabling dynamic network processing with clickos. Proceedings of the ACM SIGCOMM 2012 conference on Applications, technologies, architectures, and protocols for computer communication. 2012:293-4.
55. Nakao A. VNode: A deeply programmable network testbed through network virtualization. 3rd IEICE Technical Committee on Network Virtualization. 2012.
56. Bianchi G, Bonola M, Capone A, Cascone C. OpenState: programming platform-independent stateful openflow applications inside the switch. ACM SIGCOMM Computer Communication Review. 2014;44(2):44-51.
57. Gill H, Lin D, Sarna L, Mead R, Lee KC, Loo BT. SP4: scalable programmable packet processing platform. Proceedings of the ACM SIGCOMM 2012 conference on Applications, technologies, architectures, and protocols for computer communication. 2012:75-6.
58. Farhadi H, Du P, Nakao A. User-defined actions for SDN. Proceedings of The Ninth International Conference on Future Internet Technologies. 2014:3.
59. Kim N, Yoo J-Y, Kim NL, Kim J. A programmable networking switch node with in-network processing support. Communications (ICC), 2012 IEEE International Conference on. 2012:6611-5.
60. Nishida Y, Nakao A. In-network ad-targeting through wifi ap virtualization. Communications and Information Technologies (ISCIT), 2012 International Symposium on. 2012:1092-7.

61. Lee J, Tourrilhes J, Sharma P, Banerjee S. No more middlebox: integrate processing into network. ACM SIGCOMM Computer Communication Review. 2011;41(4):459-60.

62. Shimamura M, Ikenaga T, Tsuru M. A design and prototyping of in-network processing platform to enable adaptive network services. IEICE TRANSACTIONS on Information and Systems. 2013;96(2):238-48.

63. Benton K, Camp LJ, Small C. Openflow vulnerability assessment. Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking. 2013:151-2.

64. Shin S, Porras PA, Yegneswaran V, Fong MW, Gu G, Tyson M, editors. FRESCO: Modular Composable Security Services for Software-Defined Networks. NDSS; 2013.

65. Jang K, Han S, Han S, Moon SB, Park K, editors. SSLShader: Cheap SSL Acceleration with Commodity Processors. NSDI; 2011.

66. Suzuki K, Sonoda K, Tomizawa N, Yakuwa Y, Uchida T, Higuchi Y, et al. A survey on OpenFlow technologies. IEICE Transactions on Communications. 2014;97(2):375-86.

67. Consortium OS. OpenFlow Switch Consortium, "OpenFlow Switch Specification Version 1.0.

0":

December;

2016.

Available

from:

https://www.opennetworking.org/images/stories/downloads/sdn-resources/onf-

specifications/openflow/openflow-spec-v1.1.0.pdf.

68. Agarwal S, Kodialam M, Lakshman T. Traffic engineering in software defined networks. INFOCOM, 2013 Proceedings IEEE. 2013:2211-9.

69. OpenFlow Switch Consortium, "OpenFlow Switch Specification Version 1.2. 0.", 2016. Available from: https://www.opennetworking.org/images/stories/downloads/sdn-resources/onfspecifications/openflow/openflow-spec-v1.2.0.pdf.

70. OpenFlow Switch Consortium, "OpenFlow Switch Specification Version 1.3. 0." 2016. Available from: https://www.opennetworking.org/images/stories/downloads/sdn-resources/onfspecifications/openflow/openflow-spec-v1.3.0.pdf, .

71. OpenFlow Switch Consortium, "OpenFlow Switch Specification Version 1.4. 0." 2016. Available from: https://www.opennetworking.org/images/stories/downloads/sdn-resources/onfspecifications/openflow/openflow-spec-v1.4.0.pdf.

72. OpenFlow Switch Consortium, "OpenFlow Switch Specification Version 1.5. 0.", 2016. Available from: https://www.opennetworking.org/images/stories/downloads/sdn-resources/onfspecifications/openflow/openflow-switch-v1.5.0.noipr.pdf.

73. Pfaff B, Davie B. The Open vSwitch Database Management Protocol 2013 [updated December, 2013]. Available from: https://tools.ietf.org/html/rfc7047.

74. Wang W, Haas R, Salim JH, Doria A, Khosravi HM. Forwarding and Control Element Separation (ForCES) Protocol Specification 2010 [updated March, 2010]. Available from: https://tools.ietf.org/html/rfc5810.

75. Song H. Protocol-oblivious forwarding: Unleash the power of SDN through a future-proof forwarding plane. Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking. 2013:127-32.

76. Smith M, Dvorkin M, Laribi Y, Pandey V, Garg P, Weidenbacher N. OpFlex control protocol 2014. Available from: https://datatracker.ietf.org/doc/draft-smith-opflex/.

77. ONF, “OpenFlow management and configuration protocol (OF-Config 1.1.1),” March 2014. [Online]. Available: https://www.opennetworking.org/images/stories/downloads/sdnresources/onfspecifications/openflow-config/of-config-1-1-1.pdf.

78. Sune M, Alvarez V, Jungel T, Toseef U, Pentikousis K. An OpenFlow implementation for network processors. Software Defined Networks (EWSDN), 2014 Third European Workshop on. 2014:123-4.

79. Parniewicz D, Doriguzzi Corin R, Ogrodowczyk L, Rashidi Fard M, Matias J, Gerola M, et al. Design and implementation of an openflow hardware abstraction layer. Proceedings of the 2014 ACM SIGCOMM workshop on Distributed cloud computing: ACM; 2014. p. 71-6.

80. Belter B, Binczewski A, Dombek K, Juszczyk A, Ogrodowczyk L, Parniewicz D, et al. Programmable abstraction of datapath. Software Defined Networks (EWSDN), 2014 Third European Workshop on. 2014:7-12.

81. Crockford D. The application/json Media Type for JavaScript Object Notation (JSON) 2006 [updated July, 2006]. Available from: https://tools.ietf.org/html/rfc4627.

82. Apache Thrift - Home: tree docs; 2016. Available from: http://thrift.apache.org/.

83. Pan H, Guan H, Liu J, Ding W, Lin C, Xie G. The FlowAdapter: Enable flexible multi-table processing on legacy hardware. Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking. 2013:85-90.

84. Kang N, Reich J, Rexford J, Walker D. Policy transformation in software defined networks. Proceedings of the ACM SIGCOMM 2012 conference on Applications, technologies, architectures, and protocols for computer communication. 2012:309-10.

85. Kanizo Y, Hay D, Keslassy I. Palette: Distributing tables in software-defined networks. INFOCOM, 2013 Proceedings IEEE. 2013:545-9.

86. Vanbever L, Reich J, Benson T, Foster N, Rexford J. Hotswap: correct and efficient controller upgrades for software-defined networks. Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking. 2013:133-8.

87. Kang N, Liu Z, Rexford J, Walker D. Optimizing the one big switch abstraction in softwaredefined networks. Proceedings of the ninth ACM conference on Emerging networking experiments and technologies. 2013:13-24.

88. Open

Network

Operating

System

2016.

Available

http://www.slideshare.net/umeshkrishnaswamy/open-network-operating-system.

from:

89. Koponen T, Casado M, Gude N, Stribling J, Poutievski L, Zhu M, et al. Onix: A Distributed Control Platform for Large-scale Production Networks. OSDI. 2010;10:1-6.
90. Tootoonchian A, Ganjali Y. HyperFlow: A distributed control plane for OpenFlow. Proceedings of the 2010 internet network management conference on Research on enterprise networking. 2010:3-.
91. Perešíni P, Kuzniar M, Vasić N, Canini M, Kostiū D. OF. CPP: Consistent packet processing for OpenFlow. Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking. 2013:97-102.
92. Katta NP, Rexford J, Walker D. Incremental consistent updates. Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking. 2013:49-54.
93. Mizrahi T, Moses Y. Time-based updates in software defined networks. Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking. 2013:163-4.
94. Curtis AR, Mogul JC, Tourrilhes J, Yalagandula P, Sharma P, Banerjee S. DevoFlow: Scaling flow management for high-performance networks. ACM SIGCOMM Computer Communication Review. 2011;41(4):254-65.
95. Yu M, Rexford J, Freedman MJ, Wang J. Scalable flow-based networking with DIFANE. ACM SIGCOMM Computer Communication Review. 2011;41(4):351-62.
96. Hassas Yeganeh S, Ganjali Y. Kandoo: a framework for efficient and scalable offloading of control applications. Proceedings of the first workshop on Hot topics in software defined networks. 2012:19-24.
97. Othman M, Okamura K. Hybrid control model for flow-based networks. Computer Software and Applications Conference Workshops (COMPSACW), 2013 IEEE 37th Annual. 2013:765-70.
98. Bozakov Z, Papadimitriou P. Autoslice: automated and scalable slicing for software-defined networks. Proceedings of the 2012 ACM conference on CoNEXT student workshop. 2012:3-4.
99. Drutskoy D, Keller E, Rexford J. Scalable network virtualization in software-defined networks. Internet Computing, IEEE. 2013;17(2):20-7.
100. Wang R, Butnariu D, Rexford J. OpenFlow-based server load balancing gone wild. 2011:11-2.
101. Yeganeh SH, Tootoonchian A, Ganjali Y. On scalability of software-defined networking. Communications Magazine, IEEE. 2013;51(2):136-41.
102. Mogul JC, Congdon P. Hey, you darned counters!: get off my ASIC! Proceedings of the first workshop on Hot topics in software defined networks. 2012:25-30.
103. Lu G, Miao R, Xiong Y, Guo C. Using cpu as a traffic co-processing unit in commodity switches. Proceedings of the first workshop on Hot topics in software defined networks. 2012:31-6.
104. Kissel E, Fernandes G, Jaffee M, Swany M, Zhang M. Driving software defined networks with xsp. Communications (ICC), 2012 IEEE International Conference on. 2012:6616-21.

105. Monsanto C, Reich J, Foster N, Rexford J, Walker D. Composing Software Defined Networks. NSDI2013. p. 1-13.

106. Kuźniar M, Perešíni P, Vasić N, Canini M, Kostić D. Automatic failure recovery for softwaredefined networks. Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking. 2013:159-60.

107. Kozat UC, Liang G, Kokten K. Verifying forwarding plane connectivity and locating link failures using static rules in software defined networks. Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking. 2013:157-8.

108. Kempf J, Bellagamba E, Kern A, Jocha D, Takács A, Sköldström P. Scalable fault management for OpenFlow. Communications (ICC), 2012 IEEE International Conference on. 2012:6606-10.

109. Williams D, Jamjoom H. Cementing high availability in OpenFlow with RuleBricks. Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking. 2013:139-44.

110. Wen X, Chen Y, Hu C, Shi C, Wang Y. Towards a secure controller platform for openflow applications. Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking. 2013:171-2.

111. Porras P, Shin S, Yegneswaran V, Fong M, Tyson M, Gu G. A security enforcement kernel for OpenFlow networks. Proceedings of the first workshop on Hot topics in software defined networks. 2012:121-6.

112. Shin S, Gu G. Attacking software-defined networks: A first feasibility study. Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking. 2013:165-6.

113. Akhunzada A, Gani A, Anuar NB, Abdelaziz A, Khan MK, Hayat A, et al. Secure and dependable software defined networks. Journal of Network and Computer Applications. 2015.

114. Heller B, Sherwood R, McKeown N. The controller placement problem. Proceedings of the first workshop on Hot topics in software defined networks. 2012:7-12.

115. Phemius K, Bouet M. Openflow: Why latency does matter. Integrated Network Management (IM 2013), 2013 IFIP/IEEE International Symposium on. 2013:680-3.

116. Hu Y, Wang W, Gong X, Que X, Cheng S. On reliability-optimized controller placement for Software-Defined Networks. Communications, China. 2014;11(2):38-54.

117. Gude N, Koponen T, Pettit J, Pfaff B, Casado M, McKeown N, et al. NOX: towards an operating system for networks. ACM SIGCOMM Computer Communication Review. 2008;38(3):10510.

118. Mccauley J. Pox: A python-based openflow controller 2016. Available from: http://www.noxrepo.org/pox/about-pox/.

119. SNAC

2016.

Available

from:

https://github.com/bigswitch/snac-

nox/blob/master/src/include/openflow/openflow/nicira-ext.h.

120. Ng E. Maestro: A System for Scalable OpenFlow Control. TSEN Maestro-Technical Report TR10-08, Rice University, 2010.

121. Ryu, An Operating System for Software Defined Network. 2016. Available from: http://osrg.github.io/ryu/.

122. Mul 2016. Available from: http://sourceforge.net/p/mul/wiki/Home/.

123. Home

-

Beacon

-

Confluence

https://openflow.stanford.edu/display/Beacon/Home.

2016.

Available

from:

124. IRIS: The Recursive SDN-Openflow Controller by ETRI 2016. Available from: http://openiris.etri.re.kr/.

125. GlobalNOC 2016. Available from: http://globalnoc.iu.edu/sdn/oess.html.

126. jaxon 2016. Available from: http://jaxon.onuos.org/.

127. NodeFlow: An OpenFlow Controller Node Style | garyberger.net 2016. Available from: http://garyberger.net/?p=537.

128. Sherwood R, Chan M, Covington A, Gibb G, Flajslik M, Handigol N, et al. Carving research slices out of your production networks with OpenFlow. ACM SIGCOMM Computer Communication Review. 2010;40(1):129-30.

129. Nascimento MR, Rothenberg CE, Salvador MR, Corrêa CN, de Lucena SC, Magalhães MF. Virtual routers as a service: the routeflow approach leveraging software-defined networks. Proceedings of the 6th International Conference on Future Internet Technologies. 2011:34-7.

130. NEC Global 2016. Available from: http://www.nec.com/.

131. Team M. Mininet: An Instant Virtual Network on your Laptop (or other PC) - Mininet 2016. Available from: http://mininet.org/.

132. Handigol N, Heller B, Jeyakumar V, Lantz B, McKeown N. Reproducible network experiments using container-based emulation. Proceedings of the 8th international conference on Emerging networking experiments and technologies. 2012:253-64.

133. Antonenko V, Smelyanskiy R. Global network modelling based on mininet approach. Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking. 2013:145-6.

134. Teixeira J, Antichi G, Adami D, Del Chiaro A, Giordano S, Santos A. Datacenter in a box: test your SDN cloud-datacenter controller at home. Software Defined Networks (EWSDN), 2013 Second European Workshop on. 2013:99-104.

135. ns-3 2016. Available from: https://www.nsnam.org/.

136. Klein D, Jarschel M. An OpenFlow extension for the OMNeT++ INET framework. Proceedings of the 6th International ICST Conference on Simulation Tools and Techniques: ICST (Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering); 2013. p. 322-9.

137. Varga A, Hornig R. An overview of the OMNeT++ simulation environment. Proceedings of the 1st international conference on Simulation tools and techniques for communications, networks and systems & workshops: ICST (Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering); 2008. p. 60.

138. :::EstiNet Technologies 2016. Available from: http://www.estinet.com/products.php.

139. Trema 2016. Available from: https://trema.github.io/trema/.

140. MirageOS 2015. Available from: https://mirage.io/.

141. STS by ucb-sts 2016. Available from: http://ucb-sts.github.io/sts/.

142. Canini M, Venzano D, Peresini P, Kostic D, Rexford J. A NICE Way to Test OpenFlow Applications. NSDI. 2012;12:127-40.

143. Oflops - Cbench 2016. Available from: http://archive.openflow.org/wk/index.php/Oflops.

144. Rotsos C, Sarrar N, Uhlig S, Sherwood R, Moore AW. OFLOPS: An open framework for OpenFlow switch evaluation. Passive and Active Measurement. 2012:85-95.

145. OFTestTutorial/

-

OpenFlow

Wiki

http://archive.openflow.org/wk/index.php/OFTestTutorial/.

2016.

Available

from:

146. Wundsam A, Levin D, Seetharaman S, Feldmann A, editors. OFRewind: Enabling Record and Replay Troubleshooting for Networks. USENIX Annual Technical Conference; 2011.

147. Khurshid A, Zhou W, Caesar M, Godfrey P. Veriflow: verifying network-wide invariants in real time. ACM SIGCOMM Computer Communication Review. 2012;42(4):467-72.

148. Al-Shaer E, Al-Haj S. FlowChecker: Configuration analysis and verification of federated OpenFlow infrastructures. Proceedings of the 3rd ACM workshop on Assurable and usable security configuration: ACM; 2010. p. 37-44.

149. Kazemian P, Varghese G, McKeown N. Header Space Analysis: Static Checking for Networks. NSDI. 2012:113-26.

150. Zeng H, Kazemian P, Varghese G, McKeown N. Automatic test packet generation. Proceedings of the 8th international conference on Emerging networking experiments and technologies: ACM; 2012. p. 241-52.

151. Handigol N, Heller B, Jeyakumar V, Maziéres D, McKeown N. Where is the debugger for my software-defined network? Proceedings of the first workshop on Hot topics in software defined networks: ACM; 2012. p. 55-60.

152. Scott RC, Wundsam A, Zarifis K, Shenker S. What, where, and when: Software fault localization for sdn. EECS Department, University of California, Berkeley, Tech Rep UCB/EECS-2012178. 2012.

153. OpenFlow support in PlanetLab | PlanetLabEurope 2016. Available from: http://www.planet-lab.eu/openflow/.

154. Ofelia - About OFELIA 2016. Available from: http://www.fp7-ofelia.eu/about-ofelia/.

155. Ciuffo L. FIBRE 2016. Available from: http://www.fibre-ict.eu/.

156. Internet2 2016. Available from: http://www.internet2.edu/.

157. JGN-X Website 2016. Available from: http://www.jgn.nict.go.jp/english/index.html.

158. SURF

|

SURFnet

SDN

testbed

2016.

Available

from:

https://www.surf.nl/en/innovationprojects/the-open-programmable-network/software-defined-

networking/surfnet-sdn-testbed/index.html.

159. The California OpenFlow Testbed Network 2016. Available from: http://cenic.org/network/cotn.

160. Schwarz MF, Rojas M, Miers CC, Redigolo FF, Carvalho TC. Emulated and software defined networking convergence. Integrated Network Management (IM 2013), 2013 IFIP/IEEE International Symposium on. 2013:700-3.

161. GENI 2016. Available from: http://www.geni.net/.

162. Orbit. 2016.

163. Voellmy A, Wang J, Yang YR, Ford B, Hudak P. Maple: Simplifying SDN programming using algorithmic policies. ACM SIGCOMM Computer Communication Review: ACM; 2013. p. 87-98.

164. Reitblatt M, Canini M, Guha A, Foster N. Fattire: Declarative fault tolerance for softwaredefined networks. Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking: ACM; 2013. p. 109-14.

165. Hinrichs TL, Gude NS, Casado M, Mitchell JC, Shenker S. Practical declarative network management. Proceedings of the 1st ACM workshop on Research on enterprise networking: ACM; 2009. p. 1-10.

166. Voellmy A, Kim H, Feamster N. Procera: a language for high-level reactive network control. Proceedings of the first workshop on Hot topics in software defined networks: ACM; 2012. p. 43-8.

167. Foster N, Harrison R, Freedman MJ, Monsanto C, Rexford J, Story A, et al. Frenetic: A network programming language. ACM SIGPLAN Notices. 2011;46(9):279-91.

168. Foster N, Freedman MJ, Harrison R, Rexford J, Meola ML, Walker D. Frenetic: a high-level language for OpenFlow networks. Proceedings of the Workshop on Programmable Routers for Extensible Services of Tomorrow: ACM; 2010. p. 6.

169. ONF Overview - Open Networking Foundation 2016. Available from: https://www.opennetworking.org/about/onf-overview.

170. Internet Engineering Task Force (IETF) 2016. Available from: https://www.ietf.org/.

171. Hares S, Nadeau T, Halpern J, Ward D, Atlas A. An Architecture for the Interface to the Routing System 2013. Available from: https://tools.ietf.org/html/draft-ietf-i2rs-architecture-05.

172. Tsou T, Shi X, Huang J, Wang Z, Yin X. Analysis of Comparisons between OpenFlow and ForCES 2012 [updated 2012-03-12]. Available from: https://tools.ietf.org/html/draft-wang-forcescompare-openflow-forces-00.
173. Active IRTF research groups 2016. Available from: https://datatracker.ietf.org/rg/.
174. IRTF Software-Defined Networking Research Group (SDNRG) 2016. Available from: https://irtf.org/sdnrg.
175. ITU Telecommunicatio 2016. Available from: http://www.itu.int/en/ITUT/Pages/default.aspx/.
176. Joint Coordination Activity on Software-Defined Networking (JCA-SDN) 2016. Available from: http://www.itu.int/en/ITU-T/jca/sdn/Pages/default.aspx.
177. MEF 2016. Available from: http://www.mef.net/.
178. ETSI - European Telecommunications Standards Institute 2016. Available from: http://www.etsi.org/.
179. IEEE 2016. Available from: https://www.ieee.org/index.html.
180. Home - IEEE Software Defined Networks 2016. Available from: http://sdn.ieee.org/.
181. The OpenDaylight Platform | OpenDaylight 2016. Available from: https://www.opendaylight.org/.
182. Home » OpenStack Open Source Cloud Computing Software: Code; 2016. Available from: http://www.openstack.org/.
183. Apache Cloudstack 2016. Available from: http://cloudstack.apache.org/.
184. Handigol N, Flajslik M, Seetharaman S, McKeown N, Johari R. Aster* x: Load-balancing as a network primitive. 9th GENI Engineering Conference (Plenary)2010. p. 1-2.
185. Handigol N, Seetharaman S, Flajslik M, McKeown N, Johari R. Plug-n-Serve: Load-balancing web traffic using OpenFlow. ACM SIGCOMM Demo. 2009;4(5):6.
186. Qazi ZA, Tu C-C, Chiang L, Miao R, Sekar V, Yu M. SIMPLE-fying middlebox policy enforcement using SDN. ACM SIGCOMM Computer Communication Review: ACM; 2013. p. 27-38.
187. Macapuna CA, othenberg CE, Magalh es McF. In-packet Bloom filter based data center networking with distributed OpenFlow controllers. GLOBECOM Workshops (GC Wkshps), 2010 IEEE. 2010:584-8.
188. Liu Y, Li Y, Wang Y, Yuan J. Optimal scheduling for multi-flow update in Software-Defined Networks. Journal of Network and Computer Applications. 2015;54:11-9.
189. Civanlar S, Parlakisik M, Gorkemli B, Kaytaz B, Onem E. A qos-enabled openflow environment for scalable video streaming. GLOBECOM Workshops (GC Wkshps), 2010 IEEE. 2010:351-6.

190. Egilmez HE, Dane ST, Bagci KT. OpenQoS: An OpenFlow controller design for multimedia delivery with end-to-end Quality of Service over Software-Defined Networks. Signal & Information Processing Association Annual Summit and Conference (APSIPA ASC), 2012 Asia-Pacific: IEEE; 2012. p. 1-8.
191. Kim W, Sharma P, Lee J, Banerjee S, Tourrilhes J, Lee S-J, et al. Automated and scalable QoS control for network convergence. Proc INM/WREN. 2010;10:1-.
192. Owens H, Durresi A. Video over software-defined networking (vsdn). Network-Based Information Systems (NBiS), 2013 16th International Conference on: IEEE; 2013. p. 44-51.
193. Sharma P, Banerjee S, Tandel S, Aguiar R, Amorim R, Pinheiro D. Enhancing network management frameworks with SDN-like control. Integrated Network Management (IM 2013), 2013 IFIP/IEEE International Symposium on: IEEE; 2013. p. 688-91.
194. Kim H, Feamster N. Improving network management with software defined networking. Communications Magazine, IEEE. 2013;51(2):114-9.
195. Bennesby R, Fonseca P, Mota E, Passito A. An inter-as routing component for softwaredefined networks. Network Operations and Management Symposium (NOMS), 2012 IEEE. 2012:13845.
196. Shirali-Shahreza S, Ganjali Y. Flexam: Flexible sampling extension for monitoring and security applications in openflow. Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking: ACM; 2013. p. 167-8.
197. Takagiwa K, Ishida S, Nishi H. SoR-based programmable network for future software-defined network. Computer Software and Applications Conference (COMPSAC), 2013 IEEE 37th Annual: IEEE; 2013. p. 165-6.
198. Qazi ZA, Lee J, Jin T, Bellala G, Arndt M, Noubir G. Application-awareness in SDN. ACM SIGCOMM Computer Communication Review: ACM; 2013. p. 487-8.
199. Yu M, Jose L, Miao R. Software Defined Traffic Measurement with OpenSketch. NSDI. 2013;13:29-42.
200. Fayazbakhsh SK, Sekar V, Yu M, Mogul JC. Flowtags: Enforcing network-wide policies in the presence of dynamic middlebox actions. Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking: ACM; 2013. p. 19-24.
201. Sekar V, Egi N, Ratnasamy S, Reiter MK, Shi G. Design and implementation of a consolidated middlebox architecture. Presented as part of the 9th USENIX Symposium on Networked Systems Design and Implementation (NSDI 12). 2012:323-36.
202. Gember A, Prabhu P, Ghadiyali Z, Akella A. Toward software-defined middlebox networking. Proceedings of the 11th ACM Workshop on Hot Topics in Networks: ACM; 2012. p. 7-12.
203. Jafarian JH, Al-Shaer E, Duan Q. Openflow random host mutation: transparent moving target defense using software defined networking. Proceedings of the first workshop on Hot topics in software defined networks: ACM; 2012. p. 127-32.

204. Mehdi SA, Khalid J, Khayam SA. Revisiting traffic anomaly detection using software defined networking. Recent Advances in Intrusion Detection. 2011:161-80.
205. Kim H, Reich J, Gupta A, Shahbaz M, Feamster N, Clark R. Kinetic: Verifiable dynamic network control. 12th USENIX Symposium on Networked Systems Design and Implementation (NSDI 15). 2015:59-72.
206. Suenaga M, Otani M, Tanaka H, Watanabe K. Opengate on OpenFlow: system outline. 2012 Fourth International Conference on Intelligent Networking and Collaborative Systems2012.
207. Braga R, Mota E, Passito A. Lightweight DDoS flooding attack detection using NOX/OpenFlow. Local Computer Networks (LCN), 2010 IEEE 35th Conference on. 2010:408-15.
208. Ghorbani S, Caesar M. Walk the line: consistent network updates with bandwidth guarantees. Proceedings of the first workshop on Hot topics in software defined networks: ACM; 2012. p. 67-72.
209. Keller E, Ghorbani S, Caesar M, Rexford J. Live migration of an entire network (and its hosts). Proceedings of the 11th ACM Workshop on Hot Topics in Networks: ACM; 2012. p. 109-14.
210. Nakagawa Y, Hyoudou K, Shimizu T. A management method of IP multicast in overlay networks using openflow. Proceedings of the first workshop on Hot topics in software defined networks: ACM; 2012. p. 91-6.
211. Choi Y. Implementation of Content-oriented Networking Architecture (CONA): A Focus on DDoS Countermeasure.
212. Suresh L, Schulz-Zander J, Merz R, Feldmann A, Vazao T. Towards programmable enterprise WLANS with Odin. Proceedings of the first workshop on Hot topics in software defined networks: ACM; 2012. p. 115-20.
213. Bansal M, Mehlman J, Katti S, Levis P. Openradio: a programmable wireless dataplane. Proceedings of the first workshop on Hot topics in software defined networks: ACM; 2012. p. 10914.
214. Yap K-K, Kobayashi M, Sherwood R, Huang T-Y, Chan M, Handigol N, et al. OpenRoads: Empowering research in mobile networks. ACM SIGCOMM Computer Communication Review2010. p. 125-6.
215. Yap K-K, Sherwood R, Kobayashi M, Huang T-Y, Chan M, Handigol N, et al. Blueprint for introducing innovation into wireless mobile networks. Proceedings of the second ACM SIGCOMM workshop on Virtualized infrastructure systems and architectures: ACM; 2010. p. 25-32.
216. Dely P, Kassler A, Bayer N. Openflow for wireless mesh networks. Computer Communications and Networks (ICCCN), 2011 Proceedings of 20th International Conference on: IEEE; 2011. p. 1-6.
217. Gudipati A, Perry D, Li LE, Katti S. SoftRAN: Software defined radio access network. Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking: ACM; 2013. p. 25-30.

218. Yang M, Li Y, Jin D, Su L, Ma S, Zeng L. OpenRAN: a software-defined ran architecture via virtualization. ACM SIGCOMM computer communication review: ACM; 2013. p. 549-50.
219. Li LE, Mao ZM, Rexford J. Toward software-defined cellular networks. Software Defined Networking (EWSDN), 2012 European Workshop on: IEEE; 2012. p. 7-12.
220. Luo T, Tan H-P, Quek TQ. Sensor OpenFlow: Enabling software-defined wireless sensor networks. Communications Letters, IEEE. 2012;16(11):1896-9.
221. Ghaffari A. Congestion control mechanisms in Wireless Sensor networks: A survey. Journal of Network and Computer Applications. 2015;52:101-15.
222. Wang Y, Chen H, Wu X, Shu L. An energy-efficient SDN based sleep scheduling algorithm for WSNs. Journal of Network and Computer Applications. 2016;59:39-45.
223. Guimaraes C, Corujo D, Aguiar RL, Silva F, Frosi P. Empowering software defined wireless Networks through Media Independent Handover management. Global Communications Conference (GLOBECOM), 2013 IEEE: IEEE; 2013. p. 2204-9.
224. Baskett P, Shang Y, Zeng W, Guttersohn B. SDNAN: Software-defined networking in ad hoc networks of smartphones. Consumer Communications and Networking Conference (CCNC), 2013 IEEE: IEEE; 2013. p. 861-2.
225. Trivisonno , Guerzoni , Vaishnavi I, Soldani D. SDN‐based 5G mobile networks: architecture, functions, procedures and backward compatibility. Transactions on Emerging Telecommunications Technologies. 2015;26(1):82-92.
226. Brief OS. OpenFlow™-Enabled Mobile and Wireless Networks. September; 2013.
227. Jin X, Li LE, Vanbever L, Rexford J. Softcell: Scalable and flexible cellular core network architecture. Proceedings of the ninth ACM conference on Emerging networking experiments and technologies: ACM; 2013. p. 163-74.
228. Akihiro Nakao, “WiVi: Wi-Fi Network Virtualization Infrastructure.” 2016. Available from: http://www.ieice.org/∼nv/NV-Sept\_10-nakao.pdf.
229. Yang M, Li Y, Jin D, Zeng L, Wu X, Vasilakos AV. Software-Defined and virtualized future mobile and wireless networks: a survey. Mobile Networks and Applications. 2014;20(1):4-18.
230. Open Networking Foundation - Open Networking Foundation 2016. Available from: https://www.opennetworking.org/index.php?option=com_content&view=category&layout=blog&id =39&Itemid=152〈=en/.
231. Gringeri S, Bitar N, Xia TJ. Extending software defined network principles to include optical transport. Communications Magazine, IEEE. 2013;51(3):32-40.
232. Wang G, Ng T, Shaikh A. Programming your network at run-time for big data applications. Proceedings of the first workshop on Hot topics in software defined networks: ACM; 2012. p. 103-8.

233. Shirazipour M, John W, Kempf J, Green H, Tatipamula M. Realizing packet-optical integration with SDN and OpenFlow 1.1 extensions. Communications (ICC), 2012 IEEE International Conference on: IEEE; 2012. p. 6633-7.
234. Azodolmolky S, Nejabati R, Escalona E, Jayakumar R, Efstathiou N, Simeonidou D. Integrated OpenFlow–GMPLS control plane: an overlay model for software defined packet over optical networks. Optics express. 2011;19(26):B421-B8.
235. Zhang J, Zhang J, Zhao Y, Yang H, Yu X, Wang L, et al. Experimental demonstration of OpenFlow-based control plane for elastic lightpath provisioning in Flexi-Grid optical networks. Optics express. 2013;21(2):1364-73.
236. Patel A, Ji P, Wang T. Qos-aware optical burst switching in openflow based software-defined optical networks. Optical Network Design and Modeling (ONDM), 2013 17th International Conference on: IEEE; 2013. p. 275-80.
237. Gudla VR, Das S, Shastri A, Parulkar G, McKeown N, Kazovsky L, et al. Experimental demonstration of OpenFlow control of packet and circuit switches. Optical Fiber Communication Conference: Optical Society of America; 2010. p. OTuG2.
238. Liu L, Tsuritani T, Morita I, Guo H, Wu J. OpenFlow-based wavelength path control in transparent optical networks: a proof-of-concept demonstration. European Conference and Exposition on Optical Communications: Optical Society of America; 2011. p. Tu. 5. K. 2.
239. Sadasivarao A, Syed S, Pan P, Liou C, Lake A, Guok C, et al. Open transport switch: a software defined networking architecture for transport networks. Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking: ACM; 2013. p. 115-20.
240. Mortier R, Rodden T, Lodge T, McAuley D, Rotsos C, Moore AW, et al. Control and understanding: Owning your home network. Communication Systems and Networks (COMSNETS), 2012 Fourth International Conference on: IEEE; 2012. p. 1-10.
241. Calvert KL, Edwards WK, Feamster N, Grinter RE, Deng Y, Zhou X. Instrumenting home networks. ACM SIGCOMM Computer Communication Review. 2011;41(1):84-9.
242. Heller B, Seetharaman S, Mahadevan P, Yiakoumis Y, Sharma P, Banerjee S, et al. ElasticTree: Saving Energy in Data Center Networks. NSDI. 2010;10:249-64.
243. Kannan K, Banerjee S. Scissors: Dealing with header redundancies in data centers through SDN. Proceedings of the 8th International Conference on Network and Service Management: International Federation for Information Processing; 2012. p. 295-301.
244. Mann V, Kannan K, Vishnoi A, Iyer AS. Ncp: Service replication in data centers through software defined networking. Integrated Network Management (IM 2013), 2013 IFIP/IEEE International Symposium on: IEEE; 2013. p. 561-7.
245. Jain S, Kumar A, Mandal S, Ong J, Poutievski L, Singh A, et al. B4: Experience with a globallydeployed software defined WAN. ACM SIGCOMM Computer Communication Review: ACM; 2013. p. 3-14.

246. Hong C-Y, Kandula S, Mahajan R, Zhang M, Gill V, Nanduri M, et al. Achieving high utilization with software-driven WAN. ACM SIGCOMM Computer Communication Review: ACM; 2013. p. 1526.
247. Liu Z, Li Y, Su L, Jin D, Zeng L. M2cloud: software defined multi-site data center network control framework for multi-tenant. ACM SIGCOMM Computer Communication Review: ACM; 2013. p. 517-8.
248. Benson T, Akella A, Shaikh A, Sahu S. CloudNaaS: a cloud networking platform for enterprise applications. Proceedings of the 2nd ACM Symposium on Cloud Computing. 2011:8.
249. Ahlgren B, Dannewitz C, Imbrenda C, Kutscher D, Ohlman B. A survey of information-centric networking. Communications Magazine, IEEE. 2012;50(7):26-36.
250. Melazzi NB, Detti A, Mazza G, Morabito G, Salsano S, Veltri L. An openflow-based testbed for information centric networking. Future Network & Mobile Summit (FutureNetw), 2012. 2012:1-9.
251. Salsano S, Blefari-Melazzi N, Detti A, Morabito G, Veltri L. Information centric networking over SDN and OpenFlow: Architectural aspects and experiments on the OFELIA testbed. Computer Networks. 2013;57(16):3207-21.
252. Veltri L, Morabito G, Salsano S, Blefari-Melazzi N, Detti A. Supporting information-centric functionality in software defined networks. Communications (ICC), 2012 IEEE International Conference on: IEEE; 2012. p. 6645-50.
253. Nguyen XN, Saucez D, Turletti T. Efficient caching in content-centric networks using OpenFlow. IEEE INFOCOM 2013 Workshop2013. p. 1-2.
254. Suh J, Jung H, Kwon T, Choi Y. C-flow: Content-oriented networking over openflow. Open Networking Summit. 2012.
255. Torres J, Ferraz L, Duarte O. Controller-based routing scheme for Named Data Network. Electrical Engineering Program, COPPE/UFRJ, Tech Rep. 2012.
256. Ren J, Pentikousis K, Westphal C, Liu W, Wang J. The Role of Virtualization in Informationcentric Network Deployment. E-LETTER.
257. Ooka A, Ata S, Koide T, Shimonishi H, Murata M. OpenFlow-based content-centric networking architecture and router implementation. Future Network and Mobile Summit (FutureNetworkSummit), 2013. 2013:1-10.
258. Farhad H, Lee H, Nakao A. Data Plane Programmability in SDN. Network Protocols (ICNP), 2014 IEEE 22nd International Conference on. 2014:583-8.
259. Risso F, Cerrato I. Customizing data-plane processing in edge routers. Software Defined Networking (EWSDN), 2012 European Workshop on. 2012:114-20.
260. Yu M, Wundsam A, Raju M. NOSIX: A lightweight portability layer for the SDN OS. ACM SIGCOMM Computer Communication Review. 2014;44(2):28-35.

261. Appelman M, de Boer M. Performance analysis of OpenFlow hardware. University of Amsterdam, Tech Rep. 2012.
262. Braun W, Menth M. Wildcard compression of inter-domain routing tables for OpenFlowbased software-defined networking. Software Defined Networks (EWSDN), 2014 Third European Workshop on: IEEE; 2014. p. 25-30.
263. Agarwal K, Dixon C, Rozner E, Carter J. Shadow MACs: Scalable label-switching for commodity ethernet. Proceedings of the third workshop on Hot topics in software defined networking: ACM; 2014. p. 157-62.
264. Stephens B. Designing scalable networks for future large datacenters: Rice University; 2012.
265. Bosshart P, Gibb G, Kim H-S, Varghese G, McKeown N, Izzard M, et al. Forwarding metamorphosis: Fast programmable match-action processing in hardware for SDN. ACM SIGCOMM Computer Communication Review: ACM; 2013. p. 99-110.
266. Park SH, Lee B, You J, Shin J, Kim T, Yang S. RAON: Recursive abstraction of OpenFlow networks. 2014 Third European Workshop on Software Defined Networks (EWSDN): IEEE; 2014. p. 115-6.
267. Yin H, Xie H, Tsou T, Lopez D, Aranda P, Sidi R. SDNi: A message exchange protocol for software defined networks (SDNs) across multiple domains. IETF draft, work in progress. 2012.
268. Kreutz D, Ramos F, Verissimo P. Towards secure and dependable software-defined networks. Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking: ACM; 2013. p. 55-60.
269. Botelho F, Ramos V, Manuel F, Kreutz D, Bessani A. On the feasibility of a consistent and fault-tolerant data store for SDNs. Software Defined Networks (EWSDN), 2013 Second European Workshop on: IEEE; 2013. p. 38-43.
270. Botelho F, Bessani A, Ramos F, Ferreira P. On the design of practical fault-tolerant SDN controllers. Software Defined Networks (EWSDN), 2014 Third European Workshop on: IEEE; 2014. p. 73-8.
271. Berde P, Gerola M, Hart J, Higuchi Y, Kobayashi M, Koide T, et al. ONOS: towards an open, distributed SDN OS. Proceedings of the third workshop on Hot topics in software defined networking: ACM; 2014. p. 1-6.
272. Kreutz D, Casimiro A, Pasin M. A trustworthy and resilient event broker for monitoring cloud infrastructures. Distributed Applications and Interoperable Systems. 2012:87-95.
273. Ferguson AD, Guha A, Liang C, Fonseca R, Krishnamurthi S. Participatory networking: An API for application control of SDNs. ACM SIGCOMM Computer Communication Review: ACM; 2013. p. 327-38.
274. Desai M, Nandagopal T. Coping with link failures in centralized control plane architectures. Communication Systems and Networks (COMSNETS), 2010 Second International Conference on: IEEE; 2010. p. 1-10.

275. Kim H, Santos JR, Turner Y, Schlansker M, Tourrilhes J, Feamster N. Coronet: Fault tolerance for software defined networks. Network Protocols (ICNP), 2012 20th IEEE International Conference on: IEEE; 2012. p. 1-2.
276. Jarschel M, Oechsner S, Schlosser D, Pries R, Goll S, Tran-Gia P. Modeling and performance evaluation of an OpenFlow architecture. Proceedings of the 23rd international teletraffic congress: International Teletraffic Congress; 2011. p. 1-7.
277. Pries R, Jarschel M, Goll S. On the usability of OpenFlow in data center environments. Communications (ICC), 2012 IEEE International Conference on: IEEE; 2012. p. 5533-7.
278. Feamster N, Rexford J, Zegura E. The road to SDN: an intellectual history of programmable networks. ACM SIGCOMM Computer Communication Review. 2014;44(2):87-98.
279. Lin P, Hart J, Krishnaswamy U, Murakami T, Kobayashi M, Al-Shabibi A, et al. Seamless Interworking of SDN and IP. ACM SIGCOMM Computer Communication Review: ACM; 2013. p. 4756.
280. Levin D, Canini M, Schmid S, Feldmann A. Incremental SDN deployment in enterprise networks. ACM SIGCOMM Computer Communication Review: ACM; 2013. p. 473-4.
281. Pentikousis K, Wang Y, Hu W. Mobileflow: Toward software-defined mobile networks. Communications Magazine, IEEE. 2013;51(7):44-53.
282. Naudts B, Kind M, Westphal F-J, Verbrugge S, Colle D, Pickavet M. Techno-economic analysis of software defined networking as architecture for the virtualization of a mobile network. Software Defined Networking (EWSDN), 2012 European Workshop on: IEEE; 2012. p. 67-72.
283. Skoldstrom P, John W. Implementation and evaluation of a carrier-grade OpenFlow virtualization scheme. Software Defined Networks (EWSDN), 2013 Second European Workshop on: IEEE; 2013. p. 75-80.
284. Koponen T, Amidon K, Balland P, Casado M, Chanda A, Fulton B, et al., editors. Network virtualization in multi-tenant datacenters. USENIX NSDI; 2014.
285. Anwer B, Benson T, Feamster N, Levin D, Rexford J. A slick control plane for network middleboxes. Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking: ACM; 2013. p. 147-8.
286. Media Release: Pacnet Offers First Pan-Asia Network-as-a-Service Architecture 2016. Available from: http://www.cmo.com.au/mediareleases/17701/pacnet-offers-first-pan-asianetwork-as-a-service/.
287. Belter B, Parniewicz D, Ogrodowczyk L, Binczewski A, Stroinski M, Fuentes V, et al. Hardware abstraction layer as an SDN-enabler for non-OpenFlow network equipment. Software Defined Networks (EWSDN), 2014 Third European Workshop on: IEEE; 2014. p. 117-8.
288. Clegg RG, Spencer J, Landa R, Thakur M, Mitchell J, Rio M. Pushing software defined networking to the access. Software Defined Networks (EWSDN), 2014 Third European Workshop on: IEEE; 2014. p. 31-6.

289. NTT DATA’s Advance in SDN Business Provides Highly-Flexible Control of Network by Software | NTT DATA Global. 2016.
290. Das S, Sharafat A, Parulkar G, McKeown N. MPLS with a simple OPEN control plane. Optical Fiber Communication Conference: Optical Society of America; 2011. p. OWP2.
291. Casado M, Koponen T, Shenker S, Tootoonchian A. Fabric: a retrospective on evolving SDN. Proceedings of the first workshop on Hot topics in software defined networks: ACM; 2012. p. 85-90.
292. Martinello M, Ribeiro M, de Oliveira REZ, de Angelis Vitoi R. Keyflow: a prototype for evolving SDN toward core network fabrics. Network, IEEE. 2014;28(2):12-9.
293. SDX: A software-defined internet exchange. 2016.
294. Stringer JP, Fu Q, Lorier C, Nelson R, Rothenberg CE. Cardigan: Deploying a distributed routing fabric. Proceedings of the second ACM SIGCOMM workshop on Hot topics in software defined networking: ACM; 2013. p. 169-70.
295. Racherla S, Cain D, Irwin S, Ljungstrøm P, Patil P, Tarenzio AM. Implementing IBM Software Defined Network for Virtual Environments: IBM Redbooks; 2014.
296. Li C, Brech B, Crowder S, Dias DM, Franke H, Hogstrom M, et al. Software defined environments: An introduction. IBM Journal of Research and Development. 2014;58(2/3):1: -: 11.
297. Arnold WC, Arroyo D, Segmuller W, Spreitzer M, Steinder M, Tantawi AN. Workload orchestration and optimization for software defined environments. IBM Journal of Research and Development. 2014;58(2/3):11: 1-: 2.
298. Dixon C, Olshefski D, Jain V, DeCusatis C, Felter W, Carter J, et al. Software defined networking to support the software defined environment. IBM Journal of Research and Development. 2014;58(2/3):3: 1-3: 14.
299. Alba A, Alatorre G, Bolik C, Corrao A, Clark T, Gopisetty S, et al. Efficient and agile storage management in software defined environments. IBM Journal of Research and Development. 2014;58(2/3):5: 1-5: 12.
300. IBM Software Defined Environments 2016. Available from: http://www935.ibm.com/services/us/en/it-services/systems/server-services/software-defined-environment/.

