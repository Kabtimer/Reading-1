2019 IEEE International Conference on Blockchain (Blockchain)

Contract-based Approach for Security Deposit
in Blockchain Networks with Shards
Jing Li∗, Tingting Liu†, Dusit Niyato‡, Ping Wang§, Jun Li† and Zhu Han∗ ∗Department of Electrical and Computer Engineering
University of Houston, Houston, Texas 77004-4005, USA Email: jli84@uh.edu, zhan2@uh.edu
†School of Electronic and Optical Engineering Nanjing University of Science and Technology, Nanjing, 210094, China
Email: liutt@njit.edu.cn, jun.li@njust.edu.cn ‡School of Computer Engineering
Nanyang Technological University, 639798, Singapore Email: dniyato@ntu.edu.sg
§Department of Electrical Engineering and Computer Science York University, Toronto ON M3J 1P3 Canada Email: pingw@yorku.ca

Abstract—As a decentralized ledger technology, blockchain is considered to be a potential solution for applications with highly concentrated management mechanism. However, most of the existing blockchain networks are employed with the hashpuzzle-solving consensus protocol, known as proof-of-work. The competition of solving the puzzle introduces high latency, which directly leads to a long transaction-processing time. One solution of this dilemma is to establish a blockchain network with shards. In this paper, we focus on the blockchain network with shards and adopt the security-deposit based consensus protocol, studying the problem of how to balance the security incentive and the economic incentive. Also, the inherent features of the blockchain, i.e., anonymity and decentralization, introduce the information asymmetric issue between the beacon chain and the participants. The contract theory is utilized to formulate the problem between them. As such, the optimal rewards related to the different types of validators can be obtained, as well as the reasonable deposits accordingly. Compared with the ﬁxed deposits, the ﬂexible deposits can provide enough economic incentive for the participants without losing the security incentives. Besides, the simulation results demonstrate that the contract theory approach is capable of maximizing the beacon chain’s utility and satisfying the incentive compatibility and individual rationality of the participants.
Index Terms—contract theory; security deposit; blockchain; sharding;
I. INTRODUCTION
Blockchain was ﬁrst proposed by Nakamoto in the Bitcoin project [1]. With the characteristics of decentralization, persistency, anonymity and auditability [2], it attracts signiﬁcant attentions from both academia and industry, and has been applied in many ﬁelds such as ﬁnance, transportation, Internet of Things (IoT) and so on [3]. Some other well-known platforms based on blockchain technology have been developed to date, e.g. Ethereum [4].
As a collection of various technologies, one of the most important concerns of blockchain is how to coordinate the permissionless participants. Also, as a public distributed ledger,

the blockchain has the problems of synchronization of transactions and the double-spending attacks. With all the considerations mentioned above, Nakamoto proposed a consensus protocol in [1], known as the Proof of Work (PoW). This protocol requires participants to solve a hash puzzle based on SHA-256 by brute-force. For each participant, it has to increase the hashrate to obtain an opportunity of winning the puzzle solving game. That means the computation power consumed by all the participants is tremendous, causing a huge waste of resources. To provide relief for this dilemma, Proof of Stake (PoS) is ﬁrstly proposed in the Bitcoin Forum [5], i.e., the leader selection relies on the number of bitcoins rather than the consumption of computational resources. Iddo et al. [6] point out the rationale behind the PoS that entities with stake are more suitable to retain the security in order to prevent losses caused by the system erodes. Based on the core idea of PoS, numerous frameworks with different puzzle designs have been proposed [7].
Despite being recognized as a promising approach to transaction management for permissionless networks, most existing blockchain schemes suffer from the problems of high latency and low throughput. Take the Ethereum as an example, its 1.0 version can only process 7-15 transactions per second [8]. Thus, more and more research is focused on achieving low latency and high throughput. One straightforward approach is to partition the entities into parallel sub-groups (i.e., committees), which are responsible for sustaining the sub-blocks (i.e., sharding). Sharding is a technology derived from the distributed database and can be applied to the blockchain network for realizing the scalability [9].
To further satisfy the requirements in the blockchain network with shards, protocols that support high-throughput such as [10] and [11] are proposed. Vitalik and Virgil proposed a PoS-based ﬁnality consensus protocol, i.e., Casper [12], which can be deployed atop any proposal mechanism. It recruits

978-1-7281-4693-5/19/$31.00 ©2019 IEEE

75

DOI 10.1109/Blockchain.2019.00019

a number of validators to ﬁnalize the blocks that published by the committees. As a security-deposit based economic consensus protocol [13], it requires all validators to submit a certain amount of deposits if they intend to join the network. The security feature is deemed to derive from the size of deposits rather than the number of validators. Ethereum 2.0 adopts the combination of sharding and Casper to handle the scalability issue. It sets the deposit to a ﬁxed value, i.e., 32 ETH (A kind of token issued by Ethereum) [14], and claims that the ﬁxed deposit that greatly exceeds gain can provide a sufﬁcient security incentive [12]. This means the validators are forced to behave in a legal way. Otherwise, their deposits will be slashed. However, it will impair the economic incentive for those validators, whose gains are far less than 32 ETH. For those validators whose stake values are far more than 32 ETH, the security incentive constraint is weakened. Therefore, it is necessary to design an appropriate economic incentive scheme, so that it can accordingly adjust the deposit values for different validators.
Before designing such an incentive scheme, we analyze problems in the blockchain model. First of all, for a blockchain network, all participants need to be rewarded, otherwise the decentralized network cannot be sustained without any economic incentive. Second, the stake values and performance are not uniformly distributed among these participants, so it is difﬁcult to determine the rewards, let alone the deposits. Last but not the least, for a blockchain network with shards, even though there is a beacon chain responsible for recording the administrative transactions, the problem of information asymmetry still exists. Owing to the anonymity of a blockchain network and weak leadership of the beacon chain, the problem mainly manifested in two aspects: (a) The beacon chain cannot determine the exact stake value of a validator, and (b) the real computation resource owned by validators are unknown to others except themselves. These aspects lead to the difﬁculty in designing an economic incentive mechanism.
In this paper, with the consideration of all the above problems, we are inspired by some incentive designs in the different industrial scenarios, i.e., [15] and [16], and utilize the contract theory [17] to determine the validators’ rewards and ensure that the high-type validators are rewarded more than the low-type ones. The proposed contract theory based approach can balance the security incentive and economic incentive for the beacon chain and and the validators. Let the beacon chain with weak leadership be responsible for designing the contracts. The validators are classiﬁed into a variety of types according to their stake value and performance. As a result, the deposit can be set ﬂexibly according to the different rewards. From the security incentive standpoint, deposit exceeding the rewards is guaranteed, and from the economic incentive standpoint, the deposit set according to validators’ stake value is necessary.
The rest of this paper is organized as follows. In Section II, we present the system model and the utility functions of the beacon chain and validators. In Section III, we provide the speciﬁc design of contract, including problem formulation and

Fig. 1. The beacon chain manages the committees and recruits the validators to ﬁnalize the public chain.
optimal solutions. In Section IV, we illustrate the simulation results and the analysis. In Section V, we give the conclusion for the proposed scheme.
II. SYSTEM MODEL
Fig. 1 illustrates a blockchain network with shards, which is supported by the Casper [12] protocol. Generally, it consists of one public chain, one beacon chain, and many committees. The public chain is constituted by veriﬁed sub-blocks with all the ﬁnalized transactions, the beacon chain contains the administrative transactions that are associated with all the participants and committees, and the committees are responsible for generating sub-blocks (i.e., shardings).
Since the PoS consensus protocol is always combined with some other protocols to support a blockchain network, here we consider only the Capser as the upper layer protocol. In the Capser, the validators are recruited at the beginning of each epoch, all the validators who intend to join the network have to submit a certain amount of deposit. Their task is to ﬁnalize the blocks for the current blockchain network by generating and broadcasting the vote messages. The voting time is related to the validator’s performance, as the validator with high performance takes less time on generating the vote message.
In this section, we ﬁrst classify the validators into different types according to their performance and stakes, and adopt the contract theory framework (Rv(Tv−1), Tv−1) with time (Tv−1)reward (Rv) bundle, where Tv denotes the total time caused by validators during voting, and Rv(Tv−1) is a strictly increasing reward evaluation function over Tv−1. That means a validator with high stakes and low voting latency will be classiﬁed as

76

high types, and thus obtains more reward than that of a lower type one.

A. Validator Voting Time

According to the voting process described in Casper, the voting process mainly contains three parts: (a) the unﬁnalized blocks information transmission to validators, (b) the vote message generation, and (c) the vote message broadcasting and comparison. The second part requires a validator to perform the hash function and invoke the signature scheme, which will consume the validators’ resource. The total time cost by a validator is the measurement of its performance. Thus, for validator v, according to the procedures mentioned above, the total time is given by:

Tv(rv, Svote)

=

Be tev

+

C (Be ) rv

+

ψSvote|M|,

(1)

where Be is the size of blockchain information within the
current epoch, C(Be) is the computation evaluation function of Be, tbv is the transmission rate from the Beacon Chain to validators, and rv is the resource that validator v can provide.
Also, we adopt ψSvote|M| to denote the voting message
broadcasting time [18], where ψ is pre-deﬁned by analyzing

the behaviors of previous validators, Svote is the size of voting message, M is the set of validators, and |M| denotes the total

number of validators.

The Casper sets a limit for the time cost. The voting time

of a validator exceeding the limitation will be considered

to be doing-nothing. According to the analysis of previous

validators, we can obtain the time cost distribution of all types

of validators.

B. Validator Utility Model
Casper is one of the PoS consensus protocols, wherein security is highly related to the deposit, and validator’s deposit correlates with its stake value. Intuitively, we classify the would-be validators into different types according to their stake values along with their performances. We consider that validators with higher stakes are more preferred by the blockchain network and they can receive more reward. Set N types for all the would-be validators, and θi denotes the type, expressed as follows

0 < θ1 < ... < θi < ... < θN , ∀i ∈ 1, ...N . (2)

Moreover, one point that is different from the other proto-
cols is that Casper allows the system to penalize the validators
of doing-nothing. In other words, any validator who responses
beyond the time limitation will be penalized. Let tmax denote the maximum acceptable time of validators’ voting, and tend denote the epoch end time.
For type-i validator based on contract (Ri, Ti−1), let Ti denote the expected value of the valid time for type-i validators, the utility function is deﬁned as

Uv(i) = θiν(Ri) − ωTi−1 − φ(t∗i ),

(3)

where ν(Ri) is a monotonically increasing function for evaluating the reward of the type-i validators, with ν(0) = 0, ν > 0

and ν ≤ 0, ω represents the unit resource cost of the compete voting process. To simplify the computation, we use φ(t∗i ) to evaluate the penalty for the type-i validators, and t∗i is the expected time of doing-nothing for the type-i validators. We
adopt θiν(Ri) to evaluate the rewards that is obtained from the beacon chain.
According to the Casper, the validators response under the time limitation will not be ﬁned, i.e., for ∀t∗i ∈ 0, ..., tmax , we have φ(t∗i ) = 0. However, if the validators do not ﬁnish their job on time, they will be ﬁned, i.e., for ∀ t∗i ∈
tmax, ..., tend , φ(t∗i ) is a monotonically increasing function for evaluating the ﬁne of the type-i validators. We set φ(t∗i ) to be a linear function:

φ(t∗i ) =

0

0 ≤ t∗i ≤ tmax,

ρ(Ri ) tend −tmax

(t∗i

−

tmax)

tmax < t∗i ≤ tend,

(4)

where ρ(Ri) is a monotonically increasing function regarding reward Ri, with 0 ≤ ρ < ν and ν ≤ ρ ≤ 0, which can be considered as the deposit of the type-i validators. Since the
penalty is deducted from the deposit, so we have

max φ(t∗i ) = ρ(Ri).

(5)

In fact, on the premise of the security deposit protocol, most
of the doing-nothing is caused by network failure. Therefore,
we assume that the probability of the network failure is uniform, which means for ∀i ∈ 1, ..., N and i = j, we have t∗i = t∗j . Set (tend −tmax)−1(t∗i −tmax) = ε, and the objective of type-i validators is to maximize the utility obtained from
the Beacon Chain, described by

max
(Ri ,Ti−1 )

Uv(i) = θiν(Ri) − ωTi−1 − ερ(Ri).

(6)

C. Beacon Chain Model

In a blockchain network with shards, the beacon chain records all the administrative information of the committees within the network. So each of the block managers of the beacon chain can be considered as a temporary leader and responsible for designing the contracts for all types of the validators. The proﬁt obtained from a validator v belonging to type-i is deﬁned as

UBC (i) = σ(Ti, θi, Ri) − μRi,

(7)

where we set

⎛

⎞

σ(Ti, θi, Ri) =a1

θi θ¯

α + a2 ⎝ i θj−2 − d⎠
j=1

ρ(Ri) ρ(R¯)

β

− a3

1 TmaxTi−1

γ
,

(8)

and σ(Ti, θi, Ri) > σ(Tmax, θ, R). Also, θ¯, R¯ represent the

type and the related deposit in the traditional scheme, respec-

tively. Only when the beacon chain gains more than that of

77

traditional scheme can the utility function be considered as reasonable. For description purpose, we set

t0

= Tmax a3

a1

θi θ¯

α
+ a2(

i

θj−2 − d)

j=1

ρ(Ri) ρ(R¯)

β

(9)

i

1

− a1 − a2( θj−2 − d) + a3 r .

j=1

where a1, a2 and a3 are pre-deﬁned coefﬁcients that weigh the stake type, the related deposits and response efﬁciency, and

α > 0, 0 < β < 1 and 0 < γ are set to deﬁne the variation

tendency, and μ is unit cost of the beacon chain. We have

Ti < t0, from (7), we can see that the gross proﬁt includes not only the validators’ voting time but also the penalties and

validators’ stake values.

Let λi denote the prior distribution probability of type i. According to all types of validators, ∀i ∈ 1, ...N , the

objective of the Beacon Chain is to maximize the expected

utility function, which means higher ranked validators with

quicker responses are more desired, expressed as

⎛

⎞

max
(Ri ,Ti−1 )

N
UBC = λi
i=1

a1

θi θ¯

α + a2 ⎝ i θj−2 − d⎠
j=1

ρ(Ri) ρ(R¯)

β
− a3

1 TmaxTi−1

γ
− μRi

. (10)

III. CONTRACT DESIGN
In this section, we formulate the problem between the beacon chain and the validators, and present the proof of individual rationality and incentive compatibility constraints. Finally, we obtain the optimal results by the convex optimization tools.

A. Problem Formulation

Here are two necessary principles for all types of validators involved in contract theory [17]: Individual Rationality (IR) and Incentive Compatibility (IC). IR means that only when a positive utility assigned by the beacon chain, can the validator accept the contract, i.e.,

θiν(Ri) − ωTi−1 − ερ(Ri) ≥ 0, ∀i ∈ 1, ..., N . (11)

IC refers to that a validator of type-i can only obtain the

maximum proﬁt by choosing the contract than all the other contracts (Rj, Tj−1), set

(Ri, Ti−1)

rather

Ai(Ri, Ti−1) = θiν(Ri) − ωTi−1 − ερ(Ri), (12)

Ai(Rj , Tj−1) = θiν(Rj ) − ωTj−1 − ερ(Rj ), (13)

and thus, according to (12) and (13), IC can be expressed by

Ai(Ri, Ti−1) ≥ Ai(Rj , Tj−1),

(14)

∀i, j ∈ 1, ..., N , i = j.

Finally, ∀i ∈ 1, ...N , the optimization problem can be described as

max
(Ri ,Ti−1 )

N
UBC = λi
i=1

a1

θi θ¯

α
+ a2(

i

θj−2 − d)

j=1

ρ(Ri) ρ(R¯)

β
− a3

1 TmaxTi−1

γ
− μRi , (15)

s.t.

(a) Ai(Ri, Ti−1) ≥ 0, (b) Ai(Ri, Ti−1) ≥ Ai(Ri , Ti−1), i = i , (c) 0 < θ1 < ... < θi < ... < θN ,
(d) max Ti ≤ min tmax, t0 ,
wherein (a) and (b) are the IR and IC constraints, respectively, (c) is the monotonicity condition, and (d) is the maximum value constraints. Obviously, this problem is not a convex optimization problem; however, we can ﬁnd a solution in the following subsections.

B. Optimal Contract Solution

In order to solve the problem (15) formulated in Subsection
(III-A), we ﬁrst reduce the number of the constraints by
proving the deﬁnition of Spence-Mirrless single-crossing Prop-
erty, and then prove the sufﬁciency and the necessity of the
monotonicity, and show the proofs of IC and IR constraints.
The details are listed in the following steps. Lemma 1: (Spence-Mirrlees single-crossing Property) For
any contract (Ri, Ti−1) with different type θi, if the utility function of validators satisﬁes the inequation as follows:

∂ ∂θ

−

∂U/∂R ∂U/∂T −1

> 0,

(16)

the number of constraints can be effectively reduced. Proof 1: From equation (3), we can obtain

∂ ∂θ

−

∂U/∂R ∂U/∂T −1

= ν > 0. ω

(17)

Obviously, the result satisﬁes the Spence-Mirrlees singlecrossing property. Thus, we can reduce the constraints and continue the proof based on this deﬁnition.

Lemma 2: Rj and Ti−1

(Monotonicity) For ≥ Tj−1 if and only

any contract if θi ≥ θj.

(Ri,

Ti−1),

Ri

≥

Proof 2: According to the IC constraints of different types

of validators, we can obtain

Ai(Ri, Ti−1) ≥ Ai(Rj , Tj−1),

(18)

Aj (Rj , Tj−1) ≥ Aj (Ri, Ti−1).

(19)

Then, we can obtain a new inequation by adding (18) and (19) together:

(θi − θj)ν(Ri) ≥ (θi − θj)ν(Rj).

(20)

78

(a) Sufﬁciency Due to θi > θj, θi − θj > 0 is true. We can get ν(Ri) ≥ ν(Rj) by deriving from (20). As ν (Ri) > 0, we can conclude that Ri > Rj. So the sufﬁciency condition is proved.
(b) Necessity The inequation in (20) can be transformed
and rewritten as

θi(ν(Ri) − ν(Rj)) ≥ θj(ν(Ri) − ν(Rj)), (21)

as ν (Ri) > 0 and Ri > Rj, we can conclude that θi > θj easily. In addition, the Ri = Rj and θi = θj cases can be proved by the similar processes.
Proposition 1: Ri ≥ Rj, if and only if Ti−1 ≥ Tj−1. Subproof 1: According to the IC constraints expressed in (18) and (19), we rewrite them as
θi(ν(Ri) − ν(Rj )) ≥ ω(Ti−1 − Tj−1) (22)
+ ε(ρ(Ri) − ρ(Rj)),
ω(Ti−1 − Tj−1) ≥ θj (ν(Ri) − ν(Rj )) (23)
− ε(ρ(Ri) − ρ(Rj)).
(a) Sufﬁciency Since Ti−1 ≥ Tj−1, a new inequation can be derived from (22), i.e.,

θi(ν(Ri) − ν(Rj)) ≥ ε(ρ(Ri) − ρ(Rj)),

(24)

where θi is monotonic increasing and ε is a ﬁxed value that max ε ≤ θ1. So (24) can be transformed to

θ1ν(Ri) − ερ(Ri) ≥ θ1ν(Rj) − ερ(Rj) . (25)

Set f (Ri) = θ1ν(Ri) − ερ(Ri), and then we have

f (Ri) ≥ f (Rj),

(26)

where f = θ1ν − ερ . With the constraints (c), (d) and ν > ρ , we can conclude that f > 0, and thus Ri ≥ Rj.
(b) Necessity Since Ri ≥ Rj, a new inequation can be derived from (23), i.e.,
ω(Ti−1 − Tj−1) ≥ θj ν(Ri) − ερ(Ri) (27)
− θjν(Rj) − ερ(Rj) .
Obviously, this case can be proved by the similar steps mentioned in (22) and (23), so the subsequent proof is omitted here.
The Lemma 2 indicates that in the incentive compatibility contract, the validators with a lower voting time will gain a higher reward.
Lemma 3: If the IR constraint of type-1 validators is satisﬁed, the IR constraints of other types will hold as well.
Proof 3: The conditions listed in (15) indicate that all of IR constraints need to be satisﬁed. Nevertheless, according to the IC constraints (14), for ∀i ∈ 1, ..., N , we ﬁrst have

θi(ν(Ri)) − ωTi−1 − ερ(Ri) ≥ θi(ν(R1)) (28)
− ωT1−1 − ερ(R1).

Then, on the basis of (15) and (28), we obtain a new inequation
θi(ν(R1)) − ωT1−1 − ερ(R1) ≥ θ1(ν(R1)) (29)
− ωT1−1 − ερ(R1).
Finally, given (28) and (29), we can conclude that
θi(ν(Ri)) − ωTi−1 − ερ(Ri) ≥ θ1(ν(R1)) − ωT1−1 (30)
− ερ(R1) ≥ 0.

With the IC constraint, the Lemma 3 indicates that only when the IR constraint of type-1 is kept, can the others be also satisﬁed.
Lemma 4: Here are four deﬁnitions regarding the IC constraints between type-i and type-j:
(a) If ∀j ∈ 1, ..., i−1 , the constraints are called Downward Incentive Constraints (DICs).
(b) If j = i − 1, the constraint is called Local Downward Incentive Constraint (LDIC).
(c) If ∀j ∈ i + 1, ..., N , the constraints are called Upward Incentive Constraints (UICs).
(d) If j = i + 1, the constraint is called Local Upward Incentive Constraint (LUIC).
With the monotonicity proved in Lemma 2, the DICs can be reduced as LDICs and the UICs can be reduced as the LUICs.
Proof 4: All of the validators are classiﬁed into different types, and there exists the IC constraint between any two types. As a result, there are too many IC constraints in total, which will increase the difﬁculty of computation. Here we will prove that all of the IC constraints can be reduced as LDICs. Consider three adjacent types, i.e., type i − 1, type i and type i + 1, which follows ∀i ∈ 1, ..., N − 1 . According to the IC constraints, then we have the following two inequations:
θi+1(ν(Ri+1)) − ωTi−+11 − ερ(Ri+1) ≥ θi+1(ν(Ri)) (31)
− ωTi−1 − ερ(Ri),

θi(ν(Ri)) − ωTi−1 − ερ(Ri) ≥ θi(ν(Ri−1)) (32)
− ωTi−−11 − ερ(Ri−1).
Since the monotonicity has been proved in lemma 1, i.e., Ri ≥ Rj and Ti−1 ≥ Tj−1 if and only if θi ≥ θj. Set Ax(Ry, Ty−1) = θxν(Ry) − ωTy−1 − ερ(Ry). We derive a new inequation from (32):

Ai+1(Ri, Ti−1) ≥ Ai+1(Ri−1, Ti−−11).

(33)

According to the inequations (31) and (33), it can be easily obtained:

Ai+1(Ri+1, Ti−+11) ≥ Ai+1(Ri−1, Ti−−11).

(34)

79

Repeat the procedures listed above for other types, we can get the following constraints from (34):
Ai+1(Ri+1, Ti−+11) ≥ Ai+1(Ri−1, Ti−−11)

≥ ... (35)
≥ Ai+1(R1, T1−1)

≥ A1(R1, T1−1).
Therefore, the proof indicates that if the LDIC is satisﬁed, all the DICs can also hold.
Similarly, according to the IC constraints, we have

Ai−1(Ri−1, Ti−−11) ≥ Ai−1(Ri, Ti−1),

(36)

Ai(Ri, Ti−1) ≥ Ai(Ri+1, Ti−+11).

(37)

The same procedures are omitted here. Finally we can easily come to:
Ai−1(Ri−1, Ti−−11) ≥ Ai−1(Ri+1, Ti−+11)

≥ ...

(38)

≥ Ai−1(RN , TN−1).
Hence, we complete the proof that if the LUIC is satisﬁed, all the UICs hold as well.
With the reduced constraints, we can redeﬁne the optimization problem as follows:

max
(Ri ,Ti−1 )

N
UBC = λi
i=1

a1

θi θ¯

α

i

+ a2(

θj−2 − d)

j=1

ρ(Ri) ρ(R¯)

β
− a3

1 TmaxTi−1

γ
− μRi , (39)

s.t.

(a) A1(R1, T1−1) = 0, (b) Ai(Ri, Ti−1) = Ai(Ri−1, Ti−−11), ∀i ∈ 2, ..., N ,

(c) 0 < θ1 < ... < θi < ... < θN ,

(d) max Ti ≤ min tmax, t0 .
To solve this problem, according to the constraints (a) and (b) in (III-B), ∀i ∈ 2, ..., N , we ﬁrst set

Δi = θi ν(Ri) − ν(Ri−1) − ε ρ(Ri) − ρ(Ri−1) , (40)

and then we derive a new equation from (a) and (b) in (III-B):

Ti−1

=

θ1ν(R1)

−

ερ(R1) ω

+

i j

=2

Δj

.

(41)

Before substituting Ti−1 into (III-B), we transform equation (41), as follows

Ti−1

=

θiν(Ri) − ω

ερ(Ri)

+

κi−1,

(42)

where κi−1 =

, i−1
j=1

ν (Rj

)(θj

−θj +1 )

ω

0,

2 ≤ i ≤ N, i = 1.

(43)

After substituting (43) into (III-B), (III-B) is converted into a new problem:

max
(Ri ,Ti−1 )

N
UBC = λi
i=1

a1

θi θ¯

α

i

+ a2(

θj−2 − d)

j=1

ρ(Ri) ρ(R¯)

β
− a3

1 TmaxTi−1

γ
− μRi , (44)

s.t.

(a)0 < θ1 < ... < θi < ... < θN ,

(b) max Ti ≤ min tmax, t0 .

We differentiate UBC with respect to Ri and then get

∂UBC (i) ∂Ri

=

λi

a2 β (ρ(Ri ))β (

i j=1

θj−2

−

d)

∂ρ(Ri)

ρ(R¯)β

∂Ri

+

a3γ TmaxTi−2

∂(Ti−1) ∂Ri

−

μ

.

(45)

Next, by differentiating

∂ UB C ∂Ri

with respect to Ri, we have

∂2UBC (i) ∂(Ri)2

=λi

a2β

(β − 1)(

i j

=1

θj−2

(ρ(Ri ))2−β ρ(R¯ )β

−

d)

(

∂ρ(Ri) ∂Ri

)2

+ (

a2β(ρ(Ri))β−1 ∂2ρ(Ri)

i j=1

θj−2

−

d)ρ(R¯)β

∂(Ri)2

−

2a3γ TmaxTi−3

( ∂(Ti−1) )2 ∂Ri

+

a3γ TmaxTi−2

∂2(Ti−1) ∂(Ri)2

.

(46)

Since β < 1, 0 ≤ ρ < ν and ν ≤ ρ ≤ 0, we have

∂ Ti−1 ∂Ri

>0

and

∂ 2 Ti−1 ∂ (Ri )2

< 0,

and

thus

we

can

get

∂2UBC ∂(Ri)2

< 0.

(47)

Obviously, (47) denotes that the optimal problem function

is a concave function. Our goal is to ﬁgure out the maximum

value of a concave function with the afﬁne constraints, which

is a convex optimization problem. From (47) we can conclude that, there must exit the values Ri∗ and Ti−1∗ that make the
following equation hold.

∂UBC ∂Ri

= λi

a2 β (ρ(Ri∗ ))β (

i j=1

θj−2

−

d)

∂ρ(Ri∗)

ρ(R¯)β

∂Ri

(48)

+

a3γ TmaxTi−2∗

∂(Ti−1∗) ∂Ri

−

μ

= 0.

80

Incentives Deposits and rewards

20

15

10

5

0

Type-2

Type-4

-5

Type-6

Type-8

-10

1

2

3

4

5

6

7

8

9

10

Types

Fig. 2. Utilities of validators when sign different contracts

45

Deposits of different types

40

Rewards of different types

32 ETH

35

30

25

20

15

10

1

2

3

4

5

6

7

8

9

10

Types

Fig. 3. The comparison among the deposits, rewards and 32 ETH.

TABLE I PARAMETERS

Parameter
Weight Parameters Exponent Parameters Default type and reward tnext Unit Cost Probability Parameter Total Types

Value
a1 = 20, a2 = 50, a3 = 300 α = 2, β = 0.5, γ = 1, d = 0.5 θ¯ = 5, R¯ = 32/5 300s μ = 2, ω = 0.01 λi = 0.1 types ∈ 1, ..., 10

Therefore, we can obtain the optimal reward Ri∗ and the related time Ti−1∗ by convex optimization tools. Moreover, ρ(Ri∗) for the type-i validators can be determined as well, which is set as their security deposit.
IV. NUMERICAL RESULTS AND ANALYSIS
In this section, we ﬁrst evaluate the performance of the proposed contract-based scheme, proving the feasibility in such a scenario. Next, we compare and discuss the possible deposit value with the ﬁxed value 32ETH. In the parameters setting part, we assume that there are 10 types in total, the other related parameters are listed in Table 1. For further analysis without loss the generality, we set ν(Ri) = Ri and ρ(Ri) = 2Ri. Besides, we set a convert function ϕ(Ri) = CET H that converts the rewards into ETH, here we set ϕ(Ri) = 5Ri. Then we present the numerical results in the following steps.
First, the beacon chain acts as the contract designer and deﬁne the different types and the correlative rewards and time. Then, all of the validators receive the contracts and choose one of them according to their own types. Finally, the beacon chain will distribute the payoffs to the validators who complete their work as required.
As shown in Fig. 2, the validators of type-2, type-4, type-6 and type-8 signing the different contracts have various utilities.

It shows apparently that the validators have the maximum utilities only when choosing the contract designed for their own, which prove the IC constraint. Besides, all these maximum incentives are positive, which explains the IR constraint.
We also compare and discuss the rewards, deposits and the ﬁxed value set by Ethereum in the following simulation. By utilizing the convert function, we set the 32ETH as one of the parameters in the problem, and then get the optimal result shown in Fig. 3. We can ﬁgure out that the validators of higher type have more rewards, also means the more deposits. For the validators of lower types, they do not need to submit 32ETH at all. According to their lower rewards, they are only required to submit a lower deposit. Since they gain so little in the network, and the high deposits lack economic incentives for such validators, so the lower deposits related to their rewards are acceptable. For the validators of higher types, they should hand in a number of deposits higher than 32 ETH. Since they can get more payoff than other lower types, the ﬁxed deposit 32 ETH cannot provide enough security incentive for the network. As a result, we can come to the conclusion that the proposed scheme balances the security incentive and economic incentive for both sides.
V. CONCLUSION
In this paper, we propose a contract-based approach to balance the security incentive and economic incentive for the network and the validators. Specially, we formulate the problem under the contract theory framework and classify the validators into different types according to their performance and stakes. It can increase the economic incentive for the validators with less performance and stakes, and increase the security incentive for the network by increasing the deposit of the validators with high performance and stakes. The proposed scheme can overcome the information asymmetry introduced by the inherent features of the blockchain. As a result, this approach allows the validators to obtain their rewards and

81

submit the deposits according to their types. Moreover, even though the validators of higher types have to submit the higher deposits, they have more rewards to motivate them to do so. The simulation results exactly show that the optimal contractbased approach can achieve the balance between the security incentive and economic incentive.

ACKNOWLEDGMENT

This work is supported in part by the National Natural Science Foundation of China under Grant Nos. 61702258, in part by US MURI, US NSF CNS-1717454, CNS-1731424, CNS-1702850 and CNS-1646607.

REFERENCES

[1] Satoshi Nakamoto. Bitcoin: A peer-to-peer electronic cash

system.

Self-published Paper, 2008 [Online]. Available:

https://bitcoin.org/bitcoin.pdf.

[2] Zibin Zheng, Shaoan Xie, Hong-Ning Dai, Xiangping Chen, and

Huaimin Wang. Blockchain challenges and opportunities: A survey.

International Journal of Web and Grid Services, 14(4):352–375, 2018.

[3] Wenbo Wang, Dinh Thai Hoang, Zehui Xiong, Dusit Niyato, Ping

Wang, Peizhao Hu, and Yonggang Wen. A survey on consensus

mechanisms and mining management in blockchain networks. arXiv

preprint arXiv:1805.02707, 2018.

[4] Gavin Wood. Ethereum: A secure decentralised generalised transaction

ledger. Ethereum project yellow paper, 151:1–32, 2014.

[5] QuantumMechanic. Proof of stake instead of proof of work. https:

//bitcointalk.org/index.php?topic=27787.0. June 11, 2011.

[6] Iddo Bentov, Ariel Gabizon, and Alex Mizrahi. Cryptocurrencies without

proof of work. In International Conference on Financial Cryptography

and Data Security, pages 142–157. Springer, 2016.

[7] Aggelos Kiayias, Alexander Russell, Bernardo David, and Roman

Oliynykov. Ouroboros: A provably secure proof-of-stake blockchain

protocol. In Annual International Cryptology Conference, pages 357–

388. Springer, 2017.

[8] James Ray. Sharding introduction rd compendium. https://github.com/ ethereum/wiki/wiki/Sharding-introduction-R&D-compendium. Oct 17, 2018.
[9] Kyle Croman, Christian Decker, Ittay Eyal, Adem Efe Gencer, Ari Juels, Ahmed Kosba, Andrew Miller, Prateek Saxena, Elaine Shi, Emin Gu¨n Sirer, et al. On scaling decentralized blockchains. In International Conference on Financial Cryptography and Data Security, pages 106– 125. Springer, 2016.
[10] Loi Luu, Viswesh Narayanan, Chaodong Zheng, Kunal Baweja, Seth Gilbert, and Prateek Saxena. A secure sharding protocol for open blockchains. In Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security, pages 17–30. ACM, 2016.
[11] Eleftherios Kokoris-Kogias, Philipp Jovanovic, Linus Gasser, Nicolas Gailly, and Bryan Ford. Omniledger: A secure, scale-out, decentralized ledger. IACR Cryptology ePrint Archive, 2017:406, 2017.
[12] Vitalik Buterin and Virgil Grifﬁth. Casper the friendly ﬁnality gadget. arXiv preprint arXiv:1710.09437, 2017.
[13] Vlad Zamﬁr. Introducing casper the friendly ghost. https://blog. ethereum.org/2015/08/01/introducing-casper-friendly-ghost/. Aug 1, 2015.
[14] Ethereum 2.0 phase 0 – the beacon chain. https://github.com/ ethereum/eth2.0-specs/blob/master/specs/core/0 beacon-chain.md# deposit-contract.
[15] Tingting Liu, Jun Li, Feng Shu, Yongpeng Wu, Zhu Han, et al. Incentive mechanism design for two-layer wireless edge caching networks using contract theory. IEEE Transactions on Services Computing, 2018.
[16] Tingting Liu, Jun Li, Feng Shu, Meixia Tao, Wen Chen, and Zhu Han. Design of contract-based trading mechanism for a small-cell caching system. IEEE Transactions on Wireless Communications, 16(10):6602– 6617, 2017.
[17] Patrick Bolton, Mathias Dewatripont, et al. Contract theory. MIT press, 2005.
[18] Xiaojun Liu, Wenbo Wang, Dusit Niyato, Narisa Zhao, and Ping Wang. Evolutionary game for mining pool selection in blockchain networks. IEEE Wireless Communications Letters, 2018.

82

