2016 Second International Conference on Web Research (ICWR)
Towards a Goal-driven Method for Web Service Choreography Validation

Saeed Parsa Department of Computer Engineering Iran University of Science and Technology
Tehran, Iran parsa@iust.ac.ir
Amir Ebrahimifard Graduate School of Management and Economics
Sharif University of Technology Tehran, Iran
ebrahimifard@gsme.sharif.edu

Mohammad Javad Amiri Department of Computer Science University of California Santa Barbara
Santa Barbara, USA amiri@cs.ucsb.edu
Mostafa Khoramabadi Arani Department of Computer Engineering Iran University of Science and Technology
Tehran, Iran khoram@comp.iust.ac.ir

Abstract—Nowadays web services composition that presents capabilities in response to customers' complex requirements has a special importance in real businesses. However, service choreography as a form of service composition, still faces many challenges. One of the most important challenges of the choreography domain is how to validate the model based on the corresponding requirements. To this end, in this paper processes choreographies are modeled using the interaction view of BPMN 2.0 standard. Then, goal modeling is suggested to extract the requirements. For each requirement all possible valid scenarios are considered and finally using Savara tool, the requirements’ scenarios are modeled and the choreography models are validated according to the corresponding requirements.
Index Terms—Choreography, business process, Validation, requirement, Goals Model.
I. INTRODUCTION
The process of developing a composite service is called service composition [1]. The aim of web service composition is to arrange multiple services into workflows supplying complex user needs [2]. Today, with service composition, instead of developing monolithic applications, we build largescale software applications by composing loosely coupled services. By doing so, we can reuse and select suitable services as various organizations can provide similar services for the development of different applications [3]. There are two possible ways for service composition: orchestration and choreography that are defined as two aspects of inter- and intra-organization service composition.
Choreography describes a system in a top view manner in which multiple cooperating independent agents exchange messages in order to perform a task to achieve a goal state whereas orchestration focuses on single peers description [4].
Choreographies are particularly useful in those situations in which multiple parties have to collaborate, but none of them wants to take the responsibility of running a centralized

orchestration [5]. One of the most important issues in choreography service composition is choreography validation. It is defined as accordance between requirements and choreography definition. In other words, to what extent a choreography definition can explain and justify requirements specifies validity level of that choreography definition. Currently in the context of choreography validation, lack of a comprehensive validation method to validate model against the requirements is counted as a major issue.
To overcome the abovementioned issue, requirements are considered as the base of choreography model validation in the proposed method. To this end, goals modeling technique is used to extract the requirements of the target process. Then, for each requirement all possible scenarios are described. These scenarios are modeled using Savara tool. In the next step the choreography process is modeled using BPMN 2.0 interaction modeling. By modeling the process, the next step is extracting all possible paths from the model and matching each path with the corresponding requirement. If all requirements are satisfied, that is all possible scenarios occurred and there are no extra paths in the model, the model is valid. So the steps of the proposed method are as follows:
1. Goal Modeling to Extract Requirements 2. Scenario Modeling 3. Choreography Modeling 4. Model Validation
This paper is organized as follows. Goal modeling is presented in Section 2. The focus of Section 3 is on process choreography modeling. Section 4 provides information to validate a choreography model. In Section 5 an evaluation of our method is presented and conclusions are included in Section 6.

978-1-5090-2166-6/16/$31.00 ©2016 IEEE
66

II. GOAL MODELING
Goals model represents goals, objectives and requirements of the system. A goal is a purpose to be achieved by the system under consideration [6]. Goalsಬ modeling is one of the requirements elicitation techniques that help the system analyst to recognize all requirements to be fulfilled by the software product. Goal models have been used to model requirements for software systems, business objectives and design qualities [7]. In a goals model, high-level goals are decomposed to sub-goals until requirements are extracted. Creating the goals model is a difficult task and needs the cooperation of the representatives of developers, business workers and even users [8].
In the first step of the proposed method, goals modeling technique is used to extract requirements. To do this, the goals model is created in a simple way and goals are shown without any property.
In this paper a Purchasing process is considered as a motivation example.
Motivation Example: a buyer corporation sends a registration request. If the type of request is ordinary, the request does not need to be confirmed, but if there is a special request, the registration should be confirmed by the agency. Also, if the type of request is superior, the agency sends the request to the factory and the factory gets the information from the agency and confirms the request. In all three cases, the buyer should start the registration sub-process. After the registration, the buyer can order the request to factory. The factory should confirm this request and until the confirmation of the request, data transfer continues between the factory and the buyer. After request confirmation, the company informs the buyer and the buyer in contact with the agency, can determine the delivery type. Then the factory informs the buyer about the cost and the buyer pays this price. If the payment is not successful, the factory informs the buyer and sends a no deliver request to agency.
Figure 1 shows a simple goals model for a purchasing process. In this goals model there is one main goal: Purchasing that has three sub goals, Customer Authentication, Order Processing, and Financial Processing and finally there are 5 different requirements extracted.
Fig 1. Purchasing Goals Model
By extracting the requirements of process, the scenario of each requirement can be specified. Each requirement has different scenarios that show all possible situations. From the choreography point of view a scenario should contain the required collaboration between different participants based on different situations.

Table 1 shows the possible scenarios for the registration requirement.

TABLE 1. SCENARIOS OF REGISTRATION REQUIREMENT

Title Ordinary Registration
Special Registration
Superior Registration
Invalid request

Scenario Description
The buyer sends an ordinary registration request to the agency and then enters the registration process.
The buyer sends a special registration request to the agency. The agency should confirm the request and then the buyer enters the registration process.
The buyer sends a superior registration request to the agency. The agency in iterative contact with the factory confirms the request. After confirmation, the agency informs the buyer and the buyer enters the registration process.
The buyer sends a buying request to the factory. The request is invalid, so the buyer asks the shortcoming list from the factory and resends the buying request. This cycle continues until the request is confirmed. Then the documents should be sent to the factory.

The next step is modeling these scenarios. To do this the sequence diagram of Savara tool is used and the collaboration between participants are shown. A sample of those sequence diagrams can be seen in Figure 2. In this Figure, the scenario of checking the credit of customer is modeled.

Fig 2.Successful Credit Check Scenario

III.

PROCESS CHOREOGRAPHY MODELING

In the next step, business process choreography, which shows the cooperation of participants, is modeled. A business process is defined as a set of tasks performed in coordination to achieve business objectives [9]. Also choreography and orchestration describe two aspects of web service composition [10]. Orchestration is an executable business process built with Web Services seen from a single-party perspective, while choreography is the message sequence between multiple web services seen from the perspective of multiple parties [11]. The relation between these two concepts is that the interaction between individual behaviors of each involved party, which is defined via the orchestration, results in a collaborative behavior, described by the choreography [12]. W3C defines

67

choreography as the sequence and conditions under which multiple cooperating independent agents exchange messages in order to perform a task to achieve a goal state [13].
There are two main approaches for choreography modeling: inter-connection modeling and interaction modeling. In inter-connection modeling, data and dependencies are defined within each role, and message sending and reception are in separate activities, whereas in interaction modeling, atomic message exchanges are the basic building blocks and control and data flow are defined globally [14].
Also there are many choreography languages that can be categorized in three classes: B2B choreographies, services choreographies, and conceptual choreographies [15].
In this paper due to the closeness to the business goals and requirement, the use of business process modeling notation (BPMN 2.0[16]) is suggested. Simplicity, expressiveness, and high usage have been the main advantages of this standard, compared with other methods of business process modeling [17]. Also [18] provides a complete study on process choreography languages and shows the suitability of the BPMN 2.0 for choreography modeling.
Figure 2 shows a BPMN 2.0 choreography model for the abovementioned purchasing process.
Fig 3 .Purchasing Process BPMN 2.0 Choreography Model
Also we can consider that the process is modeled by other workers and we just want to validate the model to make sure that model satisfies requirements. In other words the one who models goals and requirements and the one who

models process choreography must be two different people in our groups.

IV.

CHOREOGRAPHY MODEL VALIDATION

In this section, a method for validating the choreography model is introduced. Validation is defined as determination of correctness of the final program or software produced from a development project with respect to the user needs and requirements [19]. Verification and validation are not the same things, although they are often confused. Their difference can be expressed as below [20]:

ವ Validation: Are we building the right product?

ವ Verification: Are we building the product right? It means that in validation, the goal is accordance of requirements and product but in verification the goal is producing a sound and correct product. In the analysis of web service specification, an important issue is checking that the given composition of existing services satisfies the requirements of the specified global choreography protocol [21]. In other words, an important problem in web service domain is choreography validation. The importance of the validation in choreography is the same as the importance of validation in software development process. In software development process, most of the programmers' effort is lost in extensive and often repeated testing lifecycles because of ambiguity in capturing and analysis of requirements and then ambiguity between architecture and requirements and finally the cascading effect of ambiguity between implementation and architecture. Empirical research has shown that the cost of correcting design defects at the traditional testing stage is around 200 percent more than correcting them during the requirements or architecture stage. [22]. Therefore if choreography model can be validated against requirements, the costs of software testing will drop dramatically. In this work, the main goal is to know whether BPMN 2.0 choreography model fully implements requirements or not. By knowing this, choreography designer makes progress confidently, and the probability of changes in basic part of choreography (like designing global model) becomes a small number.

A. Choreography Validation Requirements and approaches
As discussed in [21] choreography validation has two main requirements:
1. Conformance checking: it has to check that the behaviors exhibited by the composition correspond to those described in the choreography document.
2. Information alignment: it is often needed that the participants agree on the state of the protocol as a result of its execution. In other words, they expect to have a common knowledge on certain variables that describe the state of the protocol.
To satisfy these two requirements, choreography validation approaches are introduced. As discussed in [23] choreography validation has two groups of approaches: bottom-up and top-down. In bottom-up approaches, it is important to know whether individual peers implemented as

68

services and advertising behavioral descriptions (conversations) are behave as describes in the choreography or not. Knowing this issue is critical for continuing development process. Like bottom-up approach, the validation in a topdown development process is also central.
In recent years researchers suggest various solutions for choreography validation. One of the best solutions is testable architecture. Testable Architecture was developed by Red Hat and Cognizant Technology Solutions. As mentioned earlier, there is ambiguity because requirements are not satisfied with architecture and architecture is not satisfied with implementation. Testable architecture is the foundation of removing this ambiguity. It enables the architecture of a system to be described unambiguously using Choreography Description Language (CDL) such that it may be tested against requirements. Testable architecture is formally grounded with strong type definition and has its foundations in pi-calculus [22]. It aims to ensure that any artifacts defined during the development lifecycle can be validated against other artifacts in preceding and subsequent phases. Also this methodology ensures that the final delivered system is guaranteed to meet the original business requirements [24].
B. The Savara Tool
The Savara project has been established to create tool support for Testable Architecture [22]. This project aims to leverage the concept of a choreography description to provide design-time and run-time governance of an SOA [25]. Savara aims to dramatically reduce testing expenditure and overall software development costs through modeling and simulation and makes it enterprise scale. Savara ensures that artifacts defined in each phase of the software development lifecycle can be verified for conformance. It means architectural models can be verified against requirements, service designs against architectural models and code against service designs. This guarantees that the deployed systems can be shown to implement the originating business requirements [22]. Savara provides tools for designing choreographies using BPMN 2.0 notation and deriving partner business processes (expressed in BPEL) [26].
C. Model Validation
After modeling requirements and choreography, validating phase between requirements and choreography can be done that means the Global Model can be checked for conformance against requirement Scenarios.
At this phase, namely conformance phase, due to the previously defined global model of choreography, conformance between requirements and global model of choreography is applied. In this phase correct and incorrect paths that are specified in pervious steps, are checked against the choreography model. A correct choreography model must implement correct paths and must not implement incorrect paths. If the opposite of each case occurs, then choreography model has problems and must be modified.
After these steps, level of accordance between requirements and global model is specified and if there is a

requirement that choreography model doesnಬt support it, then the model must be corrected.
Figure 4 shows the correct scenario for unsuccessful payment that is modeled from when the factory announced the cost to the buyer.
Fig 4. Correct Scenario of Unsuccessful Payment
Figure 5 shows the incorrect scenario for order delivery that cannot be performed, because the customer is unknown.
Fig 5.Incorrect Scenario of Order Delivery
V. RESULTS AND DISCUSSION In order to evaluate the proposed method, several processes description and their equivalent choreography models have been selected from MIT Process Handbook [27] in various domains. Then in two separate steps these models are given to our proposed method and some modelers for validation. Modelers tried to identify the choreography model and requirements to what extent are consistent with each other. To measure the truth of their assessment, four different metrics have been considered: 1. Valid paths that are correctly detected as valid (True
Positive or TP) 2. Valid paths that are incorrectly detected as invalid
(False Negative or FN) 3. Invalid paths that are incorrectly detected as valid
(False Positive or FP)

69

4. Invalid paths that are correctly detected as invalid True Negative or TN)
The results of usersಬ evaluation have brought in the Table 2.

TABLE 2. VALIDATION BY USERS
Process Specifications

By Users

Process

VI.

CONCLUSION

In this paper a method to validate web service choreography model is presented. To this end after extracting the related requirements using goals modeling technique, the scenarios of these requirements are explained and these scenarios are modeled using sequence diagrams. By modeling the web service choreography, the model is validated against

the requirementsಬ scenarios using Savara tool. Our

experiments show that users make a lot of mistakes in validation process, so the proposed method can help them a lot.

# of requirement # of valid path # of invalid path True Positive False Negative False Positive True Negative

Replenish inputs Create new market space Optimize the supply chain Manage raw material inventory Recycle and manage product returns
Forecast demand with suppliers Collect sales data at POS Hire human resources Pay employee Manage risk by outsourcing

3 12 1 9 3 0 1 5 21 5 17 4 3 2 6 16 2 10 6 2 0 3 7 0 5 200 4 11 5 6 5 3 2 4 9 4 4 513 2 5 3 3 203 6 18 12 16 2 4 8 3 8 5 6 223 4 11 3 7 4 3 0

In order to evaluate the reliability of usersಬ measurements,

precision, recall and accuracy are then defined as:

ܲ‫݊݋݅ݏ݅ܿ݁ݎ‬

ൌ



ܶܲ ܶܲ ൅ ‫ܲܨ‬

ܴ݈݈݁ܿܽ

ൌ



ܶܲ ܶܲ ൅ ‫ܰܨ‬

‫ݕܿܽݎݑܿܿܣ‬

ൌ



ܶܲ

൅

ܶܲ ܶܰ

൅ ൅

ܶܰ ‫ܲܨ‬

൅

‫ܰܨ‬

These measures have been calculated for each process and the results can be seen in Table 3.

TABLE 3. ACCURACY, PRECISION AND RECALL FOR EACH PROCESS

Process
Replenish inputs Create new market space Optimize the supply chain Manage raw material inventory Recycle and manage product returns Forecast demand with suppliers Collect sales data at POS Hire human resources Pay employee Manage risk by outsourcing

Accuracy
77% 73% 56% 71% 50% 54% 75% 80% 69% 50%

Precision
100% 85% 83% 100% 67% 80% 100% 80% 75% 70%

Recall
75% 81% 63% 71% 55% 44% 60% 89% 75% 64%

The average amount of Accuracy, Precision and Recall for all processes are as follows: 66%, 84% and 68%. Given that the proposed method can detect all the paths correctly, we are witnessing 34%, 16% and 32% progress for Accuracy, Precision and Recall of validation in our method. The only drawback of the proposed method is that the process of requirements modeling is time consuming.

REFERENCES
1. Dustdar, Schahram, and Wolfgang Schreiner, “A survey on web services composition”, International Journal of Web and Grid Services, vol. 1.1, pp. 1-30, 2005.
2. Bartalos, Peter, and Mria Bielikov, “Automatic dynamic web service composition: A survey and problem formalization”, Computing and Informatics, vol. 30.4, pp. 793-827, 2012.
3. Truong, Hong-Linh, and Schahram Dustdar, “A survey on context-aware web service systems”, International Journal of Web Information Systems, vol. 5.1, pp. 5-31, 2009.
4. Busi, Nadia, Roberto Gorrieri, Claudio Guidi, Roberto Lucchi, and Gianluigi Zavattaro. “Choreography and orchestration conformance for system design”, In Coordination Models and Languages, pp. 63-81. Springer Berlin Heidelberg, 2006.
5. Lemos, Angel Lagares, Florian Daniel, and Boualem Benatallah. “Web Service Composition: A Survey of Techniques and Tools”, ACM Computing Surveys (CSUR) vol. 48.3, p 33, 2015.
6. Van Lamsweerde, Axel, “Goal-oriented requirements engineering: A guided tour”. In Fifth IEEE International Symposium on Requirements Engineering, Proceedings. pp. 249-262, 2001.
7. Nguyen, Chi Mai, et al. “Multi Object Reasoning with Constrained Goal Model”, arXiv preprint arXiv: 1601.07409, 2016.
8. Mohammad Javad Amiri, Saeed Parsa, Amir Mohammad Zade Lajevardi, “Multifaceted Service Identification: Process, Requirement and Data”, Computer Science and Information Systems, Accepted.
9. Weske, M, “BPM Concepts, Languages, Architectures”, Springer, ISBN 978-3-540-73521-2, 2007.
10. Peltz, Chris, “Web services orchestration and choreography”, Computer, vol. 36.10, pp. 46-52, 2003.
11. Garriga, Martin, Cristian Mateos, Andres Flores, Alejandra Cechich, and Alejandro Zunino. “RESTful service composition at a glance: A survey.” Journal of Network and Computer Applications, vol. 60, pp. 32-53, 2016.
12. Autili, Marco, Davide Di Ruscio, Paola Inverardi, James Lockerbie, and Massimo Tivoli. “A development process for requirements based service choreography”, In IEEE Workshop on Requirements Engineering for Systems, Services and Systems-of-Systems (RESS), pp. 59-62, 2011.

70

13. W3 Glossary, Available on: http://www.w3.org/Glossary, Last Visited: 10 Jan. 2016.

14. Pfitzner, Kerstin, Gero Decker, Oliver Kopp, and Frank Leymann, “Web service choreography configurations for BPMN”, In Service-Oriented Computing Workshops, ICSOC 2007, Springer Berlin Heidelberg, pp. 401-412, 2007.

15. Schnberger, Andreas. “Do we need a refined choreography notion?”, Services und ihre Komposition, 2011.

16. OMG, “Business Process Model, Notation (BPMN) 2.01”, Object Management Group: Needham, MA 2494, 34, 2013.

17. Chinosi, Michele, and Trombetta, A. “BPMN: An introduction to the standard, Computer Standards & Interfaces”, vol. 34(1), pp.124-134, 2012.

18. Amir Ebrahimifard, Mohammad Javad Amiri, Mostafa Khoramabadi Arani, Saeed Parsa, “Mapping BPMN 2.0 Choreography to WS-CDL: A Systematic Method”, Journal of E-Technology, vol. 7(1), 2016

19. Adrion, W. Richards, Martha A. Branstad, and John C. Cherniavsky, “Validation, verification, and testing of computer software”, ACM Computing Surveys (CSUR), vol. 14.2, pp. 159-192, 1982.

20. “Tutorial: Software risk management”, IEEE Computer Society Press, 1989.

21. Kazhamiakin, Raman, and Marco Pistore, “Choreography conformance analysis: Asynchronous communications and information alignment”, Web Services and Formal Methods, Springer Berlin Heidelberg, pp. 227-241, 2006.

22. Bhavish Kumar Madurai. “Getting serious about enterprise architecture, whitepaper on alignment between testable architectures and TOGAF, Available on: http://docs.jboss.org/savara/whitepapers/ (2009), Last Visited: 10 Feb 2016.

23. Nguyen, Huu Nghia, Pascal Poizat, and Fatiha Zadi, A symbolic framework for the conformance checking of value-passing choreographies, Service-Oriented Computing, Springer Berlin Heidelberg, pp. 525-532, 2012.

24. “What is Testable Architecture?”, Available on: http://www.jboss.org/savara/ta.html, Last Visited: 8 Jan 2016.

25. Gary Brown, Je Yu and Je DeLong, “Testable Architecture”, Eclipse

User

Guide,

Available

on:

http://docs.jboss.org/savara/releases/2.0.x/eclipseuserguide/pdf/SAVAR

A-Eclipse-UserGuide.pdfnj, Last Visited: 5 Jan 2016.

26. Shrivastava, Santosh, and Mark Little, “Designing Atomic Business Functions with Distributed Control”, In IEEE 17th Conference on Business Informatics (CBI), vol. 1, pp. 51-59. IEEE, 2015.

27. MIT Process handbook, Available on: http://process.mit.edu/, Last Visited: 19 Jan 2016.

71

