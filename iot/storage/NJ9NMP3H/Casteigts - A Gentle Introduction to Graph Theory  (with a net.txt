A Gentle Introduction to Graph Theory
(with a networking sensitivity)
Arnaud Casteigts LaBRI, Universit´e de Bordeaux ResCom Summer School 2019
June 25, 2019

(Part I) Introduction

Some graphs

A bit of history...
In 1735, in Ko¨nigsberg (now Kaliningrad, Russia) “Can we devise a walk that crosses every bridge exactly once?”
Resolved by Leonhard Euler, beginning of graph theory. Some concepts:
Graph G = (V , E ) Set of vertices V and edges E ⊆ V × V (binary relations among vertices). Degree of a vertex: number of edges incident to it (e.g. above, max degree = 5) Path: sequence of edges e1, e2, ..., ek with ei = {ui , vi } such that vi = ui+1. Cycle: path that terminates where it starts Eulerian Cycle: cycle that uses every edge exactly once (the above problem) Theorem: G = (V , E ) admits an Eulerian cycle if and only if the degree of every vertex V is even

Types of graphs
Undirected graphs
G

A

E

B

D

F

C

Symmetrical relations (e.g.“have met”, “are within distance x”, ...)

Multiple edges, loops, simple graphs...

Directed graphs

G

A

E

B

D

F C

Asymmetrical relations (e.g. “is older than”, “is following”, ...)

graph with multiple edges

graph with loops

simple graph

(courtesy Wolfram)

Mathematically G = (V , E ) with...
Directed: E is a set of couples Undirected: E is a set of pairs Multiedges: E is a multiset Loops : E allows reﬂexion (e.g. {u, u})

Basic concepts (directed/undirected)
Paths, Connectivity Distance, Diameter, etc. Connected components [+ weights]

Basic data structures for graphs
Directed graphs
b

Undirected graphs
b

a

c

d

Adjacency matrix:
0100 0010 1101 0000

Adjacency lists: ab bc c acd d∅

a

c

d

Adjacency matrix:
0110 1010 1101 0010

Adjacency lists: a bc b ac c acd dc

Other options (object-oriented structures, list of edges, etc.)
Some facts Matrices use Θ(n2) memory even if graph is sparse Adjacency lists use only Θ(m) memory (where m is the number of edges) Matrices have algebraic features (e.g. Mi counts paths of length i ; also G connected iﬀ i Mi has no zero)

Some classes of graphs

Arbitrary

Path/Line

Cycle/Ring

Cycle with chords

Complete

Tree

Grid

Planar

Bipartite

Simple exercises on simple graphs...

Degree sequences (ex 1.1)
Find a graph that realizes the given degree sequence. For example, (2, 2, 2) could be realized by a triangle graph.

(3, 3, 2, 1, 1)

(5, 3, 2, 1, 1, 1)

odd sum of degrees is impossible! (Handshaking lemma)

(3, 3, 2, 2)

(3, 3, 1, 1)

sum of degrees is even, but still impossible, why?

→ Havel–Hakimi algorithm

Diﬀerent degrees (ex 1.2) Find a graph in which all the degrees are diﬀerent
Planar graphs (ex 1.3) Which of these graphs are planar? (= can be drawn without crossing).

(Part II)
Overview of some topics (with a Rescom sensitivity)

Graph search and shortest paths
Breadth-ﬁrst search and Depth-ﬁrst search
Shortest path, distance, ... Unweighted: BFS Weighted: Dijkstra → shortest path from a given vertex to all others
Some applications Command find on linux (DFS) Routing in networks (distributed versions) ...

Minimum Spanning Trees

Spanning tree: Set of edges that connects all vertices without cycle
Minimum spanning tree: Sum of weights is minimized over all possible spanning trees

Kruskal’s algorithm
Sort the edges by increasing weights For each edge e in sorted order:
Add e to MST unless it creates a cycle

Prim’s algorithm
Start a tree at an arbitrary vertex While the tree is not spanning:
Add the smallest edge between a node in the tree and a node outside the tree

→ This works (magically) because the solutions have a matroid structure.

Some Classical Covering Problems
Vertex cover (min), Dominating set (min), Independent set (max), matching (max)

(Minimum) Dominating set Set of vertices that “sees” every vertices

e

f

c

d

a b
→ Relay nodes in wireless network → Location of ﬁre stations in city

(Maximum) Matching Set of non-adjacent edges

e

f

c

d

a b
→ Pairwise communications → If bipartite: tasks assignment

(Minimum) Vertex cover Set of vertices that “sees” every edge.

e

f

c

d

a b
→ Interception of traﬃc in network

(Maximum) Independent Set Set of non-neighbor vertices

e

f

c

d

a b
→ Frequency assignment in wireless networks

Unit disk graphs
Deﬁnition: Vertices have coordinates, there is an edge {u, v } iﬀ dist(u, v ) ≤ x Particular case of intersection graph, analogue in 2D of unit interval graphs in 1D.

Used frequently for simulations in wireless networks.

Some facts about random UDGs (as n → ∞)

Penrose’97 (also Gupta & Kumar’98):

Connectivity threshold r →

ln n πn

√ Penrose’03: Θ(n)-size component threshold → c/ n for some c (≈ 2.07)

D´ıaz et al.’09: At connectivity threshold, P(∃ component of size i)

Vehicular networks

C

B

A

E
Important literature, using both static or dynamic graphs. Led to theoretical results of independent interest
Ex: Percolation in grids (Shioda et al.’08) Model:
Inﬁnite Manhattan grid Theorem:
P(segment is connected) ≥ 1/2 ⇒ ∃ component of size ∞

Dynamic Graphs (a.k.a. time-varying graphs, temporal graphs, evolving graphs, ...)
Ex: Exemple of scenario

3, 4

Graph representation (for example)

G1

G2

G3

G4

More later...

the graph

2, 3

1

3, 4

1, 2

1, 2, 3

1

(Part III) Topics of independent interest

Random walks

Start at a given vertex. Move to a randomly chosen neighbor. Repeat.
Some common measures Cover time: how long before all vertices are visited (at least once) Return time: how long before the walks returns to its initial position Hitting time: how long before a given vertex is visited Mixing time: how long before the position no longer depends on initial position

Some bounds on cover time (worst case) Undirected graphs: Θ(n3) steps

n/2 n/2

Directed graphs: 2n steps!

5

4

3

2

1

Applications Economics, physics, genetics, algorithms, ... Ex: Page rank algorithm (initial version)

Graph coloring (the four color theorem)
1852: Francis Guthrie (then a botanist) notices that four colors are enough to color the map of England’s counties.
1879: A. Kempe proves this is true whatever the map... bug found by P. Heawood 11 y. later 1880: P. Tait proves it diﬀerently... bug found by J. Petersen 11 y. later → Formulated using graphs: “2D map = planar graphs” 1890: P. Heawood proves that ﬁve colors are enough (using Kempe’s arguments) 1960s: H. Heesch starts using computers to search for a proof 1976: K. Appel and W. Haken succeed: Every planar graph is four colorable! → reduction from ∞ to 1476 possible cases, all tested using a computer. 1996: N. Robertson, D. Sanders, P. Seymour reduce it to 633 cases 2005: G. Gonthier certiﬁes the proof using Coq

Graph coloring (besides the four color theorem)
Several variants Vertex coloring: neighbors must have diﬀerent colors Edge coloring: every two adjacent edges must have diﬀerent colors List coloring: choose among a given list of possible colors (vertex or edge) 2-hop coloring: 2-hop neighbors must have diﬀerent colors
Many applications (e.g. telecom) Wireless communications Mutual exclusion in general, scheduling, ... Unplugged computer science
Theoretical depth Connects with a number of problems and structural properties (e.g. clique, minors, cycles, symmetries) Many open questions and ongoing projects MacArthur price (Maria Chudnovsky) in 2012

Cliques (and Ramsey theory)
Clique = Complete graph within another graph (complete subgraph)

Applications / Connexions Community detection Graph Coloring Cooking ...
MaxClique problem Ex: Is there a clique of size k here? (NP-complete) Best exact algorithm by Mike Robson O∗(1.1888n)

Classical relaxations in social network analysis
k -plexes s -clubs ...

Ramsey theory See exercise...

Ramsey theory (exercises)...
Any two persons either know each other or they don’t (the relation is symmetrical). We say that three persons know each other if they all know each other pairwise. We say that they don’t known each other if none of them knows any of the others. Consider the following declaration: “In a group of four persons, there is always three persons who know each other or three persons who don’t know each other.”
Is this true in a group of 5 persons?
Is this true in a group of 6 persons?
Hint: You may represent the group of people as a complete graph whose edges are colored with two colors. The question becomes whether you can color the edges without creating a monochromatic triangle.

Proving that a problem is NP-hard / NP-complete
Deﬁnitions (classes of problems) 1. NP: Easy to verify if answer is YES (e.g. easy to verify that a given coloring is valid (proper) and uses 3 colors) 2. NP-hard: At least as hard as any other problem in NP 3. NP-complete: Both NP-hard (bad news) and in NP (good news)
How to prove that a problem is NP-complete? Example: MaxIndependentSet Input: A graph G , an integer k Question: Does G admit an independent set of size k?
1. Easy to check that a given set is independent and of size k (thus the problem is in NP ) 2. How to prove that the problem is NP-hard?
→ Take another NP-hard problem, and reduce it to this one (in polynomial time)
Ex: MaxClique reduces to MaxIndependentSet as follows:

MaxClique (

, k) comp→lement MaxIndependentSet (

, k)

Asymptotic notations (O, Ω, Θ)

4n2 − 5n + 1 = O(n2) 4n2 − 5n + 1 = Θ(n2)

n log n = Ω(n) n log n = O(n2)

n log n = Θ(

)?

n log n2 = Θ(

)?

500 = Θ(1)
17n2 + 3 = O(nΘ(1)) √ n = O(n)
n! = Ω(2n)

True False
N/A N/A N/A N/A

The graph isomorphism problem
Given two graphs G1 and G2, are they “identical”?
∼=
Usually deﬁned in term of the existence of a bijection between the vertices of G1 and the vertices of G2 that preserves adjacency (and non-adjacency)
∼=
Candidate for NP-intermediate Strong connexions with another problem: Graph automorphism (given a graph G , is there non trivial symmetries in G ) Generalizes as subgraph isomorphism, but NP-complete (why?) Applications in topology embedding (e.g. for cloud computing)

