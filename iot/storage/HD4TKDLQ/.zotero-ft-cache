Scikit-learn
Apprentissage et reconnaissance – GIF-4101 / GIF-7005 Professeur : Christian Gagn´e

Semaine 3 : 21 septembre 2016

GIF-4101 / GIF-7005 (U. Laval)

Scikit-learn

C. Gagn´e 1 / 17

Travaux pratiques

Travaux pratiques r´ealis´es avec scikit-learn et scikit-neuralnetwork, en langage Python
Installation de Python et des librairies dans les laboratoires d’informatiques du d´epartement de g´enie ´electrique et de g´enie informatique (PLT-0103 et PLT-0105) Utiliser l’image Linux Langage Python Langage interpr´et´e, ouvert, d’usage g´en´eral, facile `a utiliser (pseudo-code ex´ecutable) Prototypage rapide, optimisation des performances par librairies performantes et/ou routines en C Adoption g´en´eralis´ee dans le domaine de l’apprentissage automatique Scikit-learn Librairie Python pour eﬀectuer de l’apprentissage automatique Inclut la plupart des m´ethodes vues en classe, except´e pour les r´eseaux de neurones (solution : scikit-neuralnetwork) Projet ouvert (open source) Site Web : http://scikit-learn.org

GIF-4101 / GIF-7005 (U. Laval)

Scikit-learn

C. Gagn´e 2 / 17

Installation des librairies

Option 1 (privil´egi´ee) : Anaconda (https://www.continuum.io) Distribution contenant un ensemble de 100 librairies de calcul scientiﬁque Disponible sous Windows, Mac et Linux Inclut Numpy, Scipy, matplotlib, scikit-learn, etc. N’inclut pas scikit-neuralnetwork Solution pour ceux moins `a l’aise avec Python et la ligne de commande
Option 2 (`a vos risques) : avec installateur du syst`eme et/ou pip Installer Python 3 par l’installateur du syst`eme
Apt-get sous Ubuntu, Homebrew sous Mac
Installer Numpy, matplotlib, scikit-learn et scikit-neuralnetwork avec pip
Scikit-neuralnetwork ne fonctionne pas sous Windows, comme il d´epend de Theano et Lasagne
Tr`es diﬃcile de faire de l’apprentissage profond avec Windows.

GIF-4101 / GIF-7005 (U. Laval)

Scikit-learn

C. Gagn´e 3 / 17

Exemple d’installation sur macOS
Installation sur macOS avec Homebrew et pip (Python 3)
# Si Python 3 n’est pas encore install´e brew install python3
# Installation `a partir des sources, peut prendre du temps brew install openblas brew install numpy --with-openblas --with-python3 brew install scipy --with-openblas --with-python3
# Installation du reste avec pip pip3 install matplotlib pip3 install scikit-learn pip3 install scikit-neuralnetwork

GIF-4101 / GIF-7005 (U. Laval)

Scikit-learn

C. Gagn´e 4 / 17

G´en´erer et visualiser des donn´ees

G´en´erer donn´ees 2D en demi-lunes
from sklearn import datasets X, R = datasets.make_moons(100)
Tracer les donn´ees avec matplotlib
import numpy from matplotlib import pyplot colors = numpy.array([x for x in ’bgrcmyk’]) pyplot.scatter(X[:, 0], X[:, 1], color=colors[R].tolist(), s=10) pyplot.show()

1.5 1.0 0.5 0.0 0.5 1.0

2

1

0

1

2

3

GIF-4101 / GIF-7005 (U. Laval)

Scikit-learn

C. Gagn´e 5 / 17

Entraˆıner un classiﬁeur

Entraˆıner un classiﬁeur (SVM lin´eaire) sur les demi-lunes
import matplotlib.pyplot from sklearn import datasets, svm, metrics
# G´en´erer donne´es 2D en demi-lunes X, R = datasets.make_moons(100)
# Entra^ıner classifieur de type SVM lin´eaire linsvc = svm.LinearSVC(C=1.0) linsvc.fit(X, R)
# ´Evaluer performance en entra^ınement acc_train = metrics.accuracy_score(linsvc.predict(X), R) print("Train accuracy: %.3f" % acc_train)
Sortie `a la console
Train accuracy: 0.880

GIF-4101 / GIF-7005 (U. Laval)

Scikit-learn

C. Gagn´e 6 / 17

Visualisation avec matplotlib

Visualiser les fronti`eres et r´egions de d´ecision

# Cr´eer un mesh pour faire le trac´e

h = .02

# Espacement du mesh

x_min, x_max = X[:, 0].min() - 1, X[:, 0].max() + 1

y_min, y_max = X[:, 1].min() - 1, X[:, 1].max() + 1

xx, yy = numpy.meshgrid(numpy.arange(x_min, x_max, h),

numpy.arange(y_min, y_max, h))

Y = linsvc.predict(numpy.c_[xx.ravel(), yy.ravel()])

# Mettre le r´esultat dans un trac´e couleur colors = numpy.array([x for x in ’bgrcmyk’]) Y = Y.reshape(xx.shape) pyplot.contourf(xx, yy, Y, cmap=pyplot.cm.Paired, alpha=0.8) pyplot.scatter(X[:, 0], X[:, 1], cmap=pyplot.cm.Paired, \
color=colors[R].tolist()) pyplot.xlim(xx.min(), xx.max()) pyplot.ylim(yy.min(), yy.max()) pyplot.show()

GIF-4101 / GIF-7005 (U. Laval)

Scikit-learn

C. Gagn´e 7 / 17

Visualisation avec matplotlib (r´esultat)

1.5 1.0 0.5 0.0 0.5 1.0

2

1

GIF-4101 / GIF-7005 (U. Laval)

0

1

Scikit-learn

2
C. Gagn´e 8 / 17

Estimation de l’erreur empirique

Partition du jeu en ensemble d’entraˆınement et de test
import numpy import matplotlib.pyplot from sklearn import datasets, svm, cross_validation, metrics

# G´en´erer donne´es 2D en demi-lunes X, R = datasets.make_moons(300) X_train, X_test, R_train, R_test = \
cross_validation.train_test_split(X, R, test_size=0.33)

# Entra^ıner classifieur de type SVM lin´eaire linsvc = svm.LinearSVC(C=1.0) linsvc.fit(X_train, R_train)
# ´Evaluer erreur moyenne en entraı^nement acc_train = metrics.accuracy_score(linsvc.predict(X_train), R_train) acc_test = metrics.accuracy_score(linsvc.predict(X_test), R_test) print("Train accuracy: %.3f, test accuracy: %.3f" % (acc_train, acc_test))

Sortie `a la console
Train accuracy: 0.881, test accuracy: 0.889

GIF-4101 / GIF-7005 (U. Laval)

Scikit-learn

C. Gagn´e 9 / 17

Validation crois´ee `a k-plis

Partition du jeu en ensemble d’entraˆınement et de test
import numpy import matplotlib.pyplot from sklearn import datasets, svm, cross_validation
# G´en´erer donne´es 2D en demi-lunes X, R = datasets.make_moons(300)
# Entra^ıner classifieur de type SVM lin´eaire linsvc = svm.LinearSVC(C=1.0) scores = cross_validation.cross_val_score(linsvc, X, R, cv=10)
# ´Evaluer erreur moyenne acc_crossval = numpy.mean(scores) print("10-fold cross-validation accuracy: %.3f" % acc_crossval)
Sortie `a la console
10-fold cross-validation accuracy: 0.883

GIF-4101 / GIF-7005 (U. Laval)

Scikit-learn

C. Gagn´e 10 / 17

R´egression lin´eaire

import numpy from matplotlib import pyplot from sklearn import datasets, linear_model, cross_validation, metrics
# Lire jeu de donne´es diabetes diabetes = datasets.load_diabetes()
# Utiliser une seule variable et s´eparer entra^ınement/test X = diabetes.data[:, numpy.newaxis, 2] r = diabetes.target X_train, X_test, r_train, r_test = cross_validation.train_test_split(X, r, test_size=0.33)
# Cr´eer objet de r´egression lin´eaire et entra^ıner le mod`ele regr = linear_model.LinearRegression() regr.fit(X_train, r_train)
# Poids du mode`le print(’w_1: %.3f, w_0: %.3f’ % (regr.coef_[0], regr.intercept_))
# Erreurs quadratiques moyennes mse_train = metrics.mean_squared_error(regr.predict(X_train), r_train) print("Mean square error (train): %.3f" % mse_train) mse_test = metrics.mean_squared_error(regr.predict(X_test), r_test) print("Mean square error (test): %.3f" % mse_test)
# Afficher r´esultats pyplot.scatter(X_test, r_test, color=’black’) X_test_sorted = numpy.sort(X_test) pyplot.plot(X_test_sorted, regr.predict(X_test_sorted), color=’blue’, linewidth=3) pyplot.show()

GIF-4101 / GIF-7005 (U. Laval)

Scikit-learn

C. Gagn´e 11 / 17

R´egression lin´eaire (r´esultats)

w_1: 878.484, w_0: 148.580 Mean square error (train): 3985.306 Mean square error (test): 3770.875
400

350

300

250

200

150

100

50

00.10

0.05

0.00

0.05

0.10

0.15

GIF-4101 / GIF-7005 (U. Laval)

Scikit-learn

C. Gagn´e 12 / 17

Jeux de donn´ees

Donn´ees de scikit-learn en format array Numpy
Lecture de ﬁchiers texte ou CSV possible avec fonctions numpy.loadtxt
Nombreux jeux de donn´ees jouets disponibles dans scikit-learn
sklearn.datasets.load_boston (r´egression) sklearn.datasets.load_iris (classement) sklearn.datasets.load_diabetes (r´egression) sklearn.datasets.load_digits (classement) sklearn.datasets.load_linnerud (r´egression multivari´ee)
Nombreux autres jeux de donn´ees disponibles
Images Donn´ees en format svmlight / libsvm Olivetti faces 20 newsgroups text dataset Forest covertypes Etc.

GIF-4101 / GIF-7005 (U. Laval)

Scikit-learn

C. Gagn´e 13 / 17

Coder ses propres algorithmes

Objets scikit-learn suivent l’interface suivant Estimateur, m´ethode fit pour apprendre des donn´ees :
estimator = obj.fit(data, targets)
ou bien (cas non-supervis´e) :
estimator = obj.fit(data)
Pr´edicteur, traiter de nouvelles donn´ees :
prediction = obj.predict(data)
et lorsque la certitude des pr´edictions est quantiﬁ´ee (ex. probabilit´es) :
prediction = obj.predict_proba(data)
Transformateur, ﬁltrer ou modiﬁer les donn´ees :
new_data = obj.transform(data)
lorsque l’apprentissage et la transformation se fait bien ensemble :
new_data = obj.fit_transform(data)
Mod`ele, retourner un mesure de performance (ex. qualit´e d’apprentissage, vraisemblance) [valeurs ´elev´ees sont meilleures] :
score = obj.score(data)
Pour plus d’information sur la programmation de classiﬁeurs avec scikit-learn : http://scikit-learn.org/stable/developers/
contributing.html#apis-of-scikit-learn-objects

GIF-4101 / GIF-7005 (U. Laval)

Scikit-learn

C. Gagn´e 14 / 17

Documentation sur Python
Apprendre `a programmer avec Python 3 : https://inforef.be/swi/python.htm Think Python : How to Think Like a Computer Scientist : http://www.greenteapress.com/thinkpython/html/ Learning Python : http://proquestcombo.safaribooksonline. com.acces.bibl.ulaval.ca/9781449355722?uicode=univlaval Dive into Python 3 : http://link.springer.com.acces.bibl. ulaval.ca/book/10.1007%2F978-1-4302-2416-7 Matplotlib : http://matplotlib.org/

GIF-4101 / GIF-7005 (U. Laval)

Scikit-learn

C. Gagn´e 15 / 17

Documentation sur scikit-learn
Site Web : http://scikit-learn.org/ Scikit-learn tutorials : http://scikit-learn.org/stable/tutorial/index.html Scikit-learn user guide : http://scikit-learn.org/stable/user_guide.html Learning scikit-learn : Machine Learning in Python : http://proquestcombo.safaribooksonline.com.acces.bibl. ulaval.ca/9781783281930

GIF-4101 / GIF-7005 (U. Laval)

Scikit-learn

C. Gagn´e 16 / 17

Acc`es au laboratoire informatique GEL-GIF
Laboratoire informatique GEL-GIF : PLT-0103 et PLT-0105, ouvert 24/7 Stations de travail Windows et Linux (dual boot) Installation sur image Linux de Python 3 / Numpy / Scipy / matplotlib / scikit-learn / scikit-neuralnetwork Vous devez activer votre compte avant d’acc´eder au laboratoire (une seule fois) : https://sechuron.gel.ulaval.ca/auth/comptes_analyse.php Requiert une combinaison pour acc´eder aux locaux (donn´ee lors de l’activation du compte)

GIF-4101 / GIF-7005 (U. Laval)

Scikit-learn

C. Gagn´e 17 / 17

