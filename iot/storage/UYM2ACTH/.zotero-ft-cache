UNIVERSITE´ DE MONTRE´AL
RE´TROACTION DE LA QUALITE´ DE L’EXPE´RIENCE POUR AME´LIORER LA QUALITE´ DE SERVICE
GREGORY CHARLOT DE´PARTEMENT DE GE´NIE INFORMATIQUE ET GE´NIE LOGICIEL
E´COLE POLYTECHNIQUE DE MONTRE´AL
ME´MOIRE PRE´SENTE´ EN VUE DE L’OBTENTION DU DIPLOˆ ME DE MAˆITRISE E`S SCIENCES APPLIQUE´ES (GE´NIE INFORMATIQUE) NOVEMBRE 2012
c Gregory Charlot, 2012.

UNIVERSITE´ DE MONTRE´AL E´COLE POLYTECHNIQUE DE MONTRE´AL
Ce m´emoire intitul´e : RE´TROACTION DE LA QUALITE´ DE L’EXPE´RIENCE POUR AME´LIORER LA
QUALITE´ DE SERVICE
pr´esent´e par : CHARLOT Gregory en vue de l’obtention du diploˆme de : Maˆıtrise `es Sciences Appliqu´ees a ´et´e duˆment accept´e par le jury d’examen constitu´e de :
M. GAGNON Michel, Ph.D, pr´esident M. PIERRE Samuel, Ph.D., membre et directeur de recherche M. QUINTERO Alejandro, Doct., membre

iii A` mes parents, Ronald et `a toute ma famille.

iv REMERCIEMENTS
J’´eprouve un immense plaisir d’exprimer ma gratitude envers Dieu, Jehovah, et envers toutes les personnes qui m’ont aid´e a` la r´ealisation de ce m´emoire.
Je veux d’abord remercier mon directeur de recherche, le Professeur Samuel Pierre, pour son encadrement, son support ﬁnancier et ses conseils n´ecessaires a` la r´ealisation de ce travail.
Mes remerciements s’adressent ´egalement a` M´eral Shirazipour charg´ee de mon encadrement chez Ericsson pour m’avoir guid´e, orient´e et soutenu dans toutes les ´etapes de ce projet de recherche.
Je tiens aussi `a remercier les honorables membres du jury qui ont accept´e d’´evaluer ce travail.
Enﬁn je veux remercier tous les coll`egues et amis du LAboratoire de recherche en R´eseautique et Informatique mobile (LARIM) pour leur collaboration, particuli`erement Mari`eme Diallo, Saida Maarouﬁ El Idrissi et Val´erie Justafort.

v
RE´ SUME´
Pendant de nombreuses ann´ees l’´evaluation des r´eseaux IP a ´et´e eﬀectu´ee de fa¸con objective en mesurant diﬀ´erents crit`eres qui d´eterminent la qualit´e du r´eseau. Ces crit`eres font r´ef´erence a` un ensemble de param`etres de qualit´e de service (QdS) que doit satisfaire le r´eseau dans le transport des paquets. Avec l’apparition des traﬁcs multim´edias tels que la voix sur IP et la vid´eo, les param`etres de QdS, quoique fondamentaux, se r´ev`elent ˆetre insuﬃsants puisqu’ils ne tiennent pas compte de ce qui se passe en amont et en aval du r´eseau. C’est ce qui explique l’´emergence du concept de la qualit´e de l’exp´erience (QdE) dans les r´eseaux IP pour les applications temps r´eel et interactives. Ce concept, exprimant le niveau de satisfaction de l’usager, permet de tenir compte de ce dernier dans la boucle de service. Ainsi, il s’av`ere n´ecessaire de disposer de m´ecanismes pour contrˆoler la QdE des usagers et qui sont capables de r´eagir lorsqu’une d´egradation se produit.
Les m´ecanismes propos´es jusqu’ici concernent, pour la plupart, les applications de voix sur IP ou la vid´eo. Ils agissent le plus souvent au niveau des ´equipements terminaux particuli`erement sur les codeurs ou les d´ecodeurs en modiﬁant leur d´ebit ou en faisant varier la taille du tampon de la gigue. De ce fait, ils ne sont appropri´es que pour les applications multim´edias et ne peuvent pas ˆetre appliqu´es aux autres applications interactives, les jeux vid´eo en ligne par exemple, auxquelles le concept de QdE s’est ´elargi. De plus, tr`es peu de travaux proposent d’utiliser les m´etriques de QdE pour avoir de meilleurs m´ecanismes de QdS.
Dans ce m´emoire, un nouveau m´ecanisme est propos´e qui, via des techniques utilis´ees pour faire de la QdS dans les r´eseaux IP, permet de r´eagir lorsque la QdE, pour une application, subit des d´egradations. Ce m´ecanisme comporte deux aspects. Le premier aspect consiste `a d´eﬁnir un cadre r´ealiste pour, d’une part, avoir la r´etroaction de la QdE (feed-back ) pour tout type d’applications, temps r´eel et non temps r´eel ; et d’autre part, introduire le feed-back de la QdE (re-feed-back ) dans le r´eseau de sorte que les diﬀ´erents nœuds puissent en ˆetre inform´es. La r´einsertion du feed-back de la QdE se fait ‘in band ’ a` travers l’entˆete IP. Le second aspect consiste `a proposer un nouveau m´ecanisme de classiﬁcation des paquets par les routeurs internes a` un domaine DiﬀServ. Ce m´ecanisme permet aux routeurs de tenir compte de la QdE lors de la mise en ﬁle d’attente des paquets d’un ﬂot de traﬁc qui doit b´en´eﬁcier d’une certaine garantie de QdE. L’information de la QdE sera accessible aux routeurs par le m´ecanisme de feed-back propos´e qui l’´ecrira dans l’entˆete des paquets IP.
Le m´ecanisme propos´e a ´et´e simul´e avec le simulateur NS-3. Les r´esultats obtenus d´e-

vi
montrent que l’utilisation du feed-back de la m´etrique de la QdE dans DiﬀServ permet d’obtenir de meilleurs r´esultats de QdE, prouvant ainsi qu’il est possible et utile d’impliquer la QdE dans les m´ecanismes de QdS.

vii
ABSTRACT
For many years the evaluation of IP networks was carried out objectively by measuring diﬀerent criteria that determine the quality of the network. Those criteria refer to a set of parameters of quality of service (QoS) that must be satisﬁed by the network while carrying packets. With the emergence of multimedia traﬃc such as Voice over IP (VoIP) and video, QoS parameters, though still very important, are yet not enough because they do not take into account what is happening at the end nodes. This has led to the emergence of the new concept of quality of experience (QoE) which expresses the user’s satisfaction regarding a given comunication service. Thus it is necessary to develop mechanisms in IP netwoks allowing one to monitor and enhance the users’ QoE.
So far, proposed mechanisms concern mostly VoIP or video applications and act, most of the time, at the terminal equipment, particularly at the codec to adapt, if possible, the data transmission rate or to modify the jitter buﬀer size. So, they are only suitable for multimedia applications and they do not take into account other interactive applications, like online games for example, to which QoE concept has widened. In addition, very few works propose to use QoE metrics to enhance QoS mechanisms.
In this master thesis, we propose a new QoS-based mechanism which is able to react when the QoE value of an application goes below a threshold. This mechanism has two aspects. The ﬁrst aspect is to deﬁne a realistic framework to have the QoE information echoed to the receiver on the one hand and secondly to insert the QoE information in the network so that nodes on the path can use it in QoS mechanisms. That is done ‘in band’ through IP packet header. The second aspect consist of proposing a new mechanism to classify packets by routers inside a DiﬀServ domain. This latter mechanism enables routers to take into account the QoE info. The QoE information will be accessible to the routers by the proposed feedback mechanism.
The proposed mechanism was simulated with the NS-3 simulator. The results show that the use of feedback of the QoE info in DiﬀServ achieves better QoE results, proving that it is possible and useful to involve the QoE in QoS mechanisms.

viii
TABLE DES MATIE`RES
DE´DICACE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . iii
REMERCIEMENTS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . iv RE´SUME´ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . v
ABSTRACT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . vii TABLE DES MATIE`RES . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . viii
LISTE DES TABLEAUX . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xi
LISTE DES FIGURES . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . xii LISTE DES SIGLES ET ABRE´VIATIONS . . . . . . . . . . . . . . . . . . . . . . . . xiv
CHAPITRE 1 INTRODUCTION . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 1.1 D´eﬁnitions et concepts de base . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 1.2 E´l´ements de la probl´ematique . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 1.3 Objectifs de la recherche . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6 1.4 Plan du m´emoire . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
CHAPITRE 2 DE´FIS DE QUALITE´ DE SERVICE ET IMPACT SUR LA QUALITE´ DE L’EXPE´RIENCE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7 2.1 Strat´egies et m´ecanismes ´el´ementaires de qualit´e de service . . . . . . . . . . . 7 2.1.1 Gestion active des ﬁles d’attente - AQM . . . . . . . . . . . . . . . . . 7 2.1.2 Ordonnancement de paquet . . . . . . . . . . . . . . . . . . . . . . . . 8 2.1.3 Routage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11 2.1.4 Contrˆole et lissage de traﬁc . . . . . . . . . . . . . . . . . . . . . . . . 11 2.2 Mod`eles de QdS - Architectures de QdS dans les r´eseaux IP . . . . . . . . . . 12

ix
2.2.1 Architecture de qualit´e de service - IntServ . . . . . . . . . . . . . . . . 13 2.2.2 Architecture de qualit´e de service - DiﬀServ . . . . . . . . . . . . . . . 15 2.3 Feed-back et qualit´e de service . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 2.3.1 Notiﬁcation explicite de la congestion ECN . . . . . . . . . . . . . . . . 21 2.3.2 Feed-back et User Datagram Protocol (UDP) . . . . . . . . . . . . . . . 23 2.3.3 R´eins´ertion de la notiﬁcation explicite de la congestion (Re-ECN) . . . 25 2.4 Qualit´e de service et qualit´e de l’exp´erience . . . . . . . . . . . . . . . . . . . . 27 2.4.1 Impact des m´ecanismes de qualit´e de service sur la qualit´e de l’exp´erience 28 2.4.2 Corr´elation entre la qualit´e de service et la qualit´e de l’exp´erience . . . 28 2.4.3 Am´elioration de la QdE par le feed-back de celle-ci . . . . . . . . . . . 30 2.4.4 M´ecanismes de qualit´e de service dans les r´eseaux IP ax´es sur la qualit´e
de l’exp´erience . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 30 2.5 Synth`ese des travaux . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 31
CHAPITRE 3 ME´CANISME DE QUALITE´ DE SERVICE AXE´ SUR LA QUALITE´ DE L’EXPE´RIENCE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 32 3.1 M´ecanisme de feed-back de la QdE . . . . . . . . . . . . . . . . . . . . . . . . 32 3.1.1 Feed-back de la QdE avec TCP . . . . . . . . . . . . . . . . . . . . . . 33 3.1.2 Feed-back de la QdE avec UDP . . . . . . . . . . . . . . . . . . . . . . 33 3.1.3 R´e-insertion de la QdE dans le r´eseau . . . . . . . . . . . . . . . . . . . 34 3.1.4 Format de l’information du feed-back de la QdE . . . . . . . . . . . . . 36 3.2 M´ecanisme de QdS propos´e bas´e sur la QdE . . . . . . . . . . . . . . . . . . . 37 3.2.1 Vue d’ensemble du m´ecanisme propos´e . . . . . . . . . . . . . . . . . . 38 3.2.2 M´ecanisme de traitement des paquets . . . . . . . . . . . . . . . . . . . 39
CHAPITRE 4 EXPE´RIMENTATIONS ET RE´SULTATS . . . . . . . . . . . . . . . . 45 4.1 Description du simulateur utilis´e . . . . . . . . . . . . . . . . . . . . . . . . . . 45 4.2 Environnement de simulations . . . . . . . . . . . . . . . . . . . . . . . . . . . 47 4.3 M´ethode d’´evaluation de la qualit´e de l’exp´erience . . . . . . . . . . . . . . . . 47 4.4 E´valuation du MOS dans le simulateur . . . . . . . . . . . . . . . . . . . . . . 49 4.5 Impl´ementation des m´ecanismes . . . . . . . . . . . . . . . . . . . . . . . . . . 50

x
4.6 Simulation de la voix sur IP . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53 4.7 Plan d’exp´erience . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53
4.7.1 Sc´enario simple . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53 4.7.2 Sc´enario complexe . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 57
CHAPITRE 5 CONCLUSION . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64 5.1 Synth`ese des travaux . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64 5.2 Limitations des travaux . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 64 5.3 Travaux futurs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 65
RE´FE´RENCES . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 67

xi LISTE DES TABLEAUX

Tableau 1.1 Tableau 1.2 Tableau 2.1 Tableau 3.1 Tableau 4.1 Tableau 4.2 Tableau 4.3 Tableau 4.4 Tableau 4.5

Mean Opinion Score - MOS . . . . . . . . . . . . . . . . . . . . . . . . 1 M´ethode d’´evaluation de la QdE . . . . . . . . . . . . . . . . . . . . . . 5 Codage des bits ECN . . . . . . . . . . . . . . . . . . . . . . . . . . . . 22 Format de l’information de la QdE . . . . . . . . . . . . . . . . . . . . 36 Mise en correspondance entre les valeurs de R et l’estimation du MOS . 49 Flots pour le sc´enario simple . . . . . . . . . . . . . . . . . . . . . . . . 54 Sc´enarios simul´es . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 58 R´esultats pour les diﬀ´erents sc´enarios avec et sans le m´ecanisme . . . . 58 Gain par rapport au cas ou` le m´ecanisme n’es pas utilis´e . . . . . . . . 59

xii LISTE DES FIGURES

Figure 1.1 Figure 1.2 Figure 2.1 Figure 2.2 Figure 2.3 Figure 2.4 Figure 2.5 Figure 2.6 Figure 2.7 Figure 2.8 Figure 2.9 Figure 2.10 Figure 2.11 Figure 2.12 Figure 2.13 Figure 2.14 Figure 2.15 Figure 2.16 Figure 3.1 Figure 3.2 Figure 3.3 Figure 3.4 Figure 3.5 Figure 3.6 Figure 3.7 Figure 3.8

QdS/QdE domaines d’application inspir´e de [6] . . . . . . . . . . . . . 3 QdS/QdE couches dans le mod`ele OSI . . . . . . . . . . . . . . . . . . 4 Gestion des ﬁles d’attente Drop Tail et RED . . . . . . . . . . . . . . . 9 Algorithme Seau `a Jetons . . . . . . . . . . . . . . . . . . . . . . . . . 12 Architecture IntServ . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14 Module d’un routeur d’entr´ee . . . . . . . . . . . . . . . . . . . . . . . 16 Algorithme Single Rate Three Color Marker (srTCM) . . . . . . . . . . 18 algorithme Two Rate Three Color Marker (trTCM) . . . . . . . . . . . 19 Illustration du traitement des paquets a` un routeur fronti`ere . . . . . . 19 Algorithme WRED . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 20 Traitement des paquets par un routeur interne . . . . . . . . . . . . . . 20 Format du type de paquet RTCP SR . . . . . . . . . . . . . . . . . . . 24 Format d’un paquet XR . . . . . . . . . . . . . . . . . . . . . . . . . . 24 Format d’un bloc de rapport XR . . . . . . . . . . . . . . . . . . . . . 25 Format d’un bloc de rapport VoIP . . . . . . . . . . . . . . . . . . . . 25 Entˆete de destination utilis´ee dans ConEx . . . . . . . . . . . . . . . . 26 Fonctionnement de ConEx . . . . . . . . . . . . . . . . . . . . . . . . . 26 QdS et QdE impactent l’une l’autre . . . . . . . . . . . . . . . . . . . . 27 Exemple de format d’un bloc de rapport XE pour le feed-back de la QdE 34 Entˆete de destination utilis´ee dans ConEx . . . . . . . . . . . . . . . . 35 Entˆete de destination pour le feed-back de la QdE sans ConEx . . . . . 35 M´ecanisme de feed-back propos´e . . . . . . . . . . . . . . . . . . . . . . 37 Vue d’ensemble . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 39 Classiﬁcation des paquets dans un routeur interne `a un domaine DiﬀServ 40 Classiﬁcation des paquets dans le m´ecanisme propos´e . . . . . . . . . . 42 Illustration de la classiﬁcation des paquets dans le m´ecanisme propos´e . 43

xiii

Figure 3.9 Figure 4.1 Figure 4.2 Figure 4.3 Figure 4.4 Figure 4.5 Figure 4.6 Figure 4.7 Figure 4.8 Figure 4.9 Figure 4.10 Figure 4.11 Figure 4.12 Figure 4.13 Figure 4.14 Figure 4.15 Figure 4.16

Algorithme de traitement des paquets dans le m´ecanisme propos´e . . . 44 Architecture logicielle de NS-3 inspir´e de [43] . . . . . . . . . . . . . . . 46 Statistique par ﬂot . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 49 Digramme des principales classes ajout´ees au simulateur . . . . . . . . 51 R´eseau du sc´enario simple . . . . . . . . . . . . . . . . . . . . . . . . . 54 Graphe de la variation du MOS pour le ﬂot 2 avec et sans le m´ecanisme 55 Variation des pertes pour le ﬂot 2 avec et sans le m´ecanisme . . . . . . 56 Variation du d´elai pour le ﬂot 2 avec et sans le m´ecanisme . . . . . . . 56 R´eseau du sc´enario complexe . . . . . . . . . . . . . . . . . . . . . . . 57 Graphe du MOS pour les ﬂots AF2 . . . . . . . . . . . . . . . . . . . . 60 D´elai moyen des ﬂots AF2 . . . . . . . . . . . . . . . . . . . . . . . . . 60 Graphe de la moyenne du MOS pour tous les ﬂots VoIP . . . . . . . . 61 Graphe du d´elai moyen tous les ﬂots VoIP . . . . . . . . . . . . . . . . 61 Graphe des pertes moyennes tous les ﬂots VoIP . . . . . . . . . . . . . 62 Graphe de la gigue moyenne des ﬂots VoIP . . . . . . . . . . . . . . . . 62 Graphe de la moyenne du MOS pour tous les ﬂots AF1 . . . . . . . . . 63 Graphique du debit des traﬁcs d’arri`ere-plan . . . . . . . . . . . . . . . 63

xiv LISTE DES SIGLES ET ABRE´VIATIONS

AF AMR ARED AQM AVQ BBRR CBR DF DiﬀServ DSCP DWRR ECN EF ETSI FIFO FQ FTP GSM IEEE IETF IntServ IP IPTV IPv4 IPv6 ITU MOS NS-2 NS-3 OSI PCAP PEAQ PESQ

Assured Forwarding Adaptive Multi-Rate Adaptative Random Early Detection Active Queue Management Adaptative Virtual Queue bit-by-bit Round-Robin Constant Bit Rate Default Forwarding Diﬀerentiated Services DiﬀServ Code Point Deﬁcit Weighted Round Robin Explicit Congestion Notiﬁcation Expedited Forwarding European Telecommunications Standards Institute First In First Out Fair Queueing File Transfer Protocol Global System for Mobile Communications Institute of Electrical and Electronics Engineers Internet Engineering Task Force Integrated Services Internet Protocol Internet Protocol television IP version 4 IP version 6 International Telecommunication Union Mean Opinion Score Network Simulator version 2 Network Simulator version 3 Open Systems Interconnection Packet Capture Perceptual Evaluation of Audio Quality Perceptual Evaluation of Speech Quality

xv

PHB PI PQ POLQA PSQM QdS QdE RED REM RFC RR RTCP RTP SLA srTCM TCP trTCM TSpec RSVP RSpec RTT UDP VoIP WBBRR WFQ WRED WRR

Per-Hop Behavior Proportional Integrator Priority Queueing Perceptual Objective Listening Quality Assessment Perceptual Speech Quality Measure Qualit´e de Service Qualit´e de l’Exp´erience Random Early Detection Random Exponential Marking Request for Comments Round-Robin Real-time Transport Control Protocol Real Time Protocol Service Level Agreement single-rate, three-color marker Transmission Control Protocol two-rate, three-color marker Traﬁc Speciﬁcation Resource Reservation Protocol Request Speciﬁcation Round Trip Time User Datagram Protocol Voice over IP Weighted bit-by-bit Round-Robin Weighted Fair Queueing Weighted Random Early Detection Weighted Round-Robin

1 CHAPITRE 1 INTRODUCTION

Au cours des vingt derni`eres ann´ees, la r´eseautique a connu une ´evolution importante. Nous avons assist´e, depuis l’av`enement du World Wide Web vers les ann´ees 1990, a` la naissance de nouveaux types de traﬁc et a` une augmentation consid´erable des usagers de l’internet. Cette ´evolution a fait naˆıtre le besoin d’avoir une gestion eﬃcace des ressources pour assurer que le r´eseau puisse acheminer correctement le traﬁc des usagers par la mise en place de politiques de qualit´e de service (QdS). De plus, les progr`es technologiques et le besoin d’avoir une connexion permanente ont contribu´e a` r´ealiser le passage des r´eseaux ﬁlaires aux r´eseaux sans ﬁl et mobiles. L’´emergence des technologies mobiles et l’int´erˆet grandissant des usagers pour les communications multim´edias font que ces derniers deviennent de plus en plus int´eress´es par la qualit´e qu’ils per¸coivent et non par les param`etres techniques relatives a` la transmission des traﬁcs.
En t´el´ephonie classique, la qualit´e per¸cue pas les usagers est un ´el´ement fondamental, car une communication t´el´ephonique eﬀectu´ee dans les mˆemes conditions peut ˆetre per¸cue diﬀ´eremment par deux couples de correspondants diﬀ´erents. L’un pourrait ˆetre tr`es satisfait de la qualit´e de la communication et l’autre plus ou moins satisfait. C’est la raison pour laquelle les op´erateurs utilisaient le Mean Opinion Score (MOS) [1] pour ´evaluer la qualit´e des appels t´el´ephoniques telle que per¸cue par les usagers. Il s’agissait de recueillir les opinions de diﬀ´erents usagers s´electionn´es suivant une m´ethodologie. Chaque opinion est exprim´ee par une note sur une ´echelle de 1 `a 5 et la moyenne des notes obtenues indiquait le niveau de satisfaction des usagers. Ce niveau de satisfaction est d´esign´e par le nouveau concept de qualit´e d’exp´erience (QdE) [2].

Tableau 1.1 Mean Opinion Score - MOS

MOS
5 4 3 2 1

Qualit´e
Excellent Bon
Satisfaisant M´ediocre Mauvais

D´efaut de la communication
Imperceptible Perceptible, pas nuisible
L´eg`erement nuisible Nuisible
Tr`es nuisible

Avec la convergence des r´eseaux et des services ou` l’infrastructure de l’internet est utilis´ee

2
pour transporter tout type de traﬁc, un int´erˆet sans cesse croissant se porte sur la QdE dans les r´eseaux IP si bien que son application s’est ´etendu au-del`a de la t´el´ephonie classique. Elle concerne aujourd’hui tous les services interactifs accessibles via un r´eseau IP tels que la voix sur IP (VoIP), la t´el´evision sur IP (IPTV), le web et les jeux vid´eo en ligne. La QdE devient un ´el´ement critique pour un fournisseur de service qui veut satisfaire ses clients et ainsi rester dans la comp´etition [3]. D’ou` la n´ecessit´e, pour les op´erateurs, de s’assurer de la ﬁd´elit´e de leurs utilisateurs, directement li´ee `a leur satisfaction, pendant qu’ils cherchent a` maximiser leur proﬁt en optimisant leurs ressources. A cet eﬀet, les op´erateurs doivent disposer, dans leurs r´eseaux, des m´ecanismes pour constamment controˆler la QdE et r´eagir d`es qu’une d´egradation se produit.
Dans la suite de ce chapitre nous d´ecrirons bri`evement les concepts de QdS et de QdE tout en faisant ressortir leurs diﬀ´erences. Ensuite certains ´el´ements de probl´ematique relatifs au concept de QdE seront expos´es a` la suite desquels les objectifs du m´emoire seront ´enonc´es. Enﬁn le plan du m´emoire sera fourni.
1.1 D´eﬁnitions et concepts de base
Qualit´e de service/Qualit´e de l’exp´erience
Il existe diﬀ´erentes d´eﬁnitions pour le concept de QdS. Dans [4], Crawley la d´eﬁnit comme un ensemble de requis que doit satisfaire un r´eseau en transportant un traﬁc donn´e. Ces requis sont traduits par des m´etriques qui font r´ef´erence a` la capacit´e du r´eseau `a transporter les informations en terme de disponibilit´e, au d´elai maximal que doit exp´erimenter les paquets, au taux de perte de paquets minimal que doit garantir le r´eseau, etc. [5]. Pour assurer que ces m´etriques aient des valeurs permettant de satisfaire les requis, diﬀ´erents strat´egies ou m´ecanismes sont utilis´es par les op´erateurs et administrateurs de r´eseaux. Ces techniques incluent le routage, la r´egulation de traﬁc, l’ordonnancement de paquets, le contrˆole du traﬁc, le contrˆole d’admission, etc.
La QdE d´esigne, suivant la d´eﬁnition de l’European Telecommunications Standards Institute (ETSI), une mesure de performance du point de vue de l’usager d’un syst`eme de communication bas´ee sur des mesures psychologiques objectives et subjectives [3]. Elle prend en compte des param`etres techniques tels que les param`etres de QdS et est inﬂuenc´ee par le contexte dans lequel la communication se fait et les attentes de l’usager. Elle est une mesure importante de la performance globale d’un syst`eme de communication qui prend en compte ce qui se passe en amont et en aval du r´eseau jusqu’aux terminaux des utilisateurs (Figure 1.1).
Pour ´eviter toute confusion entre les concepts de QdS et de QdE, il importe de bien saisir

3
leur diﬀ´erence. Consid´erant le mod`ele de r´ef´erence, OSI, la QdS concerne particuli`erement les couches inf´erieures jusqu’`a la couche transport et la QdE les couches sup´erieures (Figure 1.2).
La QdE revˆet une importance capitale pour les fournisseurs de services et les op´erateurs et est utile pour optimiser les services ou produits. Un fournisseur de services dont les clients exp´erimentent une bonne QdE jouit d’un avantage comp´etitif signiﬁcatif tandis que d’autres qui n’y mettent pas assez l’accent pourront connaˆıtre des pertes de revenue ils se verront perdre des clients.
Mesure de
QdE

Source

Codeur

Réseau cœur

Réseau d’accès

Transmission

Décodeur

QdS QdE

Affichage

Figure 1.1 QdS/QdE domaines d’application inspir´e de [6]

E´valuation de la QdE
En tant que mesure de performance d’un r´eseau et syst`eme de communication, d’apr`es l’ETSI, diﬀ´erentes m´ethodes existent pour ´evaluer la QdE. Ces m´ethodes d´ependent du type de l’application et sont cat´egoris´ees en m´ethodes subjectives, objectives et mod`eles de planiﬁcation r´eseau. Les m´ethodes subjectives se basent sur l’opinion des usagers sur un service multim´edia. Suivant ces m´ethodes, il est demand´e aux usagers d’indiquer par des notes variant de 1 a` 5 leur niveau de satisfaction et la moyenne donne le MOS. Quoiqu’elles soient consid´er´ees comme les m´ethodes les plus ﬁables pour ´evaluer la QdE, elles comportent, n´eanmoins, certains inconv´enients. En eﬀet, ces m´ethodes sont tr`es fastidieuses, consomment beaucoup de temps et ne peuvent ˆetre utilis´ees en temps r´eel. Pour pallier aux limitations des m´ethodes subjectives, des m´ethodes objectives ont ´et´e ´elabor´ees et standardis´ees. Elles permettent d’´evaluer la QdE en se basant sur un ensemble de param`etres li´es `a un service particulier ou sur des param`etres du signal a` la sortie pour estimer la QdE. Ces m´ethodes sont

4

Domaine de la QoE
Domaine de la QoS

application présentation
session transport réseau liaison physique

Figure 1.2 QdS/QdE couches dans le mod`ele OSI

subdivis´ees en quatre classes : Full Reference (FR), No Reference (NR), Reduced Reference (RR) et mod`ele de planiﬁcation r´eseau.
La cat´egorie FR regroupe les m´ethodes qui comparent le signal a` la source, consid´er´e comme une r´ef´erence, au signal d´eform´e `a la sortie pour donner une estimation de la QdE. Dans certains cas, les caract´eristiques du signal d’entr´ee peuvent ˆetre inconnues. A cet eﬀet les m´ethodes de la cat´egorie NR sont utilis´ees. Ces m´ethodes ´evaluent le signal a` la sortie et une estimation de la QdE est d´eduite. Les m´ethodes de la classe RR, en revanche, font un compromis entre les deux autres cat´egories. Elles analysent le signal a` la sortie a` la lumi`ere d’un ensemble r´eduit d’information sur le signal de r´ef´erence. Les mod`eles de planiﬁcation r´eseau sont consid´er´es comme une sous-cat´egorie des m´ethodes objectives car ils ne se basent pas sur les opinions des usagers. Cependant, ils ne proc`edent pas a` une analyse du signal r´eel mais ils utilisent une fonction qui fait le lien entre la QdE et des param`etres intrins`eques du r´eseau notamment ceux de la QdS. Un exemple pour cette cat´egorie est le mod`ele E (E-model ) [7].
Le Tableau 1.2 liste diﬀ´erentes m´ethodes pour ´evaluer la QdE.

5

Tableau 1.2 M´ethode d’´evaluation de la QdE

VoIP
PSQM, ITU-T Rec. P.861 (08/1996)
PESQ, ITU-T Rec. P.862 (02/2001) POLQA, ITU-T Rec. P.862 (01/2011) PEAQ, ITU-R Rec. BS.1387 E-Model, ITU-T Rec. G.107 (03/2005)

VIDEO ITU-T Rec. J.249
ITU-T Rec. J.146 TU-T Rec. J.144 ITU-R BT.1683 ITU-T Rec. J.247

WEB ITU-T Rec. G.1030

Jeux en ligne OPScore (Online Playability Score) propos´e par Ubicom
G-Model

1.2 E´l´ements de la probl´ematique

Comme mentionn´e ci-dessus, l’objectif de tout fournisseur de services ou op´erateur est de satisfaire leur client ou de leur permettre d’exp´erimenter une bonne qualit´e d’exp´erience tout en optimisant les ressources du r´eseau. E´tant donn´e que la QdE peut ˆetre consid´er´ee comme une m´etrique de performance globale d’un syst`eme de communication, son ´evaluation inclut celle de la QdS. De ce fait, diﬀ´erentes propositions ont ´et´e faites en vue de trouver une relation math´ematique entre la QdE et la QdS. A` travers ces propositions certains chercheurs se sont donn´es pour objectif de d´eﬁnir des relations math´ematiques telles que QdE = f (QdS) [8] dans l’objectif de controˆler la QdE par les param`etres de QdS. D’autres travaux portent sur des m´ecanismes qui, en utilisant la r´etroaction de la QdE ´evalu´ee au r´ecepteur, permettent d’agir sur le d´ebit des codeurs utilis´es dans le cas des applications de voix ou de vid´eo lorsque la QdE de l’usager se d´egrade [9]. Cette cat´egorie de travaux vise essentiellement a` am´eliorer la QdE dans le cas d’une communication de voix sur IP et ne saurait ˆetre utilis´ee pour d’autres types d’applications.
D’autres auteurs proposent de nouveaux m´ecanismes de QdS ou des modiﬁcations `a apporter a` des m´ecanismes existants pour pouvoir am´eliorer la QdE. Dans cette troisi`eme cat´egorie, certains se portent sur de nouveaux m´ecanismes de gestion des ﬁles d’attentes, l’ordonnancement de paquets et d’autres sur le routage [10]. La plupart des m´ecanismes propos´es ne r´eagissent pas lorsque la QdE de l’usager se d´egrade, et ceux qui le font, ne mettent l’accent que sur les applications multim´edias ou` il est possible de faire varier le d´ebit des codeurs et d´ecodeurs ; ce qui n’est pas valable pour les autres types d’application.

6
1.3 Objectifs de la recherche
L’objectif de ce m´emoire est de proposer un m´ecanisme qui permet a` un r´eseau IP de r´eagir lorsque la QdE, pour certaines applications, subit des d´egradations, en utilisant l’architecture de QdS Diﬀerentiated Services (DiﬀServ), dans le but d’assurer que le r´eseau garantisse un niveau acceptable de QdE pour ces applications. Les autres types de traﬁc ne doivent pas ˆetre p´enalis´es et l’usage des ressources du r´eseau doit ˆetre optimis´e. De mani`ere plus sp´eciﬁque le m´emoire vise `a :
1. Analyser les solutions d´ej`a impl´ement´ees ou propos´ees dans la litt´erature relatives a` l’am´elioration de la QdS dans les r´eseaux IP ;
2. Examiner les propositions existantes dans la litt´erature qui mettent en ´evidence l’impact de la QdS sur la QdE et vice-versa ;
3. Proposer un nouveau m´ecanisme r´ealiste qui permet d’ins´erer l’information de la QdE dans un r´eseau pour ˆetre utilis´ee dans des m´ecanismes de QdS existants ;
4. Proposer une modiﬁcation dans DiﬀServ pour prendre en compte l’information de la QdE ;
5. E´valuer la performance de la proposition au moyen de simulations.
1.4 Plan du m´emoire
Les objectifs 1 et 2 seront atteints a` travers la revue de litt´erature qui fera l’objet du chapitre 2 ou` nous pr´esenterons diﬀ´erentes techniques qui ont ´et´e propos´ees pour fournir la QdS dans les r´eseaux IP et montrerons, a` travers certains travaux, l’impact sur la QdE de la QdS et vice versa. Apr`es avoir fait ressortir les limites des solutions impl´ement´ees ou propos´ees relatives a` l’am´elioration de la QdE dans les r´eseaux IP, la proposition sera ´elabor´ee et les m´ecanismes seront d´ecrits dans le chapitre 2. Au chapitre 3, sera d´ecrit le simulateur utilis´e pour ´evaluer la performance des m´ecanismes propos´es et l’analyse des r´esultats sera eﬀectu´ee. Enﬁn, la conclusion fera la synth`ese. Nous y ferons ressortir les limitations des travaux et y ´evoquerons ´egalement certains pistes pour des travaux futurs.

7
CHAPITRE 2
DE´FIS DE QUALITE´ DE SERVICE ET IMPACT SUR LA QUALITE´ DE L’EXPE´ RIENCE
Les r´eseaux IP sont par essence de type best-eﬀort ou` tous les traﬁcs sont trait´es de la mˆeme fa¸con sans tenir compte de leurs besoins particuliers. Avec l’´evolution de l’internet, il a paru n´ecessaire d’adjoindre au mod`ele best-eﬀort, des techniques qui permettent d’utiliser plus eﬃcacement les ressources r´eseaux par une gestion pro-active de la congestion, d’assurer une utilisation ´equitable des ressources par les diﬀ´erents ﬂots de traﬁc et enﬁn de diﬀ´erencier les traﬁcs en leur accordant des priorit´es pour r´epondre `a leurs besoins sp´eciﬁques de qualit´e de service (QdS).
Dans ce chapitre seront pr´esent´es, dans un premier temps, diﬀ´erents strat´egies et mod`eles de QdS qui ont ´et´e impl´ement´es en vue d’am´eliorer la QdS dans les r´eseaux IP. Dans un second temps, seront pass´es en revue quelques propositions et travaux qui montrent l’impact de la QdS sur la QdE.
2.1 Strat´egies et m´ecanismes ´el´ementaires de qualit´e de service
Les strat´egies ´el´ementaires de QdS incluent : les m´ecanismes de gestion pro-active des ﬁles d’attente des routeurs qui aident a` r´eduire la congestion, les algorithmes d’ordonnancement, les techniques de controˆle de traﬁc etc. Bien qu’elles soient utilis´ees dans certains cas de fac¸on individuelle, elles constituent les modules sur lesquels se fondent les principales architectures de QdS.
2.1.1 Gestion active des ﬁles d’attente - AQM
Les m´ecanismes de gestion active des ﬁles d’attente (active queue management) sont des m´ecanismes de gestion pro-active des tampons des routeurs pour ´eviter que ces derniers soient congestionn´es. En eﬀet, les routeurs disposent de m´emoires tampons qui absorbent les paquets qui ne peuvent ˆetre transmis imm´ediatement autrement dit les paquets sont mis dans une ﬁle d’attente. Traditionnellement, ces ﬁles d’attente sont g´er´ees suivant le m´ecanisme DropTail illustr´e a` la Figure 2.1(a) qui rejette les paquets lorsque la m´emoire tampon du routeur est remplie. Bien que cette m´ethode soit la plus simple a` mettre en œuvre, elle a n´eanmoins

8
plusieurs inconv´enients. Elle est in´equitable en terme d’allocation de ressources aux diﬀ´erents ﬂots de traﬁc qui transitent `a travers les routeurs et peut entrainer des pertes de paquets en rafale en p´eriode de congestion. Les sources produisant des rafales importantes risquent d’ˆetre beaucoup plus p´enalis´ees que celles `a d´ebit constant et il est possible de se retrouver dans une situation ou` des ﬁles d’attente sont remplies en permanence, ce qui se traduira par une augmentation du d´elai exp´eriment´e par les paquets.
Les m´ecanismes d’AQM repr´esentent une alternative pour ´eviter ou diminuer la congestion dans le r´eseau, r´eduire le taux d’occupation des ﬁles d’attente en assurant une bonne utilisation des liens et une distribution ´equitable des ressources.
L’algorithme Red Early Drop (RED), illustr´e a` la Figure 2.1 (b) et propos´e par Sally Floyd [11] est l’algorithme d’AQM le mieux connu. Il utilise l’approche de la moyenne mobile exponentielle pour calculer la taille moyenne de la ﬁle Qmoy. Cette moyenne est compar´ee a` deux seuils d´eﬁnis pour la taille de la ﬁle, un seuil minimal thmin et un seuil maximal thmax. Lorsqu’un paquet arrive, l’algorithme compare la taille moyenne de la ﬁle d’attente `a ces deux seuils :
– Si la taille moyenne de la ﬁle Qmoy est inf´erieure au seuil minimal, thmin, le paquet est ins´er´e dans la ﬁle d’attente.
– Si la taille moyenne de la ﬁle Qmoy est sup´erieure au seuil minimal, thmin mais inf´erieure au seuil maximal, thmax, ce qui indique qu’il y a un d´ebut de congestion et le paquet est rejet´e avec une probabilit´e p variant lin´eairement entre 0 et Pmax.
– Si la taille moyenne de la ﬁle Qmoy est sup´erieure thmax, il d´enote une congestion persistante et le paquet est rejet´e pour ´eviter que la ﬁle ne soit pas remplie de fac¸on persistante.
2.1.2 Ordonnancement de paquet
L’ordonnancement des paquets est le m´ecanisme par lequel le routeur d´ecide du prochain paquet a` envoyer sur le lien. Quand plusieurs ﬁles d’attente existent dans le routeur, l’ordonnancement permet de choisir la prochaine ﬁle d’attente qui doit ˆetre servie. L’algorithme d’ordonnancement de base et le plus utilis´e est l’algorithme premier arriv´e, premier servi (FIFO) ou` les paquets sont servis dans l’ordre de leur arriv´ee. Il n’´etablit pas de distinctions entre les paquets de classes de traﬁc diﬀ´erentes ni ne controˆle le partage des ressources. En cons´equence, un ﬂot peut monopoliser toute la capacit´e d’un routeur dans une p´eriode ou` ses paquets arrivent en rafale. Pour pallier a` certains des inconv´enients de l’algorithme FIFO notamment en ce qui a trait au contrˆole du partage des ressources, la prise en charge de plusieurs classes de service ou la r´eduction du temps d’attente dans les ﬁles d’attente, deux

9

Probabilité p de rejet de paquet
1

Probabilité p de rejet de paquet
1 pmax

0

0

Taille de la Taille moyenne file de la file d’attente

thmin

thmax Taille moyenne de la file d’attente

(a)Drop Tail

(b)RED

Figure 2.1 Gestion des ﬁles d’attente Drop Tail et RED

autres types d’algorithmes ont ´et´e propos´es : les algorithmes avec priorit´e (priority queuing) et les algorithmes de partage de la bande passante.
Parmi les algorithmes avec priorit´e, l’algorithme priority queuing (PQ) est le plus populaire. Dans ce dernier, les paquets sont d’abord classiﬁ´es par le syst`eme avant d’ˆetre mis dans des ﬁles d’attente auxquelles des priorit´es sont accord´ees. Les diﬀ´erentes ﬁles d’attente sont servies dans l’ordre de leur priorit´e. La ﬁle la plus prioritaire est servie en premier et tant qu’elle contient des paquets aucune autre ﬁle n’est servie. A` l’int´erieur de chaque ﬁle l’ordonnancement se fait suivant l’algorithme FIFO. L’avantage principal de l’ordonnancement avec priorit´e est la subdivision du traﬁc en diﬀ´erentes classes de fa¸con a` accorder un traitement pr´ef´erentiel `a certains types de traﬁc. Par exemple, les priorit´es peuvent ˆetre ﬁx´ees de sorte que les applications temps r´eel re¸coivent des priorit´es sup´erieures par rapport aux autres applications. Cependant, ce type d’algorithme a un d´efaut ´evident en pr´esentant un risque de famine pour les ﬁles de basses priorit´es s’il y a constamment du traﬁc de classes de priorit´es ´elev´ees. Pour rem´edier a` ce probl`eme de famine, une variante de l’algorithme PQ, rate-controlled priority queuing, a ´et´e propos´ee aﬁn de limiter le traﬁc des classes de plus grande priorit´e. D’autres m´ecanismes externes peuvent aussi ˆetre utilis´es pour limiter les ﬂux qui partagent les ﬁles les plus prioritaires.
Les algorithmes Round Robin (RR) et Fair Queuing (FQ) sont utilis´es pour contrˆoler le partage de la bande passante. Se basant sur le principe de la r´epartition des paquets dans diﬀ´erentes ﬁles d’attente, ces algorithmes servent les ﬁles d’attente a` tour de roˆle. Ils parcourent en s´equence les diﬀ´erentes ﬁles et prennent le paquet se trouvant `a l’entˆete de chacune d’elle. Si une ﬁle est vide, ils passent a` la suivante. Un probl`eme d’´equit´e peut se

10
produire si les paquets dans les diﬀ´erentes ﬁles ne sont pas de la mˆeme taille. Pour pallier a` ce probl`eme ´eventuel d’´equit´e, diverses variantes ont ´et´e propos´ees. L’algorithmeWeighted Round Robin (WRR) associe un poids `a chacune des ﬁles d’attente. Lorsque l’ordonnanceur fait un tour, il sert dans chacune des ﬁles une quantit´e de paquets ´equivalent au poids de la ﬁle. Le poids d’une ﬁle se r´ef`ere `a la quantit´e de bande passante allou´ee a` cette ﬁle. Cet algorithme contrˆole la quantit´e de bande passante allou´ee `a chaque classe de traﬁc. Cependant, ce controˆle ne peut ˆetre eﬃcace que si tous les paquets ont la mˆeme taille ou quand la taille moyenne des paquets est connue `a l’avance.
L’algorithme Deﬁcit Weighted Round Robin (DWRR) permet d’adresser les limitations de l’algorithme WRR en garantissant une r´epartition juste de la bande passante lorsqu’il sert des ﬁles contenant des paquets de tailles in´egales. Dans cet algorithme, outre le poids (weight) qui indique la proportion de bande passante allou´ee `a une ﬁle, chaque ﬁle est conﬁgur´ee avec deux autres param`etres :
– Un compteur de d´eﬁcit (DeﬁcitCounter ) qui sp´eciﬁe le nombre total d’octets que la ﬁle peut transmettre a` chaque fois qu’elle est visit´ee par l’ordonnanceur. Le compteur de d´eﬁcit permet `a une ﬁle qui ne pouvait pouvait pas transmettre lors du passage pr´ec´edent de l’ordonnanceur, parce que la taille du paquet qui occupait l’entˆete de la ﬁle ´etait sup´erieure a` la valeur de DeﬁctCounter, d’avoir des cr´edits qu’elle peut utiliser lors du prochain passage de l’ordonnanceur.
– Un quantum de service qui est proportionnel au poids et qui est exprim´e en octets. Le compteur de d´eﬁcit pour une ﬁle est incr´ement´e par le quantum chaque fois que la ﬁle est visit´ee par l’ordonnanceur.
Typiquement, `a chaque tour, l’ordonnanceur visite chacune des ﬁles non vide et d´etermine la taille en octet du paquet se trouvant a` l’entˆete de la ﬁle. la variable DeﬁcitCounter est incr´ement´ee par la valeur du quantum. Si la taille du paquet se trouvant `a l’entˆete de la ﬁle est sup´erieure `a la variable DeﬁctCounter, alors l’ordonnanceur passe `a une autre ﬁle. Si elle est inf´erieure ou ´egale a` la variable DeﬁctCounter, alors le paquet est envoy´e sur le lien. L’ordonnanceur continue `a servir les paquets et a` d´ecr´ementer la variable DeﬁctCounter de la taille des paquets transmis jusqu’a` ce que la taille du paquet qui arrive a` l’entˆete de la ﬁle devienne inf´erieure a` DeﬁctCounter, ou si la ﬁle est vide. Si la ﬁle est vide, la valeur de DeﬁctCounter est mise `a z´ero et l’ordonnanceur passe a` une autre ﬁle non vide.
Plusieurs autres algorithmes ont ´et´e propos´es, cependant nous nous gardons de les pr´esenter. Pour plus de d´etails, le lecteur peut se r´ef´erer a` [12].

11
2.1.3 Routage
De fa¸con g´en´erale, le routage consiste en la d´etermination d’un chemin pour acheminer les donn´ees d’une application d’une source a` une destination. En r´ef´erence a` la QdS, le routage est utilis´e pour trouver, non pas un chemin, mais le meilleur chemin pour transporter les donn´ees d’une application tout en assurant une bonne utilisation et un partage juste des ressources. En choisissant le meilleur chemin, l’algorithme de routage doit permettre de satisfaire les contraintes de l’application en tenant compte de l’´etat actuel des ressources disponibles dans le r´eseau. Par exemple, pour les applications interactives fonctionnant en mode temps r´eel comme la voix sur IP, sera choisi un chemin permettant d’avoir un faible d´elai et un faible d´ebit tandis qu’un chemin oﬀrant un haut d´ebit et un long d´elai sera plus appropri´e pour eﬀectuer du t´el´echargement.
Diﬀ´erents types d’algorithmes de routage sont propos´es dans la litt´erature [13] pour faire la QdS. Ces algorithmes de routage peuvent ˆetre cat´egoris´es en algorithmes dynamiques ou statiques, en ligne ou hors ligne. Les algorithmes statiques utilisent des informations qui ne changent pas dans le temps pour ´etablir les chemins tandis que ceux qui sont statiques utilisent des informations li´ees a` l’´etat du r´eseau comme la bande passante disponible, la capacit´e des liens, etc. D’un autre cot´e, dans les algorithmes de routage en ligne, les chemins sont ´etablis sur demande. Ils consid`erent chaque requˆete de ‘chemin’ s´epar´ement ce qui empˆeche le routage a` nouveau des connections rout´ees. Les algorithmes hors ligne, par contre, sont utilis´es dans des connexions permanentes car de nouvelles routes ne peuvent ˆetre calcul´ees.
2.1.4 Contrˆole et lissage de traﬁc
Le controˆle et le lissage de traﬁc permettent d’assurer la r´egulation de traﬁc c’est-a`-dire le rythme moyen auquel les donn´ees sont transmises ainsi que les rafales. Le lissage du traﬁc assure le transport des paquets de sorte que le d´ebit ne d´epasse pas un seuil maximal. Les paquets qui ne sont pas directement achemin´es sont buﬀ´eris´es pour ˆetre achemin´es plus tard. Ce m´ecanisme n´ecessite une allocation suﬃsante de ressources au niveau des routeurs pour pouvoir mettre dans un tampon les paquets qui sont retard´es, ce qui permet d’´eviter des pertes de paquets et de pr´evenir la congestion. Le controˆle de traﬁc, de son cot´e, permet de controˆler un ou plusieurs ﬂots de traﬁc agr´eg´es, mais a` la diﬀ´erence du lissage de traﬁc, le traﬁc exc´edentaire n’est pas buﬀ´eris´e mais rejet´e.
Le lissage de traﬁc peut ˆetre impl´ement´e en utilisant l’algorithme seau a` jeton (token bucket) [14], d´ecrit `a la Figure 2.2, avec un seau de taille B qui repr´esente la taille de rafale permise et un d´ebit R de remplissage en jeton du seau. Quand un paquet arrive, la taille du

12
paquet est compar´ee au nombre de jetons disponibles dans le seau. Si le nombre d’octets du seau ´equivalent au nombre de jetons qu’il contient est au moins ´egal a` la taille du paquet, le paquet est transmis sans d´elai et le seau est d´ecr´ement´e du nombre de jetons ´egal au nombre d’octets du paquet. S’il y a moins de jetons que d’octets dans le paquet, le paquet est retard´e c’est-a-dire mis en ﬁle d’attente jusqu’a` ce qu’il y ait assez de jetons dans le seau.
Le seau a` jeton peut aussi ˆetre utilis´e pour eﬀectuer du controˆle de traﬁc. A la diﬀ´erence du lissage, lorsqu’un paquet arrive et que le nombre d’octets jetons est inf´erieur `a la taille du paquet, le paquet est rejet´e.

Générateur de jetons

Taux de remplissage en jetons R bps
Le routeur ajoute des jetons au seau à un taux R
Les jetons sont accumulés dans le sceau jusqu’a qu’il soit rempli; les jetons excédentaires sont rejetés

Seau à jetons (token bucket)

Taille du seau B bits (taille de raffale permise)

un paquet de taille b octets
arrive

Reste-il b oui octets du seau?
non

enlever b octets du saut

paquet mis dans la file d’attente pour être transmis

le paquet est soit bufférisé pour être transmis plus tard, soit mis dans une file d’attente mais marqué comme un paquet excédentaire, soit droppé
Figure 2.2 Algorithme Seau `a Jetons

2.2 Mod`eles de QdS - Architectures de QdS dans les r´eseaux IP
Dans un r´eseau IP, les m´ecanismes d´ecrits dans la pr´ec´edente section peuvent ˆetre combin´es pour constituer des architectures de QdS. Ces architectures permettent ainsi d’assurer une qualit´e de service de bout en bout r´epondant aux exigences des usagers d´eﬁnis dans

13
un contrat de service entre ces derniers et les fournisseurs de service. Deux architectures de qualit´e de service ont ´et´e standardis´ees par l’IETF
1. L’architecture des services diﬀ´erenci´es DiﬀServ 2. L’architecture a` int´egration de services IntServ
2.2.1 Architecture de qualit´e de service - IntServ
L’architecture a` int´egration de services, IntServ d´ecrit dans [15], a ´et´e con¸cue et adopt´ee a` l’IETF pour permettre `a internet de supporter la QdS, tout en garantissant un comportement pr´evisible du r´eseau vis a` vis des applications qui ont des besoins sp´eciaux en bande passante et/ou en d´elai. Cette architecture se repose sur le principe de la r´eservation de ressources.
L’architecture IntServ est subdivis´ee en un plan de contrˆole et un plan de donn´ees dont les principales composantes sont :
– Protocole de r´eservation : Il permet d’eﬀectuer la r´eservation de ressources pour un nouveau ﬂot qui requiert un niveau de QdS donn´e. Il met aussi a` jour la base de donn´ees de contrˆole de traﬁc utilis´ee par l’ordonnanceur pour d´eterminer le traitement a` oﬀrir aux paquets de chaque ﬂot.
– Controˆle d’admission : Quand un nouveau ﬂot doit ˆetre admis dans le r´eseau, le protocole de r´eservation invoque le m´ecanisme d’admission de controˆle. Il d´etermine s’il y a des ressources suﬃsantes pour garantir la QdS requise pour le ﬂot.
– Agent de gestion : Pour modiﬁer la base de donn´ees de controˆle de traﬁc qui commande le module d’admission de controˆle pour que ce dernier applique les politiques d’admission de controˆle.
– Protocole de routage : Responsable de la maintenance de la base de donn´ees de routage et permet d’indiquer le prochain saut, la prochaine route qui doit ˆetre prise pour chaque adresse de destination et pour chaque ﬂot.
– Classiﬁcation et s´election de route : Pour acheminer les paquets, controˆler le traﬁc et eﬀectuer la liaison entre les paquets qui arrivent `a l’interface du routeur et les classes de traﬁc.
– L’ordonnancement et mise en ﬁle des paquets.
Dans un r´eseau supportant IntServ, avant qu’un client ne commence `a envoyer des paquets dans le r´eseau, ce dernier envoie une requˆete vers sa destination, en sp´eciﬁant les caract´eristiques de son traﬁc (traﬃc speciﬁcation ou Tspec). Cette requˆete est ´evalu´ee par le r´eseau et une r´eponse est donn´ee au client pour lui indiquer si oui ou non il peut commencer a` transmettre.

14

Protocole de routage

Protocole de reservation

Protocole de reservation

Agent de gestion

Base de données de routage

Arrivée des paquets

Classification & choix de route

Base de données de contrôle de
trafic

Plan de contrôle

Ordonnanceur de paquets

File avec QdS
File best-effort
Plan de données

Figure 2.3 Architecture IntServ

Du point de vue du r´eseau, l’´etablissement de la communication implique plusieurs ´etapes qui sont eﬀectu´ees a` travers les principales composantes de l’architecture IntServ montr´ees `a la Figure 2.3.
Dans le plan de controˆle, l’´etablissement de la communication implique deux tˆaches principales au niveau du protocole de r´eservation. D’abord le protocole de routage doit d´eterminer le prochain hop vers lequel la requˆete doit ˆetre envoy´ee. Ensuite, se basant sur la d´ecision de routage, l’admission de contrˆole doit d´ecider s’il y a assez de ressources disponibles `a l’interface de sortie choisie pour accepter la nouvelle communication. Si la r´eservation est faite, les ressources engag´ees sont enregistr´ees dans la base de donn´ees de controˆle de traﬁc. Les informations relatives a` la r´eservation de ressources sont utilis´ees pour conﬁgurer le module de classiﬁcation et d’ordonnancement dans le plan de donn´ees. Quand un paquet arrive `a un routeur, le module de classiﬁcation choisit les paquets qui appartiennent aux ﬂots r´eserv´es et les ins`ere dans leurs ﬁles d’attente appropri´ees. L’ordonnanceur sert ensuite les diﬀ´erentes ﬁles suivant les informations de la r´eservation.
Le controˆle d’admission et la r´eservation de ressources sont bas´es, entre autres, sur l’information contenue dans le TSpec. La sp´eciﬁcation du traﬁc ou TSpec est une description du traﬁc pour lequel la requˆete de service a ´et´e eﬀectu´ee. En g´en´eral TSpec est une clause du contrat entre les ﬂots de donn´ees et le service. Une fois la requˆete de service est accept´ee, le module de service accepte de fournir la QdS demand´ee tant que les ﬂots de donn´ees du traﬁc demeurent tel qu’ils ont ´et´e d´ecrits par le TSpec. Le client d´esirant faire une r´eservation doit

15
eﬀectuer une requˆete de QdS (Request Speciﬁcation ou RSpec) associ´ee au TSpec, Deux grandes classes de service sont d´eﬁnies dans IntServ : Service garanti et charge
controˆl´ee. La classe de service garanti est utilis´ee pour des applications ayant besoin d’une garantie pour le d´elai et la largeur de bande. Les applications de cette classe de service doivent fournir un TSpec qui indique, entre autres, le d´ebit maximal, la longueur maximale des paquets et la dur´ee des rafales. Le RSpec doit contenir la largeur de bande requise par l’application pour pouvoir d´eterminer le d´elai maximal. La classe de service charge contrˆol´ee est utilis´ee pour des applications n’ayant pas besoin d’une borne garantie math´ematiquement pour le d´elai et la largeur de bande. Pour cette classe de service, on s’assure que l’application recevra un niveau de QdS comparable a` celle qu’elle aurait dans un r´eseau non charg´e, mais avec la capacit´e n´ecessaire.
Bien que d’autres protocoles puissent ˆetre utilis´es pour faire les requˆetes de QdS dans IntServ, le protocole RSVP [16] qui a ´et´e d´evelopp´e pour eﬀectuer la r´eservation de ressources sur internet, est fortement sugg´er´e [17]. Dans IntServ, RSVP permet `a l’application de signaler ses besoins en QdS en transmettant, entre autres, le TSpec, RSpec et le type de service. Deux types de message sont utilis´es par RSPV pour ´etablir une r´eservation : les messages PATH et les messages RESV. Le message PATH va de l’origine a` une ou plusieurs destinations et transporte l’information de la classiﬁcation et le TSpec. Apr`es avoir re¸cu le message PATH, la destination envoie le message RESV qui contient les informations de la session, le RSpec et la QdS. Une fois le message RESV re¸cu, l’´emetteur peut commencer a` envoyer des paquets via le chemin r´eserv´e.
Quoiqu’elle puisse permettre de garantir la QdS, l’architecture IntServ pr´esente de nombreux inconv´enients qui ont empˆech´e qu’elle soit d´eploy´ee a` grande ´echelle. D’abord, la granularit´e est trop petite ce qui peut donner lieu a` un tr`es grand nombre de r´eservation. Ensuite, la quantit´e d’informations stock´ees dans chaque nœud augmente avec le nombre de ﬂots, ce qui n´ecessite beaucoup de capacit´e de stockage et de traitement au niveau des routeurs. De plus, chaque routeur doit impl´ementer RSVP, les m´ecanismes d’admission de controˆle, la classiﬁcation et l’ordonnancement, ce qui rend le d´eploiement de IntServ aux routeurs tr`es complexe.
2.2.2 Architecture de qualit´e de service - DiﬀServ
Compte tenu des inconv´enients de l’architecture IntServ, l’IETF s’est pench´e sur des m´ecanismes plus simples pour satisfaire la QdS. Dans cette perspective, l’architecture DiﬀServ [18] a ´et´e propos´ee.Cette architecture se base sur la plupart des m´ecanismes ´el´ementaires de QdS d´ecrits dans la section 2.1. Elle d´eﬁnit un cadre qui permet de faire de la QdS dans

16
les r´eseaux IP en utilisant des m´ecanismes qui permettent de classiﬁer les paquets a` l’entr´ee du r´eseau, les v´eriﬁer pour ´eventuellement eﬀectuer des actions de mises en conformit´e, les marquer et les transf´erer `a travers les diﬀ´erents nœuds du r´eseau de fa¸con `a garantir le niveau de service sp´eciﬁ´e dans le contrat de service (SLA).
L’architecture DiﬀServ d´eﬁnit des zones de services diﬀ´erenci´es. Une zone de service diff´erenci´e est un domaine constitu´e de routeurs qui supportent les fonctionnalit´es de Diﬀserv. Nous y trouvons deux types de routeurs suivant qu’ils sont situ´es en bordure de la zone (Edge Node) ou a` l’int´erieur (Core Node).
Les routeurs d’entr´ee (Edge Node) sont responsables d’eﬀectuer la classiﬁcation et le conditionnement du traﬁc (Traﬃc classiﬁcation and conditionning).

heightheight

arrivée des paquets classification de paquets

Conditionnement de trafic Meter

Marquer

Dropper/ shapper

Figure 2.4 Module d’un routeur d’entr´ee

paquets marqués

Classiﬁcation
La classiﬁcation des paquets est le m´ecanisme qui permet d’identiﬁer les paquets et de les regrouper pour constituer des agr´egations de ﬂux. Les agr´egations de ﬂux constituent les classes de traﬁc. G´en´eralement cette classiﬁcation se base sur les informations contenues dans l’entˆete des paquets tels que le protocole utilis´e, les num´eros de port et les adresses IP. Elle peut aussi se baser sur des informations statiques telles que la taille des paquets et leur fr´equence d’arriv´ee. Des techniques de DPI (Deep Packet Inspection) peuvent ˆetre utilis´ees aﬁn de classer les paquets suivant toutes les informations qu’ils pourraient contenir. Aussi, lorsque les paquets arrivent au routeur d’entr´ee, ils sont examin´es en vu de les regrouper dans des classes de traﬁc. Tous les paquets appartenant a` une mˆeme classe se verront attribuer un mˆeme code et seront trait´es de la mˆeme fa¸con. Ce code est inscrit dans le champ Diﬀerentiated services (DS) de l’entˆete IPv4 ou dans le champ Traﬃc class de IPv6.

17
Conditionnement de traﬁc (Traﬃc conditionning )
Le conditionnement de traﬁc s’assure que, pour un ﬂux donn´e, le traﬁc n’exc`ede pas une certaine bande passante et que le proﬁl de traﬁc pour un ﬂot de traﬁc donn´e n’est pas viol´e. Le module de conditionnement est subdivis´e en 4 composantes : Meter, Marker, Shaper et Policer, comme l’indique la Figure 2.4.
La composante meter joue le roˆle de v´eriﬁcateur de traﬁc. Il compare le ﬂux de paquets qui entre dans le routeur avec ce qui est sp´eciﬁ´e dans le proﬁl du traﬁc et d´etermine si un paquet est en conformit´e avec le proﬁl. Tant que le traﬁc est conforme au proﬁl qui lui a ´et´e attribu´e, les paquets re¸coivent leur priorit´e et sont transf´er´es. Si le proﬁl est viol´e, les paquets non-conformes peuvent ˆetre soit mis en forme par le shaper (lissage de traﬁc), soit ´elimin´es par le dropper (controˆle de traﬁc) ou marqu´es. Le marquage eﬀectu´e lors du conditionnement consiste a` attribuer une pr´ec´edence a` un paquet suivant le r´esultat de la v´eriﬁcation. Si le paquet a ´et´e d´eja` marqu´e, il s’agit d’un re-marquage.
Plusieurs algorithmes peuvent ˆetre utilis´es pour faire du conditionnement de traﬁc, notamment :
– Le seau a` jeton (token bucket) d´ecrit a` la Figure 2.2 ; – L’algorithme Single Rate Three Color Marker (srTCM) qui eﬀectue la v´eriﬁcation d’un
ﬂux de paquets IP et qui marque les paquets suivant trois param`etres de traﬁc : le Committed Information Rate (CIR), le Committed Burst Size (CBS) et l’Excess Burst Size (EBS). Un paquet conforme est marqu´e vert, jaune s’il est un paquet exc´edentaire et rouge s’il est non conforme [19] (voir Figure 2.5) ; – L’algorithme Two Rate Three Color Marker (trTCM) eﬀectue la v´eriﬁcation d’un ﬂux de paquets IP et marque les paquets suivant deux param`etres de d´ebit : le Peak Information Rate (PIR) et le Committed Information Rate (CIR). Un paquet est marqu´e rouge s’il exc`ede le PIR sinon il est marqu´e soit jaune, soit vert suivant qu’il exc`ede ou non le CIR [20]. Cet algorithme est repr´esent´e `a la Figure 2.6.
Les routeurs internes sont constitu´es d’un module de classiﬁcation, de plusieurs ﬁles d’attente et des modules d’ordonnancement. La classiﬁcation eﬀectu´ee par les routeurs internes consiste a` regrouper les paquets en fonction de leur ´etiquette DSCP et a` les ins´erer dans leur ﬁle d’attente respective. Chaque ﬁle d’attente repr´esente une classe de service. Diﬀserv d´eﬁnit plusieurs types de classes de traﬁc qui d´eterminent le comportement des routeurs (PHB : Per Hop Behaviour ) vis-a`-vis des paquets.
Trois principaux types de comportement ou PHBs ont ´et´e d´eﬁnis dans l’architecture DiﬀServ. Ce sont :

18

Générateur de jetons

Taux de remplissage en jetons CIR bps

Jetons en excès

Les jetons sont accumulés dans le seau jusqu’à qu’il soit rempli; les jetons excédentaires sont transférés dans E.

seau à jetons (token bucket)
C

taille de raffale (CBS)

seau à jetons (token bucket)
E

taille de raffale (EBS)

un paquet de taille b octets arrive

reste-il b octets oui dans le seau C?
non

enlever b octets du seau C

paquet marqué vert

reste-il b octets oui dans le seau C?
non

enlever b octets du seau E

paquet marqué jaune

paquet marqué rouge

Figure 2.5 Algorithme Single Rate Three Color Marker (srTCM)

1. Le comportement exp´edi´e EF [21] qui d´ecrit le comportement d’une classe de traﬁc ou` le service est garanti avec un faible d´ebit, un faible taux de perte de paquets et une gigue faible. Il s’assure que le d´ebit du traﬁc de cette classe soit toujours ´egal ou sup´erieur `a un certain seuil.
2. Le comportement assur´e AF [22] qui est compos´e de plusieurs classes de services au sein desquelles une autre diﬀ´erentiation qui se base sur la pr´ec´edence des paquet est introduite. La pr´ec´edence d’un paquet reﬂ`ete sa priorit´e en terme de possibilit´e pour qu’il soit rejet´e par le routeur lorsqu’une situation de congestion se pr´esente. Quatre classes AF ont ´et´e d´eﬁnies et pour chacune de ces classes il existe trois (3) niveaux de pr´ec´edence. Le comportement assur´e AF comporte donc 12 PHBs. Aucune relation n’existe entre les classes et il est recommand´e que tous les paquets d’un mˆeme ﬂux appartiennent `a une mˆeme classe. Les PHB de la classe AF sont de type AFij ou` i identiﬁe la classe et j la pr´ec´edence.
3. Le comportement DF qui est utilis´e pour les traﬁcs de type best-eﬀort ou` la qualit´e de service n’est pas garantie.

19

Générateur de jetons

Taux de remplissage en jetons CIR bps

Taux de remplissage en jetons PIR bps avec PIR ≤ CIR

Les jetons sont accumulés dans le seau C jusqu’à qu’il soit rempli

seau à jetons (token bucket)
C

taille de raffale (CBS)

seau à jetons (token bucket)
E

taille de raffale (EBS)

un paquet de taille b octets arrive

reste-il b octets oui dans le seau C?
non
paquet marqué rouge

reste-il b octets oui enlever b octets

dans le seau E?

des seaux C et E

non

enlever b octets du seau C

paquet marqué vert

paquet marqué jaune
Figure 2.6 algorithme Two Rate Three Color Marker (trTCM)

Token buket

Classification des paquets

Arrivée des paquets

trCTM srCTM

Lissage, rejet, marquage

Paquets marqués

Vérification (metering)
Figure 2.7 Illustration du traitement des paquets a` un routeur fronti`ere

Il existe une correspondance entre les ﬁles d’attente des routeurs et les diﬀ´erentes classes de traﬁc. Suivant la classe de traﬁc, divers algorithmes peuvent ˆetre utilis´es pour la gestion de la ﬁle d’attente correspondante. Pour la classe DF, les algorithmes drop-tail ou RED d´ecrits `a la Figure 2.1, peuvent ˆetre utilis´es. L’algorithme Weighted Early Drop (WRED) est recommand´e pour les classes AF. Cet algorithme dont le comportement est montr´e `a la Figure 2.8 a ´et´e propos´e par CISCO pour ´etendre l’algorithme RED aﬁn de prendre en

20
compte divers ﬂux de traﬁc dans une mˆeme ﬁle d’attente.
Probabilité p de rejet de paquet

1

pmax2 pmax1 pmax0
0

thmin2

thmax2 thmin1

thmax1

thmin0

thmax0

Taille moyenne de la file d’attente

Figure 2.8 Algorithme WRED

L’ordonnancement eﬀectu´e par les routeurs internes d´epend des requis des ﬁles d’attente en termes de bande passante ou de retard moyen que doivent exp´erimenter les paquets. Les algorithmes d’ordonnancement prioritaires, par exemple, peuvent ˆetre utilis´es pour les ﬂux de traﬁc EF. Pour les ﬂux AF, les algorithmes d’ordonnancement RR ou WRR et leurs variantes peuvent ˆetre utilis´es.
Token buket

Classification de paquets

Drop Tail WRED WRED RED AQM

ordonn anceur
EF AF1 AF2 DF

Figure 2.9 Traitement des paquets par un routeur interne

21
2.3 Feed-back et qualit´e de service
Dans un r´eseau, le feed-back est le moyen par lequel une source peut ˆetre inform´ee de l’´etat du r´eseau. Actuellement dans les r´eseaux IP, le feed-back est utilis´e pour permettre aux routeurs de controˆler la congestion en informant la source d’une situation de congestion naissante dans le r´eseau. Dans ce cas, la source peut ˆetre inform´ee soit par un m´ecanisme de feed-back implicite ou explicite.
Dans le feed-back implicite, la source d´etecte la situation de congestion par des constats qu’elle fait localement comme c’est le cas dans le protocole TCP. Dans TCP, les constats eﬀectu´es par la source incluent l’expiration du timer de retransmission lorsque les acquittements ne sont pas re¸cus, le retard dans la r´eception des acquittements et l’arriv´ee des acquittements dupliqu´es. Les principales causes des ces situations sont le d´elai et les pertes de paquets. Dans ce type feed-back, les routeurs ne font qu’´eliminer des paquets lorsqu’il y a congestion et s’attendent a` ce que la source r´eponde a` ces pertes de paquets en r´eduisant son d´ebit d’´emission.
Le feed-back implicite qui r´esulte du rejet des paquets par les routeurs lorsque ceuxci sont congestionn´es pr´esente quelques inconv´enients. La perte des paquets constitue un gaspillage des ressources r´eseau utilis´ees pour transporter le paquet de sa source au routeur exp´erimentant la congestion. De plus, une perte de paquet n’implique pas n´ecessairement qu’il y a congestion.
D’ou` la n´ecessite d’avoir un moyen d’indiquer a` la source de fac¸on explicite quand une congestion se pr´esente pour qu’elle puisse r´eduire son d´ebit. Plusieurs propositions ont ´et´e faites quant aux m´ecanismes que les routeurs doivent utiliser pour eﬀectuer la notiﬁcation. L’un de ces m´ecanismes est le protocole Explicit Congestion Notiﬁcation (ECN) [23] qui a ´et´e adopt´e a` l’IETF.
2.3.1 Notiﬁcation explicite de la congestion ECN
Le protocole ECN permet `a un ´emetteur d’ˆetre inform´e de mani`ere explicite d’une congestion naissante dans le r´eseau. Ce protocole se base sur les m´ecanismes d’active queue management ou` au lieu d’´eliminer les paquets lorsque la taille des ﬁles d’attente des routeurs atteint un certain seuil, les routeurs les marquent de fa¸con a` informer le r´ecepteur que des ﬁles d’attente commencent a` ˆetre remplies. Le r´ecepteur, de son cot´e, fera l’´echo de l’information de la congestion naissante a` la source pour que celle-ci anticipe la congestion, en r´eduisant son d´ebit avant que des paquets ne commencent `a ˆetre ´elimin´es par les routeurs.

22

Deux bits de l’entˆete IP des paquets sont utilis´es par ECN pour transporter l’information de la congestion naissante. Le bit ECN Capable Transport (ECT) et le bit Congestion Experienced (CE). Ce sont les bits 6 et 7 du champ DSCP de l’entˆete IPv4 ou du champ traﬁc class de l’entˆete IPv6. Ces bits sont cod´es comme indiqu´e au Tableau 2.1.

Tableau 2.1 Codage des bits ECN

Bit ECE
0 0 1 1

Bit CE
0 1 0 1

Pas de ECN Source et destination supportent ECN Source et destination supportent ECN
Congestion

Pour identiﬁer la congestion et marquer les paquets, les routeurs utilisent le mˆeme algorithme RED d´ecrit au troisi`eme paragraphe de la section 2.1.1 mais modiﬁ´e pour identiﬁer les diﬀ´erentes combinaisons des bits ECN. Le fonctionnement est le suivant :
– Si la taille moyenne de la ﬁle Qmoy est inf´erieure au seuil minimal, thmin, le paquet est transmis sans tenir compte du fait que ECN soit activ´e ou non.
– Si la taille moyenne de la ﬁle Qmoy est comprise entre thmin et thmax, le champ ECN de l’entˆete IP est examin´e et suivant la valeur dans le champ ECN, l’un des sc´enarios suivant se produit : – Si ECN = “00”, alors la source et la destination ne supportent pas ECN et le paquet est trait´e suivant l’algorithme RED. – Si ECN = “01”ou“10”, alors l’algorithme RED d´etermine si le paquet doit ˆetre rejet´e. Si l’algorithme indique que le paquet doit ˆetre rejet´e, alors le routeur met le champ ECN a` “11” et le paquet est transmis. – Si ECN = “11”, alors le paquet est transmis. Cela suppose qu’un routeur en amont commence a` exp´erimenter de la congestion.
– Si la taille moyenne de la ﬁle Qmoy est sup´erieure thmax, le paquet subit le mˆeme traitement que dans RED.
Lorsque la destination re¸coit le paquet avec le champ ECN a` “11”, qui signiﬁe que ce dernier a exp´eriment´e de la congestion, elle en informe la source. Si TCP est le protocole de transport utilis´e, l’´echo de l’information se fait dans les acquittements,c’est-`a-dire paquets ACK envoy´es de retour a` la source a` travers le champ ECE de l’entˆete du TCP.

23
2.3.2 Feed-back et User Datagram Protocol (UDP)
Beaucoup de traﬁc temps r´eels utilisent le protocole de transport UDP qui, `a la diﬀ´erence de TCP, ne dispose pas de m´ecanisme d’acquittement. Pour assurer un transport ﬁable des donn´ees temps r´eel, deux protocoles suppl´ementaires sont utilis´es, RTP [24] et RTCP. Ce sont deux protocoles de la couche application qui s’appuient sur le protocole de transport UDP pour le transport des traﬁcs temps r´eel. RTP s’occupe de la transmission des donn´ees temps r´eel et RTCP surveille la qualit´e de service et achemine des informations sur les participants d’une session et sur la qualit´e de service.
RTCP envoie p´eriodiquement des paquets de contrˆole a` tous les participants d’une session en utilisant le mˆeme m´ecanisme de distribution que pour les paquets de donn´ees dans le but principal de faire l’´echo de la qualit´e de la distribution de donn´ees. Pour chaque type d’information transport´e par RTCP, un type de paquet diﬀ´erent est utilis´e. Ces types de paquet sont :
– SR (Sender Report) qui contient des statistiques de transmission et de r´eception pour les participants qui sont des ´emetteurs actifs.
– RR (Receiver Report) qui contient des statistiques de r´eception pour les participants qui ne sont pas des ´emetteurs actifs mais r´ecepteurs d’une session.
– SDES (Source Description) qui d´ecrit la source. – BYE qui permet a` une station d’indiquer la ﬁn de sa participation a` une session. – APP qui est un paquet de signalisation sp´eciﬁque a` une application.
Les types de paquet SR et RR sont utilis´es pour le feed-back sur la transmission des donn´ees aux participants d’une session. Ces types de paquets ont le mˆeme format et comportent une entˆete, des informations sur la source qui envoie les paquets SR ou RR, un ou plusieurs blocs de rapport de r´eception et une extension. Les blocs de rapport fournissent des statistiques sur les donn´ees re¸cues d’une source particuli`ere indiqu´ee dans le bloc de rapport. L’extension est utilis´ee pour faire l’´echo d’autres informations additionnelles sp´eciﬁques a` une application, qui doivent ˆetre rapport´ees r´eguli`erement sur l’´emetteur et le r´ecepteur. Le format d’un paquet SR est illustr´e a` la Figure 2.10.
Un nouveau type de paquet, Extended Report (XR) [25] dont le format est d´ecrit `a la Figure 2.11, a ´et´e d´eﬁni pour le protocole RTCP. Les paquets XR oﬀrent de nouvelles possibilit´es en ce qui concerne le type et la quantit´e d’informations qui peuvent ˆetre transport´es. Ces paquets peuvent ˆetre utilis´es pour de multiples applications. Ils sont constitu´es d’une entˆete suivie d’un ou de plusieurs blocs de rapport dont le format est illustr´e `a la Figure 2.12 pour diﬀ´erentes m´etriques d´ecrivant l’´etat de la communication (voir Figure 2.11). Ces paquets peuvent ˆetre utilis´es pour de multiples applications et dans divers contextes. En particulier,

24

0

8

16

24

V=2 P RC

PT=RR=201

Length

SSRC of packet sender

NTP Timestamp (most significant word)

NTP Timestamp (least significant word)

RTP Timestamp

Sender’s packet count

Sender’s octet count

SSRC_1 (SSRC of first source)

Fraction lost Cumulative number of packets lost

Extended highest sequence number received

Interarrival jitter

Last SR (LSR)

Delay since last SR (DLSR)

SSRC_2 (SSRC of second source)

...

Profile-specific extensions

32 header
Sender info
Report bloc 1
Report bloc 2, etc

Figure 2.10 Format du type de paquet RTCP SR

il existe un bloc de rapport sp´eciﬁque pour la voix sur IP illustr´e a` la Figure 2.13.

0

8

16

24

32

V=2 P reserved PT=SR=207

Length

SSRC

Report blocs

Figure 2.11 Format d’un paquet XR

Dans [26] Westerlund et al ont fait une proposition qui est adopt´ee `a l’IETF sur la fac¸on d’utiliser ECN avec RTP sur UDP en utilisant le protocole RTCP comme m´ecanisme pour le feed-back. Un nouveau bloc de rapport XR est ainsi d´eﬁni pour contenir les informations

25

0

7

15

31

reserved

Type-specific

Block length

type-specific block contents

Figure 2.12 Format d’un bloc de rapport XR

0

8

16

24

32

BT=7

reserved

Block length = 8

SSRC of source

loss rate

discard rate burst density gap density

burst duration

gap duration

round trip delay

end system delay

signal level

noise level

RERL

Gmin

R factor

ext. R factor

MOS-LQ

MOS-CQ

RX config

reserved

JB nominal

JB maximum

JB abs max

Figure 2.13 Format d’un bloc de rapport VoIP

relatives `a ECN.
2.3.3 R´eins´ertion de la notiﬁcation explicite de la congestion (Re-ECN)
Dans le protocole ECN, seuls les nœuds exp´editeurs et ´emetteurs peuvent ˆetre au courant d’une situation de congestion dans le r´eseau. Dans certains cas, il peut ˆetre utile a` un nœud quelconque d’ˆetre inform´e de la congestion en amont ou en aval par rapport `a lui mˆeme. A l’IETF, le protocole exp´erimental Re-ECN [27] a ´et´e d´eﬁni dans ConEx [28] qui est un nouveau cadre propos´e en vue de g´erer la congestion dans internet. Ce protocole, bas´e sur le protocole ECN, r´eintroduit dans le r´eseau le feed-back ECN pour permettre a` une source d’informer le r´eseau de la congestion exp´eriment´ee par les pr´ec´edents paquets d’un ﬂux de traﬁc dans le but :

26
– de d´eterminer a` partir de n’importe quel endroit du r´eseau la congestion en amont et en aval de ce point,
– d’imputer la responsabilit´e de congestion aux sources qui en prennent part, – de r´ealiser du controˆle de traﬁc, etc.
Dans IPv4, Re-ECN utilise le dernier bit non-utilis´e de l’entˆete des paquets IP associ´e aux deux bits ECN. Pour IPv6, IETF propose d’utiliser une entˆete d’option de destination [29] puisqu’il ne reste plus de bits disponibles dans l’entˆete IPv6 des paquets. Le format de cette entˆete d’option est fourni `a la Figure 3.2.

0

8

XLE C

16

24

32

Option Type Option Length

reserved

Figure 2.14 Entˆete de destination utilis´ee dans ConEx

source 4

5

1

2

destination
3

Figure 2.15 Fonctionnement de ConEx
Le fonctionnement du protocole, explicit´e a` la Figure 2.15, est le suivant : 1. La source envoie les paquets appartenant `a un ﬂux. 2. Les routeurs sur le chemin marque les paquets au lieu de les ´eliminer (fonctionnement
ECN). 3. La destination renvoie l’information de la congestion exp´eriment´ee par les paquets IP
en utilisant les segments TCP (notamment les paquets ACK).

27
4. La source re¸coit la notiﬁcation de la congestion et TCP agit comme si des paquets ´etaient perdus.
5. La source marque les paquets subs´equents en modiﬁant dans le cas de IPv4 le bit Re-ECN ou la nouvelle entˆete dans IPv6.
Le r´eseau peut utiliser cette information dans le cadre de nouveaux m´ecanismes de controˆle d’admission, de controˆle de traﬁc, etc.
2.4 Qualit´e de service et qualit´e de l’exp´erience La QdE prend en compte la perception des utilisateurs, leurs exp´eriences, leurs attentes
et la performance des r´eseaux qui est exprim´ee typiquement par la QdS. Diﬀ´erents travaux ont ´et´e eﬀectu´es pour ´evaluer l’impact que certains m´ecanismes de QdS peuvent avoir sur la QdE et comment ces derniers peuvent contribuer dans certaines conditions `a garantir une bonne QdE dans les r´eseaux IP. La QdS ´etant d´etermin´ee par un ensemble de param`etres objectifs, des propositions ont ´et´e faites en vue de trouver une relation entre la QdE et ces param`etres. D’autres propositions se portent sur la mise en œuvre d’architectures permettant de surveiller la QdE pour des applications de type VoIP ou IPTV pour pouvoir r´eagir lorsque la QdE se d´egrade. Une autre cat´egorie de travaux proposent des m´ecanismes de QdS dont le fondement est la QdE.
QdS QdE
réseau
Figure 2.16 QdS et QdE impactent l’une l’autre

28

2.4.1 Impact des m´ecanismes de qualit´e de service sur la qualit´e de l’exp´erience
Dans [30], Reguera et al, ´evaluent l’impact de diﬀ´erents m´ecanismes de gestion de ﬁle d’attente sur la qualit´e de la voix sur IP. Cependant au lieu de consid´erer des m´etriques de r´eseau (c’est-`a-dire perte de paquets, d´elai et gigue) qui ne sont pas li´ees `a la perception des utilisateurs, comme c’est le cas dans d’autres travaux [31], ils consid`erent le MOS qui est la m´etrique qui exprime la QdE des usagers d’un service donn´e. Des m´ecanismes am´elior´es d’active queue management tels que Adaptative RED (ARED) [11], Proportional Integrator (PI) [32], Random Exponential Marking (REM) [33] et Adaptative Virtual Queue (AVQ) [34] ont ´et´e utilis´es. En utilisant l’algorithme E-model [7] pour ´evaluer le MOS, les auteurs ont montr´e, au moyen de simulations, que l’utilisation des m´ecanismes d’active queue management peut oﬀrir un niveau de satisfaction ad´equat aux utilisateurs dans le cas de l’application VoIP. Ainsi la voix sur IP peut tirer parti de ces m´ecanismes l`a ou` il est diﬃcile d’impl´ementer des techniques traditionnelles de QdS telles que l’utilisation des ﬁles de priorit´e. Particuli`erement les strat´egies adaptatives comme ARED et AVQ donnent de meilleures performances ´etant donn´e qu’ils peuvent r´egler leurs param`etres suivant les conditions ﬂuctuantes du r´eseau.

2.4.2 Corr´elation entre la qualit´e de service et la qualit´e de l’exp´erience
Il est ´evident que les probl`emes g´en´eriques de QdS (par exemple, les pertes, le d´elai, la gigue, le r´e-ordonnancement, les diminutions de d´ebit) impliquent des probl`emes g´en´eriques de QdE (par exemple, des rayures dans une image vid´eo, des artefacts, des temps d’attentes excessifs, etc). Dans cette perspective divers chercheurs se sont ´evertu´es `a trouver une relation math´ematique entre la QdE et la QdS c’est-`a-dire trouver une fonction f telle que QdE = f (QdS) avec comme objectif principal le controˆle de la QdE par la QdS.
L’un des premiers travaux [8] r´ealis´e dans ce sens a d´eduit que la relation entre la QdE et la QdS est non lin´eaire. Les auteurs ont proc´ed´e a` des exp´erimentations dans lesquelles la QdE est consid´er´ee comme ´etant le taux d’annulation CR d’un service internet qui est collect´e en tenant compte de diﬀ´erents crit`eres de QdS dans une exp´erience limit´ee d’une dur´ee limit´ee dans le temps. La relation entre CR, repr´esentant la QdE, a ´et´e ´etudi´ee par rapport `a la modiﬁcation d’un param`etre de QdS dans chaque exp´erience. Deux param`etres de QdS, la bande passante B et le d´elai de livraison DT, ont ´et´e utilis´es. D’apr`es les courbes obtenues, CR qui repr´esente la QdE et la bande passante B qui repr´esente la QdS sont reli´es par une fonction logarithmique d´ecroissante de sorte que CR d´ecroˆıt quand B croˆıt :

CR = −α1 ln B + β1

(2.1)

29

QdE = −α1 ln QdS + β1

(2.2)

Avec α1, β1 des param`etres positifs.

D’un autre cot´e CR et le d´elai de livraison du r´eseau DT qui repr´esente la QdS varient

lin´eairement dans le mˆeme sens ; c’est-a-dire CR croˆıt lin´eairement en fonction du d´elai de

livraison :

CR = −α2DT + β2

(2.3)

QdE = −α2 ln QdS + β2

(2.4)

Avec α2 et β2 des param`etres positifs. Cependant aucune relation directe n’a ´et´e trouv´ee entre CR et la latence dans le r´eseau
pour un intervalle donn´e.

Dans [35], M. Fiedler et al, ont propos´e une formule g´en´erique selon laquelle la QdE et les param`etres de QdS sont li´es par une relation de type exponentiel appel´ee hypoth`ese IQX. En g´en´eral plus la sensibilit´e subjective de la QdE est ´elev´ee, plus ´elev´ee est la qualit´e exp´eriment´ee. Si la QdE est tr`es ´elev´ee, une petite d´egradation entraˆıne une grande diminution de la QdE, par contre si la QdE est faible, cette mˆeme d´egradation a un impact moindre. Dans ce contexte, les auteurs supposent que le changement de QdE d´epend du niveau actuel de qualit´e d’exp´erience, compte tenu du mˆeme taux de changement de la valeur de QdS, mais avec un signe diﬀ´erent. Ils aboutissent `a la relation suivante :

QdE = α exp −βQdS + γ

(2.5)

Avec α ,β et γ des param`etres positifs. La validit´e de cette relation a ´et´e prouv´ee par des exp´erimentations.
Une proposition plus r´ecente [5] a ´etabli une corr´elation simple entre la QdS et la QdE. Cette corr´elation qui se base sur une relation polynomiale d’ordre n telle que :

QdE = anQdSn + an−1QdSn−1 + . . . + a1QdS + a0

(2.6)

Ce mod`ele pr´esente une approximation mais aussi une g´en´eralisation des mod`eles propos´es ant´erieurement. Il vise `a faire de la corr´elation QdS/QdE le plus simple possible de mani`ere a` d´evelopper des boucles de contrˆole simple pour controˆler la QdE. Cela aura l’avantage de diminuer le couˆt de calcul au sein du r´eseau. Il s’adapte ´egalement aux diﬀ´erentes formes des courbes de corr´elation d´eﬁnies pr´ec´edemment dans [8] et [5].

30
2.4.3 Am´elioration de la QdE par le feed-back de celle-ci
Zizhi et al [36] proposent une m´ethode pour controˆler la QdS d’une communication de voix sur IP ou` le codec AMR [9] est utilis´e. Le codec AMR est un codeur qui a ´et´e d´evelopp´e par l’ETSI et standardis´e pour le GSM. C’est un codeur multi-mode dont le d´ebit peut varier entre 4.75 kbps et 12.2 kbps. Cette m´ethode d´eﬁnit une architecture qui combine la force des techniques de controˆle adaptatif, la technique de QdS de marquage en utilisant une mesure objective de la QdE (c’est-`a-dire le MOS qui est calcul´e objectivement) au lieu de consid´erer une a` une les m´etriques de QdS. Suivant l’approche utilis´ee, certains paquets, soit les premiers paquets d’un segment de voix, sont consid´er´es comme prioritaires parce qu’ils sont les plus importants [37]. Pour tenir compte de la priorit´e de ces paquets, un r´eseau DiﬀServ [18] est utilis´e et une plus grande priorit´e leur est attribu´ee tandis que les autres paquets sont consid´er´es comme faisant partie du traﬁc best-eﬀort. Par ailleurs, le feed-back de la QdE est utilis´e pour faire varier le d´ebit du codec AMR a` l’exp´edition.
Moura et al [38] vont dans le mˆeme sens que [36] en proposant un algorithme appel´e adaMOS qui permet de modiﬁer le d´ebit du codec utilis´e a` l’´emission, en utilisant le feedback du MOS. Il utilise une formule qui donne une approximation du MOS ne d´ependant que du d´elai et des pertes [39]. Cette proposition se diﬀ`ere de [36] en consid´erant que tous les usagers n’utilisent pas forc´ement le mˆeme codec.
Dans [40], E. Jammeh et al proposent un nouveau m´ecanisme d’adaptation bas´e sur la QdE. A` la diﬀ´erence des travaux de Moura [38], ce m´ecanisme s’applique aux applications de voix et de vid´eo sur IP et l’adaptation se fait du coˆt´e de l’´emetteur et du r´ecepteur. A` l’´emetteur, l’information de la QdE est utilis´ee pour soit r´eduire ou augmenter le d´ebit. Au r´ecepteur, elle est utilis´ee pour faire varier la taille du tampon de la gigue.
2.4.4 M´ecanismes de qualit´e de service dans les r´eseaux IP ax´es sur la qualit´e de l’exp´erience
Il a ´et´e d´emontr´e que la gestion de la QdS en prenant en compte plus de deux crit`eres non corr´el´es est un probl`eme NP-Complet. Aussi, l’int´egration de la QdE dans la gestion de la QdS repr´esente une avenue int´eressante en vue de r´eduire la complexit´e du probl`eme. D’abord en tant que mesure de performance de bout en bout de la QdS du point de vue de l’utilisateur, la QdE est une mesure importante pour la conception de syst`eme et le processus d’ing´enierie. Deuxi`emement, avec le paradigme de QdE, on peut obtenir de meilleur r´esultat et ainsi ´eviter le probl`eme NP-complet car l’objectif est de maintenir la QdE et non optimiser de multiples crit`eres de QdS.

31
Dans cet ordre d’id´ee, Hai et al [10] ont d´evelopp´e un m´ecanisme de routage qui prend en compte la QdE dans le but de d´evelopper un m´ecanisme adaptatif qui peut r´ecup´erer l’information de la QdE et l’adapter pour initier des actions conform´ement au feed-back de la QdE. Le syst`eme int`egre l’´evaluation de la QdE dans un syst`eme de routage ´evolutionniste dans le but d’am´eliorer la perception des utilisateurs bas´ee sur l’algorithme Q-learning. Ainsi, il sera possible de choisir les chemins optimaux en terme de QdE dont l’´evaluation est faite dans un premier temps par la m´ethode PSQA [41] et pr´edite, dans un second temps, par un r´eseau de neurones. L’approche a ´et´e valid´ee en la comparant avec d’autres types d’algorithmes de routage tels que RIP et OSPF, et il fournit de meilleurs r´esultats pour la QdE des usagers et la quantit´e de paquet de contrˆole est moindre.
Dans [42] un mod`ele d’optimisation de la qualit´e de la voix sur IP qui utilise une topologie similaire `a un syst`eme de controˆle d’admission dans lequel des agents sont g´er´es par une unit´e centrale est propos´ee . Dans ce mod`ele les agents eﬀectuent un ensemble de mesures dont le d´elai qui sera utilis´e pour ´evaluer la QdE, en utilisant le E-model. Les mesures eﬀectu´ees sont envoy´ees `a un gestionnaire de la QdS de l’application VoIP. Ce mod`ele soufre d’un probl`eme d’extensibilit´e car tous les agents communiquent `a un seul nœud.
2.5 Synth`ese des travaux
Ces derni`eres ann´ees plusieurs recherches ont ´et´e eﬀectu´ees en vue de mesurer, d’´evaluer et d’am´eliorer la QdE dans les r´eseaux. Les diﬀ´erents travaux eﬀectu´es proposent des m´ecanismes qui, pour la plupart, ne r´eagissent pas lorsque la QdE de l’usager se d´egrade. Ceux qui le font ne mettent l’accent que sur les applications de type voix sur IP ou vid´eo. en proposant surtout des m´ecanismes pour faire varier le d´ebit des codeurs lorsque la QdE se d´egrade, mais ces m´ecanismes ne peuvent pas s’appliquer aux autres types d’applications. Pour les m´ecanismes de QdS ax´es sur la QdE, il en existe tr`es peu et ils sont le plus souvent tr`es diﬃciles a` mettre en œuvre.
Dans le chapitre suivant, nous allons dans un premier temps proposer une nouvelle m´ethode d’avoir le feed-back de l’information de la QdE et de l’introduire dans le r´eseau de sorte que, le cas ´ech´eant, les routeurs puissent l’utiliser pour ajuster les m´ecanismes de QdS. Dans un second temps, un nouveau m´ecanisme de traitement des paquets par les routeurs a` l’int´erieur d’un domaine DiﬀServ. Ce nouveau m´ecanisme tiendra compte de l’information de la QdE disponible.

32
CHAPITRE 3
ME´CANISME DE QUALITE´ DE SERVICE AXE´ SUR LA QUALITE´ DE L’EXPE´ RIENCE
Bien que le fait de satisfaire tous les param`etres recommand´es de qualit´e de service(QdS) d’une application ne puisse garantir que les usagers seront satisfaits, il n’en demeure pas moins vrai que la qualit´e de service a un impact sur la QdE, comme certains des travaux pr´esent´es dans le chapitre 2 l’ont montr´e. Ainsi, pour r´epondre a` l’attente des usagers, l’impl´ementation de la QdS dans les r´eseaux actuels doit ˆetre ax´ee sur la QdE et doit fournir les niveaux de performance n´ecessaire pour avoir une bonne QdE.
Dans les prochaines sections de ce chapitre nous allons d´ecrire en d´etail les m´ecanismes que nous proposons pour faire le feed-back de la QdE et l’acheminer dans le r´eseau pour ˆetre utilis´ee dans l’impl´ementation de m´ecanisme am´elior´e de QdS. Le m´ecanisme de QdS propos´e y sera ´egalement d´evelopp´e.
3.1 M´ecanisme de feed-back de la QdE
Comme d´ecrit `a la section 2.3 du chapitre pr´ec´edent, les m´ecanismes de feed-back sont utilis´es dans les r´eseaux IP, notamment le protocole ECN, pour notiﬁer une source de la congestion rencontr´ee par ses paquets pour qu’elle puisse adapter son d´ebit de transmission et autres param`etres d’encodage. Mieux encore, cette notiﬁcation peut ˆetre r´e-ins´er´ee dans le r´eseau pour permettre aux routeurs le long du chemin de d´eterminer la congestion en amont et en aval et ainsi ˆetre capable de faire du controˆle de traﬁc. De mˆeme, il est possible dans le cas d’une communication donn´ee qu’un r´ecepteur puisse informer un ´emetteur du niveau de la QdE pour un ﬂot traﬁc donn´e ; ce qui permettra `a l’´emetteur d’ajuster les param`etres de transmission sur lesquels il peut agir et mˆeme r´e-ins´erer l’information de la QdE, de sorte que les routeurs entre l’´emetteur et le r´ecepteur en tiennent compte dans diﬀ´erents m´ecanismes de QdS.
E´tant donn´e une communication impliquant un r´ecepteur et un ´emetteur, la technique propos´ee pour le feed-back de la QdE se base sur l’hypoth`ese selon laquelle, au niveau du r´ecepteur, la QdE peut ˆetre ´evalu´ee a` un intervalle r´egulier pour un traﬁc donn´e.
Les requis sont :

33
1. Le m´ecanisme doit ˆetre utilisable pour tout type d’applications pour lequel la QdE peut ˆetre d´etermin´ee. Ces applications incluent notamment le web, la voix sur IP (VoIP), la vid´eo et les jeux vid´eo en ligne.
2. Il ne doit pas d´ependre de la m´ethode utilis´ee pour ´evaluer la QdE. 3. Il doit se faire ‘in band ’. Autrement dit, il est souhaitable que l’information de la QdE
soit disponible dans l’entˆete des paquets de donn´ees pour assurer l’extensibilit´e tout en ´evitant de g´en´erer de la signalisation suppl´ementaire. 4. Il doit utiliser les protocoles existants autant que possible pour que son impl´ementation puisse se faire sans modiﬁer l’architecture de l’Internet. L’Internet se repose aujourd’hui sur l’architecture protocolaire TCP/IP dans laquelle deux protocoles de transport sont utilis´es. Le protocole TCP, orient´e connexion, qui est utilis´e pour les application requ´erant une remise s´equentielle et ﬁable, et le protocole UDP qui est utilis´e surtout dans le cas des applications multim´edias. Ainsi le m´ecanisme propos´e pour faire le feed-back de la QdE tient compte de ces deux protocoles de transport.
3.1.1 Feed-back de la QdE avec TCP
Dans le cas d’une application qui utilise TCP comme protocole de transport, le renvoi de la QdE `a l’´emission se fait en faisant du ‘piggyback’ qui consiste `a utiliser le mˆeme segment pour envoyer des donn´ees et acquitter les donn´ees re¸cues. En eﬀet, le protocole TCP permet de transf´erer des donn´ees dans les deux directions d’une connexion en utilisant les paquets ACK pour transporter des donn´ees. Ainsi, pour les traﬁcs TCP, la QdE sera calcul´ee au r´ecepteur ou a` un nœud distinct du r´ecepteur et sera renvoy´ee a` l’´emetteur via les ACK dont la charge utile contiendra les informations relatives a` la QdE.
3.1.2 Feed-back de la QdE avec UDP
Pour certaines applications, UDP est le protocole de transport qui est utilis´e. C’est le cas, par exemple, des applications multim´edias. Comme d´ecrit dans le chapitre pr´ec´edent `a la section 2.3.2, deux autres protocoles sont utilis´es par dessus de la couche transport pour ces types d’application. Ce sont les protocoles RTP et RTCP (voir section 2.3.2). RTP est utilis´e pour le transport des donn´ees et RTCP pour le feed-back des informations de la qualit´e de la communication entre les intervenants. Plusieurs types de paquets ont ´et´e d´eﬁnis pour RTCP en particulier le type de paquet XR qui permet de d´eﬁnir divers blocs de rapport pour transporter des informations de feed-back a` diﬀ´erents participants d’une session (voir section

34
2.3.2. Par exemple, Westerlund et al [26] ont d´eﬁni un nouveau bloc de rapport XR pour eﬀectuer le feed-back de ECN pour RTP par dessus de UDP.
De mˆeme, pour faire l’´echo vers l’´emetteur de l’information de la QdE, nous proposons d’ajouter un nouveau bloc de rapport au paquet XR d´edi´e au transport de l’information de la QdE. Ce bloc de rapport comprendra entre autres l’information de la QdE exprim´ee par le MOS ou une autre m´etrique de QdE, le sens et le taux de variation. Le format de ce bloc de rapport est pr´esent´e `a la Figure 3.1.

0

8

16

24

32

Synchronization source of Media Sender

Evaluation time

QoE value

QoE variation

QoE speed of variation

Figure 3.1 Exemple de format d’un bloc de rapport XE pour le feed-back de la QdE

3.1.3 R´e-insertion de la QdE dans le r´eseau
L’information de la QdE, une fois calcul´ee au r´ecepteur et renvoy´ee a` l’´emetteur, doit ˆetre introduite dans le r´eseau pour qu’elle parvienne aux diﬀ´erents nœuds du r´eseau pour ˆetre utilis´ee, le cas ´ech´eant, dans les politiques de QdS. Dans cette proposition, cela se fait a` travers l’entˆete des paquets IP et le champ design´e a` ConEx/Re-ECN.
Dans l’entˆete IPv4, puisqu’il n’ y a qu’un seul bit disponible (voir section 2.3.3), l’information compl`ete de la QdE ne peut ˆetre transport´ee dans l’entˆete du paquet. Le dernier bit disponible sera utilis´e pour signaler aux routeurs que la QdE s’est d´egrad´ee de sorte qu’ils puissent d´eclencher le m´ecanisme pr´evu `a cet eﬀet. Ce bit sera a` 1 s’il y a d´egradation pour indiquer aux nœuds interm´ediaires que la QdE du ﬂot auquel le paquet appartient s’est d´egrad´e et qu’ils doivent adapter les m´ecanismes de QdS en cons´equence. Sinon, le bit est `a 0. Toutefois, cela n´ecessite que l’´emetteur puisse, a` partir des informations relatives `a la QdE qui lui a ´et´e envoy´ees par l’exp´editeur, d´eterminer s’il faut agir sur les m´ecanismes de QdS dans le r´eseau. Dans ce cas, il ne peut y avoir de cohabitation entre le m´ecanisme propos´e et le protocole Re-ECN d´ecrit a` section 2.3.3.

35
Avec le protocole IPv6, deux options sont propos´ees. La premi`ere consiste a` utiliser les bits restants de l’entˆete option de destination de IPv6 propos´e pour le nouveau protocole Re-ECN d´eﬁni dans le cadre de ConEx (voir section section 2.3.3 du chapitre pr´ec´edent). Cette entˆete fait 32 bits de longueur et ConEx en utilise 4 pour Re-ECN et les autres sont r´eserv´es. Une partie des 28 bits r´eserv´es sera utilis´ee pour acheminer l’information de la QdE aux nœuds interm´ediaires entre la source et la destination. Le format de cette entˆete de destination est fourni a` la Figure 3.2.

0

8

XLE CQa b c

16

24

32

Option Type Option Length

QoE info

Var QoE vitesse de réservé variation

Figure 3.2 Entˆete de destination utilis´ee dans ConEx

Les bits X, L, E, C sont utilis´es par ConEx. Le bit Q permet d’indiquer si oui ou non l’information de la QdE doit ˆetre prise en compte au niveau des routeurs. Les bits a, b, et c, quand ils sont a` 1, indiquent que l’information de la QdE, le sens de variation, ainsi que la vitesse avec laquelle l’information varie sont pr´esents. La valeur de la QdE est cod´ee avec les dix prochains bits. Les deux bits suivants permettent de coder le sens de variation et les 8 prochains bits sont utilis´es pour le taux de variation.
Si Re-ECN n’est pas utilis´e, une nouvelle entˆete de destination sera ajout´ee a` l’entˆete IPv6. Cette entˆete aura le mˆeme format que celle utilis´ee dans ConEx sauf qu’elle sera priv´ee des bits relatifs a` ConEx. Mentionnons que plus de bits peuvent ˆetre utilis´es dans l’entˆete de destination car elle n’est pas limit´ee a` 32 bits.

0
Qa b c

8 QoE info

16

24

32

Option Type Option Length

Var

QoE vitesse de variation

reservé

Figure 3.3 Entˆete de destination pour le feed-back de la QdE sans ConEx

36

3.1.4 Format de l’information du feed-back de la QdE
L’information de la QdE peut ˆetre retourn´ee sous divers formats comme pr´esent´e au Tableau 3.1 :
Valeur de QdE Comporte la valeur actuelle de la m´etrique de QdE (MOS, facteur R). Toutefois, il est recommand´e de normaliser toutes les autres m´etriques de QdE en la m´etrique du MOS variant entre 1 et 5. Dans cette proposition, la valeur du MOS, est cod´ee sur dix (10) bits. Trois (3) des 10 bits sont utilis´es pour coder la partie enti`ere et les sept (7) autres pour coder la partie d´ecimale.
Variation de la QdE Indique le sens de la variation de l’information de la QdE entre au moins deux (2) intervalles d’´evaluation de la QdE et permet de savoir, en moyenne, si la QdE a d´egrad´e ou am´elior´e. Cette information donne un aper¸cu sur la ﬂuctuation de la QdE.
Vitesse de variation de la QdE Normalis´ee pour avoir ses valeurs comprises en 0 et 100 et exprim´ee en pourcentage, ce champ indique le rythme moyen de variation de l’information de la QdE.
Bit de signalisation de la QdE Il est possible d’utiliser un seul bit pour indiquer qu’il y a d´egradation de la QdE et le besoin d’am´eliorer ou d’ajuster les m´ecanismes de QdS en vue d’am´eliorer la QdE (comme avec IPv4).

Tableau 3.1 Format de l’information de la QdE

QdE info Valeur de la QdE Variation de la QdE Vitesse de variation de la QdE
Bit de signalisation

Description
L’actuelle valeur de la m´etrique QdE(exemple MOS) Indique si la QdE d´ecroˆıt ou non Rythme auquel l’information change Bit utilis´e pour indiquer la n´ecessit´e d’am´eliorer le QdE (uniquement pour IPv4)

Exemple de valeurs 3.60(0110111100)
11 40%(00101000)
1

37

5, *6

émetteur

1

7 *2

Estimateur de MOS
3, 4*

récepteur

Figure 3.4 M´ecanisme de feed-back propos´e

La Figure 3.4 d´ecrit le fonctionnement global du m´ecanisme propos´e utilis´e conjointement avec ConEx. Les ´etapes marqu´ees du signe ‘*’ sont des proc´edures de ECN/ConEx et sont optionnelles.
1. La source envoie des paquets qui appartiennent a` un ﬂux de traﬁc. *2. Les routeurs entre la source et la destination marquent les paquets lors d’une situation
de congestion dans le cas de ECN. 3. Le r´ecepteur ´evalue et renvoie les informations relatives `a la QdE de l’utilisateur `a la
source, pour le ﬂux en question. La QdE peut aussi ˆetre ´evalu´ee par un autre nœud autre que le r´ecepteur. *4. Si ECN est utilis´e, le r´ecepteur notiﬁera ´egalement l’´emetteur lorsque des paquets ont rencontr´e de la congestion. 5. La source fait parvenir dans l’entˆete IP l’information de la QdE qui a ´et´e renvoy´ee par le r´ecepteur aux routeurs pour que ces derniers puissent l’utiliser lors du traitement des paquets. *6. La source marque l’entˆete ConEx des paquets subs´equents, avec l’information de ECN (valable uniquement avec IPv6). 7. Les routeurs utilisent l’information de la QdE associ´ee aux paquets pour mieux ajuster les divers m´ecanismes de QdS. Par exemple, les routeurs fronti`ere peuvent l’utiliser dans des m´ecanismes am´elior´es de controˆle d’admission.
3.2 M´ecanisme de QdS propos´e bas´e sur la QdE
La principale motivation pour un r´eseau IP de suivre la QdE des usagers et d’en avoir le feed-back est de pouvoir r´eagir lorsqu’elle se d´egrade ou de pr´evenir qu’il y ait d´egradations.

38
De ce fait, il faut d´evelopper des m´ecanismes de QdS qui puissent prendre en compte la QdE. C’est dans ce sens qu’est propos´e ce nouveau m´ecanisme de QdS bas´e sur la QdE dans le cadre de l’architecture DiﬀServ.
Certaines recommandations ont ´et´e faites sur la mani`ere d’utiliser DiﬀServ en vue de satisfaire la QdS pour certaines applications. Il est recommand´e, par exemple, pour les applications de voix sur IP d’utiliser la classe EF [21] dont la ﬁle est g´er´ee suivant l’algorithme d’ordonnancement avec priorit´e priority queuing (PQ). Cet algorithme est utilis´e de fa¸con a` garantir une faible latence, un faible taux de perte de paquets et une faible gigue. Or, l’algorithme PQ, permettant d’accorder une priorit´e absolue a` une ﬁle au d´etriment des autres, peut provoquer de la famine pour les autres ﬁles. Pour ´eviter le risque de famine, un limiteur de bande passante (rate limiter ) est appliqu´e `a la ﬁle EF. Cependant, cette approche pr´esente de nombreuses limitations. Les traﬁcs cat´egoris´es dans EF peuvent avoir des caract´eristiques diverses et des requis de QdS diﬀ´erents qui varient dans le temps. Cela r´eduit l’eﬃcacit´e du r´eseau puisque les conditions les plus rigoureuses de QdS doivent ˆetre respect´ees pour tous les traﬁcs EF. Par ailleurs, le fait de limiter le traﬁc dans EF r´eduit la ﬂexibilit´e de l’allocation. En cons´equence, tout le traﬁc EF qui arrive apr`es que la ﬁle EF ait atteint sa limite est ´elimin´e mˆeme s’il y aurait de la capacit´e r´esiduelle dans les autres ﬁles. D’ou` une solution plus ﬂexible s’impose.
3.2.1 Vue d’ensemble du m´ecanisme propos´e
Le m´ecanisme propos´e s’inscrit dans le cadre de l’architecture de QdS DiﬀServ et consiste a` prendre en compte le feed-back de la QdE dans la classiﬁcation qui est eﬀectu´ee par les routeurs internes `a un domaine DiﬀServ.
Comme d´ecrit a` la section 2.2.2 du chapitre pr´ec´edent, lorsque les paquets pr´ealablement marqu´es par les routeurs situ´es `a la fronti`ere d’un domaine DiﬀServ arrivent a` un routeur interne, le routeur lit le champ DSCP de l’entˆete du paquet et ins`ere ce dernier dans la ﬁle d’attente correspondante. Dans le m´ecanisme propos´e, un traitement particulier est fourni `a certains traﬁcs qui sont consid´er´es comme sensibles a` la QdE. Un traﬁc sensible a` la QdE est un traﬁc pour lequel un seuil minimum de QdE doit ˆetre garanti. Ces traﬁcs peuvent provenir de n’importe quelle application ou` la QdE peut ˆetre ´evalu´ee, telle que la voix sur IP, l’IPTV, les jeux vid´eos en ligne ou mˆeme le web. La proposition se base sur le m´ecanisme d´ecrit `a la section 3.1 qui permet aux routeurs d’avoir acc`es aux informations de la QdE. Ainsi, la classiﬁcation de ces paquets d´ependra non seulement du code DSCP mais aussi de l’information de la QdE pr´esente dans l’entˆete r´eseau des paquets.

39

Insertion de la QoE dans le réseau Domaine DiffServ

Estimateur de QdE

Rétroaction de la QdE
Figure 3.5 Vue d’ensemble
3.2.2 M´ecanisme de traitement des paquets
Le m´ecanisme de traitement des paquets d´ecrit la mani`ere dont les paquets sont trait´es lorsqu’ils arrivent aux routeurs cœur du r´eseau DiﬀServ et suppose qu’ils ont ´et´e trait´es de fa¸con appropri´ee par les routeurs fronti`ere et qu’un code DSCP leur a d´ej`a ´et´e attribu´e. Ce m´ecanisme modiﬁe la m´ethode de classiﬁcation des paquets eﬀectu´ee par les routeurs cœur qui consiste, en fait, `a aiguiller les paquets vers leurs ﬁles d’attentes respectives. Dans DiﬀServ, vue la correspondance qui existe entre les classes de traﬁc et les ﬁles d’attente, tous les paquets d’une mˆeme classe sont toujours ins´er´es vers la mˆeme ﬁle d’attente. Il s’agit la` d’un aiguillage statique comme illustr´e `a la Figure 3.6.

40
Paquet arrive
Lecture du champ DSCP

oui

Classe paquet =

EF?

non

Paquet inséré dans la file EF

Classe paquet= non AFij?
oui

Paquet inséré dans la file AFi

Paquet inséré dans la file DF

ordonnanceur
Paquet envoyé sur le lien
Figure 3.6 Classiﬁcation des paquets dans un routeur interne a` un domaine DiﬀServ

41

Dans le nouveau m´ecanisme, l’aiguillage se fait de mani`ere dynamique et d´epend, outre

du code DSCP du paquet, de l’information de la QdE et s’applique sp´eciﬁquement aux classes

AF soit, AF1, AF2, AF3 et AF4. Un ordre de priorit´e est ´etabli entre les diﬀ´erentes ﬁles AFi

avec i ∈ {1, 2, 3, 4} dans l’allocation de la bande passante. En eﬀet, soit wi le poids associ´e a`

la ﬁle AFi, ce poids indique la proportion de bande passante allou´ee aux traﬁcs de la classe

AFi. Il faut que :

w1 < w2 < w3 < w4

(3.1)

Comme d´ecrit dans la Figure 3.7, lorsqu’un paquet arrive a` un routeur, s’il est de classe EF ou DF, il est transf´er´e vers la ﬁle EF ou DF comme dans DiﬀServ classique. S’il est de classe AF, soit AFi avec i ∈ {1, 2, 3, 4}, et que le niveau de la QdE ne descend pas au-dessous d’un certain seuil, le paquet est ins´er´e dans la ﬁle correspondant `a sa classe. Sinon, si le paquet est de classe AFi avec 1 < i ≤ 4, l’´etat des ﬁles AFj avec j > i est v´eriﬁ´e et est compar´e a` l’´etat de la ﬁle d’attente correspondant a` la classe du paquet. L’´etat d’une ﬁle d’attente a` un instant donn´e correspond a` la taille de la ﬁle d’attente et le d´elai qu’exp´erimentera le prochain paquet qui y sera ins´er´e. S’il existe une ﬁle AFj avec i = j qui permet au paquet d’exp´erimenter un meilleur temps d’attente et qui r´eduit sa probabilit´e d’ˆetre ´elimin´e, le paquet y sera ins´er´e sans que la valeur du champ DSCP de l’entˆete du paquet ne soit modiﬁ´ee. Pour ne pas d´et´eriorer la qualit´e de service des ﬂots de classe AFj, des seuils peuvent ˆetre ﬁx´es pour les diﬀ´erents param`etres de la ﬁle AFj. Parmi les param`etres qu’il faut ﬁxer, il y a le niveau de remplissage d’une ﬁle a` un instant donn´e pour lequel un seuil peut ˆetre ﬁx´e de sorte que mˆeme si la ﬁle j serait la meilleure ﬁle vers laquelle le paquet doit ˆetre aiguill´e, si le niveau de remplissage d´epasse ce seuil, le paquet n’y sera pas aiguill´e.

42

Paquet arrive
Lecture du champ DSCP
oui Classe paquet = EF? non

Classe paquet= non AFij?
oui
Lire information de la QdE

Paquet inséré dans la file EF

QdE < Seuil oui non

Evaluation de l’état files AFk
avec k > i

Paquet inséré dans la file AFi

Existe-t-il une file non AFk tel que état
AFk > Etat AFi
oui

Paquet inséré dans la file AFk

ordonnanceur

Paquet inséré dans la file DF

Paquet envoyé sur le lien
Figure 3.7 Classiﬁcation des paquets dans le m´ecanisme propos´e

43
Dans le cadre de cette proposition, la Figure 3.8 donne une une illustration du cheminement des paquets a` travers les ﬁles d’attente d’un routeur interne a` un domaine DiﬀServ.
Les paquets rouges sont de classe AF2, cependant le paquet 9 est ins´er´e dans la ﬁle AF1 puisque les informations de la QdE du ﬂot auquel il appartient et l’´etat de la ﬁle AF1 laissent pr´evoir que le paquet ne sera pas ´elimin´e et qu’il exp´erimentera un d´elai moindre.

Classification DSCP + QdE

Drop Tail WRED
WRED
RED AQM

9 8765

ordonnanceur
EF AF1 AF2 DF

Figure 3.8 Illustration de la classiﬁcation des paquets dans le m´ecanisme propos´e

La Figure 3.9 pr´esente un diagramme simpliﬁ´e de traitement quand un paquet arrive a` l’interface d’un routeur jusqu’a` ce qu’il arrive `a l’interface de sortie. En supposant que le r´eseau utilise IPv6 `a la couche r´eseau, le routeur lit le bit Q de l’entˆete d’option de destination de IPv6 d´eﬁnie dans ConEx ou dans celle d´eﬁnie dans cette proposition (E´tape 1 de la Figure 3.9). Si le bit Q est `a 1, alors le m´ecanisme continue (E´tape 2a). Sinon le paquet est trait´e suivant la classiﬁcation de DiﬀServ (E´tape 2b) et le paquet est ins´er´e dans le ﬁle correspondant a` sa classe jusqu’a` ce qu’il atteigne l’ordonnanceur (E´tape 4). Pour, les paquets des classe EF et DF, Q sera toujours a` 0 puisque le m´ecanisme ne s’applique pas aux paquets de ces classes. Le m´ecanisme se poursuit avec le routeur qui examine le code DSCP du paquet, les informations relatives a` la QdE et l’´etat des ﬁles d’attente (E´tape 3). Si l’´evaluation de la QdE et l’´etat des ﬁles d’attente indiquent que le paquet peut ˆetre ins´er´e dans une meilleure ﬁle d’attente (E´tape 3a), le paquet est ins´er´e dans celle-ci pour ˆetre trait´e ensuite par l’ordonnanceur (E´tape 4). Cela se fait sans attribuer un autre code DSCP au paquet (E´tape 3b). Sinon, le paquet est ins´er´e dans la ﬁle correspondant a` sa classe. L’´evaluation de la QdE se fait en consid´erant les informations de QdE disponibles. Au plus, trois (3) informations de QdE peuvent ˆetre disponibles. Ce sont la derni`ere valeur, la variation et la vitesse de variation de la QdE pour le ﬂot auquel appartient le paquet(voir Tableau 3.1).

44

Paquet arrive

Lire le bit Q de l’entête du paquet

1

Q=1

Non

&

2b

QdE < Seuil 2a

oui

DSCP & QdE = ? Etat des files = ?

Paquet aiguillé dans la file de sa classe de trafic

3

DSCP et QdE info => besion d’amélioration

oui

QdS?

Non 3c

L’état des files

Non

permettent

amélioration QdS?

3a oui

ordonnanceur
4 Sortie des paquets

Aiguiller paquet vers la meilleure file
Sans modifier le code DSCP
3b

Figure 3.9 Algorithme de traitement des paquets dans le m´ecanisme propos´e

45
CHAPITRE 4
EXPE´RIMENTATIONS ET RE´SULTATS
Le but d’´evaluer la proposition est de voir si elle permet d’am´eliorer la qualit´e de l’exp´erience (QdE) pour les traﬁcs qui y sont sensibles et son eﬀet sur les autres traﬁcs. Bien que la proposition s’´etende a` tout type de traﬁc, son ´evaluation a ´et´e faite en consid´erant le traﬁc VoIP. Pour ´evaluer la QdE pour l’application VoIP l’algorithme mod`ele E (E-model ) a ´et´e utilis´e car il n’utilise que des param`etres r´eseaux objectifs. Cela permet d’avoir facilement dans les simulation l’´evaluation de la QdE de l’application VoIP. Le simulateur NS-3 a ´et´e utilis´e pour r´ealiser les simulations. Dans les sections qui suivent le simulateur sera pr´esent´e suivi de la description de l’algorithme mod`ele E. Ensuite l’impl´ementation sera discut´ee et enﬁn les r´esultats de simulations seront analys´es.
4.1 Description du simulateur utilis´e
L’´evaluation de la performance de la proposition d´etaill´ee dans le chapitre pr´ec´edent a ´et´e faite en utilisant le simulateur NS-3.13 [43]. NS-3 est un simulateur de r´eseau a` ´ev´enements discrets destin´e principalement aux ﬁns de recherche et d’enseignement. C’est un projet opensource d´evelopp´e dans le langage C++. Bien que son nom soit similaire, il n’est pas une extension du tr`es populaire simulateur NS-2 cependant il est d´evelopp´e par le mˆeme groupe de travail. Il pr´esente les caract´eristiques suivantes :
– Son d´eveloppement est fait de fa¸con modulaire de fa¸con a` faciliter l’int´egration de nouveaux mod`eles
– Il dispose d’un noyau extensible programm´e en C++ avec des interfaces optionnelles en python et d’un API tr`es bien document´e. Ce qui permet d’´eviter certains probl`emes retrouv´es dans NS-2 tels que les probl`emes de couplage et d’interop´erabilit´es entre les mod`eles et l’absence de gestion de la m´emoire.
– La conception des diﬀ´erents modules dans NS-3 est r´ealis´ee avec beaucoup de r´ealisme et les modules s’alignent sur les syst`emes r´eels. Les mod`eles de nœuds par exemple sont comme des vrais ordinateurs. Un nœud NS-3 est une module auquel sont ajout´ees les applications, les piles de protocole et des interface r´eseau (Network Interface Card ).
– Il fournit du support pour la virtualisation et l’int´egration aux testbeds. Des machines virtuelles peuvent ˆetre utilis´es au dessus de la couche physique de NS-3. De plus la pile

46
NS-3 peut ˆetre ex´ecut´ee en mode ´emulation et ´emettre/recevoir des paquets `a travers des dispositifs r´eels. – Les statistiques et les traces d’ex´ecution sont ﬂexibles. Il est capable de g´en´erer des ﬁchiers de traces Packet Capture (PCAP) qui peuvent ˆetre lus avec un analyseur de protocole tel que wireshark [44]. – Les attributs syst`emes sont tr`es bien document´es.

helper

routing internet-stack

devices

applications

node node class, netDevice, address(MAC,
Ipv4, etc), Queues, Socket, IPV4

mobility Mobility models(static,
random, walk, etc)

common Packets, Packets tags, Packets
header, Pcap/ascii file

simulator Event, Scheduler, Time

core Smart pointers, Callbacks, Logging, Random variable, Tracing,
Dynamic type system, Attributes

Figure 4.1 Architecture logicielle de NS-3 inspir´e de [43]

Le simulateur NS-3 est organis´e suivant une structure modulaire et en couche comme pr´esent´ee `a la Figure 4.1 facilitant ainsi son extension. Partant du bas, on retrouve le cœur du simulateur constitu´e d’un ensemble de composantes qui sont utilis´ees par toutes les autres classes. On y trouve des classes pour les pointeurs intelligents, des types attributs syst`eme dynamique, les traces etc. A` la couche 2, il y a des composantes qui sont communes `a tous les protocoles et mod`eles parmi lesquelles se trouvent les objets paquet (packet), entˆete de paquet (packet header ) et ´etiquette de paquet (packet tag). Au dessus de cette couche, les mod`eles de nœuds et de mobilit´e sont d´eﬁnis. Ensuite on retrouve les mod`eles d´eﬁnissant des protocoles de routage, la pile TCP/IP et les applications. La derni`ere contient un ensemble de classes dites helper qui aident a` simpliﬁer le travail des utilisateurs lorsque ces derniers ´ecrivent des scripts de simulations.

47

4.2 Environnement de simulations
Pour r´ealiser les simulations, le simulateur a ´et´e install´e sur une machine virtuelle VMware (VMware Workstation 7.1.3) munie d’un processeur de 2.10GHz a` laquelle 1 Gigaoctet de m´emoire RAM a ´et´e allou´ee. Sur cette machine est install´e le syst`eme d’exploitation linux distribution ubuntu 10.04. L’´edition des codes sources du simulateur ainsi que la programmation des nouvelles fonctionnalit´es qui y sont ajout´ees se font via l’environnement de d´eveloppement Eclipse IDE for C/C++ Developers version 1.4.1 [45]. La compilation et l’ex´ecution se font a` partir de l’outil Waf [46]. La machine hoˆte de la machine virtuelle poss`ede un processeur Intel Pentium T4300 muni de deux cœurs de 2.10GHz chacun et de 4 Gigaoctet de m´emoire RAM et sur laquelle le syst`eme d’exploitation WINDOWS 7 version Professionnelle est install´e.

4.3 M´ethode d’´evaluation de la qualit´e de l’exp´erience
Comme pr´esent´e au chapitre 1, diverses m´ethodes, d´ependant du type d’application, ont ´et´e standardis´es pour ´evaluer la QdE. Parmi ces m´ethodes, nous retrouvons le mod`ele E, d´ecrit dans la recommandation G-707 de l’ITU [7], qui permet d’´evaluer la QdE pour les applications de voix sur IP. Faisant partie des m´ethodes dites de planiﬁcation de r´eseaux, le mod`ele E utilise des param`etres de performance du r´eseau pour ´evaluer la QdE. Aussi dans le cadre des simulations de la voix sur IP, il a ´et´e utilis´e pour ´evaluer la QdE.
En eﬀet, le mod`ele E est un mod`ele quantitatif qui d´eﬁnit un facteur de qualit´e R appel´e R-score qui prend en compte les eﬀets du d´elai, des pertes de paquets, de la gigue etc., sur la QdE de l’usager. Le facteur R est exprim´e comme :

R = R0 − Is − Id − Ie−eff + A

(4.1)

Ou` – R0 repr´esente en principe le rapport signal sur bruit de base, – Is toutes les d´egradations qui se produisent plus ou moins en mˆeme temps que le signal
vocal, – Id prend en compte les eﬀets du d´elais et des ´echos, – Ie−eff repr´esente les facteurs de d´egradation du aux ´equipements, – A un facteur avantage qui prend en compte l’attente de l’usager par rapport a` la
technologie d’acc`es utilis´ee. En supposant que les pertes de paquets se font de mani`ere al´eatoire, Ie−eff se calcule

48

comme suit :

Ie−ef f

=

Ie

+

(95

−

Ie

).

Ppl

Ppl + Bpl

Ou` – Ie est le facteur de d´egradation duˆ aux codecs `a bas d´ebit, – Ppl taux de perte de paquets, – Bpl repr´esente le facteur de robustesse `a l’erreur du codec. Une approximation de Id est donn´ee par l’expression suivante :

Id = 0.24d + 0.11 ∗ (d − 177.3) ∗ I(d − 177.3)

(4.2) (4.3)

Avec


0 si x < 0 I(x) =
1 si x≥ 0

(4.4)

et d, le d´elai
Dans les relations pr´ec´edentes, aucune mention explicite n’est faite `a la gigue car elle est compens´ee par l’utilisation d’un tampon a` la r´eception, ce qui induit un d´elai additionnel. Ce d´elai duˆ `a la gigue se traduit en une perte pour les paquets qui arrivent apr`es un certain seuil qui d´epend de la taille et du type du tampon de gigue utilis´e.
Une fois le facteur R d´etermin´e, l’algorithme mod`ele E ´etablit la correspondance entre R et M OS par la relation suivante :


1  
M OS = 1 + 0.035R + R(R − 60)(100 − R)7 ∗ 10−6
  4, 5

si R < 0 si 0 <R<100 si R ≥ 100

(4.5)

Les consid´erations suivantes sont faites dans l’´evaluation du MOS. Les d´elais au niveau du codeur et du d´ecodeur et les ´echos sont nuls. Pour les ´echos, il est suppos´e que des compensateurs d’´echo sont utilis´es. Les param`etres R0, Is , Ie et Bpl sont constant et d´ependent du codec utilis´e.

49

Tableau 4.1 Mise en correspondance entre les valeurs de R et l’estimation du MOS

Niveau de satisfaction
Tr`es satisfait Satisfait Quelques utilisateurs insatisfaits Beaucoup d’utilisateurs insatisfaits Presque tous les utilisateurs insatisfaits

Facteur R (borne inf´erieure)
90 80 70 60 50

MOS (borne inf´erieure)
4,34 4,03 3,60 3,10 2,58

4.4 E´valuation du MOS dans le simulateur

Le calcul du MOS se fait via un estimateur qui impl´emente le mod`ele E et qui dispose de la structure repr´esent´ee `a la Figure 4.2 pour sauvegarder des statistiques sur chaque ﬂot dont la QdE doit ˆetre ´evalu´ee. Pour chaque ﬂot identiﬁ´e par le quintuplet (adresse source, adresse destination, port source, port destination, protocole de transport), une fenˆetre de temps a ´et´e consid´er´ee pendant laquelle l’estimateur recueille des statistiques qui le permettent d’´evaluer le MOS. La fenˆetre de temps consid´er´ee est ´egale a` l’intervalle qui a ´et´e d´eﬁni pour l’´evaluation de la QdE. Les statistiques recueillies sont le d´elai, les pertes, la gigue, la quantit´e de paquets re¸cus et envoy´es.

identificateur 1 2

adresse source 10.1.1.2
10.1.4.2

adresse

port

destination source

137.65.14.5 5482

149.13.143.13 5687

3

174.89.217.119 149.13.143.13 7329

...

...

...

...

port destination protocole

5

UDP

1034

UDP

80

TCP

...

...

Temps (s)

paquets recus

5

69

10

118

15

52

...

...

paquets paquets perdus utilisés

0

69

1

118

0

52

...

...

délai moy. (ms) 13.518
21.8519
3.51217 ...

MOS
4.04092 3.95936 4.21624
...

Figure 4.2 Statistique par ﬂot

50

Le d´elai et la gigue sont calcul´ees d’apr`es les sp´eciﬁcation du protocole RTP [24]. Si Si repr´esente le temps ou` le paquet i a ´et´e envoy´e, et Ri temps d’arriv´ee du paquet i, alors pour deux paquets i et j le d´elai D est exprim´e comme suit :

D(i, j) = (Rj − Sj) − (Ri − Si)

(4.6)

Et la gigue associ´ee au paquet i est calcul´ee par la formule suivante :

(|D(i − 1, i)| − J(i − 1)) J(i) = J(i − 1) +
16

(4.7)

Avec J(i − 1) la gigue pour le paquet pr´ec´edent et D(i, i − 1) le d´elai entre le paquet i et le paquet i − 1. Pour les pertes de paquets, ont ´et´e comptabilis´es tous les paquets qui sont rejet´es a` n’importe quel endroit du r´eseau.

4.5 Impl´ementation des m´ecanismes
Les simulations ont ´et´e en utilisant la version NS-3.13 dans laquelle le mod`ele DiﬀServ n’est pas encore ´et´e int´egr´e. Cependant l’extension propos´ee dans [47] a ´et´e utilisee en l’int´egrant au simulateur. Cette extension impl´emente un mod`ele DiﬀServ avec ses principales fonctionnalit´es. Les algorithmes token bucket d´ecrit `a la Figure 2.2, three rate two colour marking (trTCM ) repr´esent´e a` la Figure 2.6 et single rate two colour marking srTCM d´ecrit a` la Figure 2.5) sont utilis´es pour faire du controˆle de traﬁc et du marquage. L’algorithme WRED est utilis´e pour la gestion des ﬁles d’attente pour les classes AF. Les ﬁles EF et DF sont g´er´ees avec l’algorithme DropTail. Au niveau de l’ordonnanceur, les algorithmes Weighted Round Robin (WRR) (Figure 2.8) et Rate-controlled Priority Queuing sont impl´ement´es. Certaines modiﬁcations ont ´et´e apport´ees `a ce mod`ele pour que le traitement des paquets prennent en compte l’information de la QdE. Le diagramme de la Figure 4.3 montre les principales classes qui ont ajout´ees au simulateur.
Pour qu’un ´emetteur ait acc`es aux informations de la QdE ´evalu´ees au r´ecepteur, il va les lire dans la structure de donn´ees dont un exemple est fourni `a la Figure 4.2. A travers une ´etiquette (label ) que NS-3 permet de ‘coller’ aux paquets, l’´emetteur introduit dans le r´eseau les informations de la QdE qu’il a lues. L’´etiquette ajout´ee au paquet joue le roˆle de l’entˆete ConEx puisque Re-ECN n’est pas encore impl´ement´e. Lorsqu’un paquet arrive a` un routeur, ce dernier acc`ede `a l’´etiquette pour y lire les informations de la QdE. Ainsi suivant la valeur du MOS et la tendance dans la variation du MOS, le paquet est aiguill´e vers la meilleure ﬁle d’attente.

DiffservQoE WRED
DiffservAqm

51
EmodelMosEstimation

DiffservQueue DiffservMeter

DiffservFlow DiffservSla

SRTCM

TokenBucket

TRTCM

Figure 4.3 Digramme des principales classes ajout´ees au simulateur

La tendance de la variation de l’information de la QdE repr´esent´ee par l’estimation du MOS est d´etermin´ee par une droite de r´egression qui est calcul´ee a` partir d’un fenˆetre de valeurs du MOS. Cette fenˆetre est conﬁgurable. La pente de cette droite renseigne sur la tendance de la variation des valeurs du MOS.
Ces op´erations ont ´et´e r´ealis´ees par deux classes principales que nous avons ajout´ees au simulateur.
La classe EmodelMosEstimation dont l’attribut principal est la structure de stockage pr´esent´ee a` la Figure 4.2 impl´emente l’estimateur de la QdE qui eﬀectue tous les traitements devant aboutir a` l’´evaluation de la QoE. Les principales m´ethodes sont :
– PacketSent (Ptr<Node>) : Cette m´ethode s’applique a` un nœud ´emetteur qui envoie du traﬁc pour lequel l’information de la QoE doit ˆetre ´evalu´ee. Pour chaque paquet qui est en train d’ˆetre envoy´e par ce nœud, la m´ethode assigne un identiﬁant correspondant au quintuplet (voir Figure 4.2) qui identiﬁe le ﬂot dans lequel le paquet appartient. Ensuite cette m´ethode ajoute au paquet une ´etiquette munie de cet identiﬁant de sorte que les

52
autres nœuds puissent identiﬁer le ﬂot auquel appartient le paquet sans avoir a` lire son entˆete. Enﬁn, si les derni`eres informations de la QdE pour le ﬂot sont disponibles, la m´ethode les rajoute au paquet via une ´etiquette. – PacketReceived (Ptr<Node>) : Appliqu´ee a` un nœud r´ecepteur, cette m´ethode d´etermine, pour chaque paquet d’un ﬂot qu’elle re¸coit, le d´elai et la gigue et sauvegarde ces informations jusqu’a` qu’elles soient utilis´ees pour d´eterminer la QdE. La dur´ee de sauvegarde d´epend de l’intervalle de calcul. – PacketDrop () : Cette m´ethode agit sur tous les nœuds entre l’exp´editeur et le destinataire pour faire le suivi de chaque d’un ﬂot en reportant tous les paquets qui sont perdus ou ´elimin´es par n’importe quel nœud du r´eseau – GetPeriodicFlowStat () : Cette m´ethode calcule a` intervalle ﬁxe l’information de la QoE pour chaque ﬂot et reporte l’information dans la structure de stockage de l’estimateur. – EmodelEstimation () : M´ethode impl´ementant l’algorithme d´ecrit dans la section 4.3 qui calcule le MOS. D’autre m´ethodes telles que TxPacketLogger(), RxPacketLogger(), DropPacketLogger(), QueuePacketLogger(), Ipv4PacketLogger(), GetSlope(), GetPeriodicFlowStat(), GetLastQoE() existent pour trouver la derni`ere information de la QoE pour un ﬂot donn´e, estimer le sens de variation de l’information de la QoE et faire sortir les statistiques pour analyses ult´erieures, etc.
La classe DiﬀServQoE maintient l’´etat des ﬁles d’attente WRED des routeurs cœur du r´eseau DiﬀServ dans des structures de donn´ees. Ses principales m´ethodes sont :
– PredictedDropProbability () : E´tant donn´e un paquet, cette m´ethode d´etermine avec quelle probabilit´e que ce paquet serait ´elimin´e s’il ´etait ins´er´e dans la ﬁle qui correspond a` sa classe ou dans les autres ﬁles de plus grande priorit´e.
– GetPredictedDelay () : En tenant compte du nombre d’octets pr´esent dans les diﬀ´erentes ﬁles et du poids relatif de chaque ﬁle, cette m´ethode estime le d´elai que passerait un paquet qui vient d’arriver au routeur s’il y ´etait ins´er´e.
– GetSuitableQueue () : Cette m´ethode permet de d´eterminer si le paquet qui arrive sera admis dans sa ﬁle par d´efaut ou dans la ﬁle sup´erieure. Cette d´ecision se base sur le d´elai pr´edit et la probabilit´e que le paquet soit ´elimin´e. Avant de prendre la d´ecision, elle v´eriﬁe le niveau d’occupation de la ﬁle et v´eriﬁe si ce niveau d’occupation est inf´erieure au seuil qui a ´et´e d´eﬁni pour qu’une ﬁle d’attente accepte des paquets provenant d’autres classes de service.
La classeDiﬀServQueue qui impl´emente les traitements eﬀectu´es par les routeurs a` la fronti`ere et a` l’int´erieur d’un domaine DiﬀServ a ´et´e modiﬁ´ee notamment en ajoutant la m´ethode QoEDeteriorated qui v´eriﬁe, lorsqu’un paquet arrive au routeur, si la QdE s’est

53
d´egrad´ee et, si n´ecessaire, le faire passer dans une ﬁle sup´erieure.
4.6 Simulation de la voix sur IP
Pour simuler la voix sur IP, le mod`ele pr´esent´e dans [48] a ´et´e utilis´e. On suppose que le codeur utilis´e est le G.711 avec an´eantisseur d’´echos. Le traﬁc fourni par le codeur est caract´eris´e par une succession de p´eriode active ou` il envoie des donn´ees (p´eriode ON) et de p´eriode de silence (p´eriode OFF). Pendant la p´eriode ON, les paquets sont envoy´es a intervalle r´egulier correspondant au temps de paqu´etisation a un d´ebit maximal de 29.6 kb/s. Typiquement, pour le codeur utilis´e, le temps de paqu´etisation est estim´ee a 20ms. Les p´eriodes ON et OFF sont estim´ees par une loi exponentielle de moyenne de 0.35 sec et 0.65 sec respectivement. Il s’ensuit que la charge utile des paquets VoIP sera de 172 octets (160 octets pour la voix et 12 octets pour l’entˆete RTP).
4.7 Plan d’exp´erience
Diverses simulations ont ´et´e r´ealis´ees pour ´evaluer la performance des m´ecanismes propos´es. Deux types de sc´enario ont ´et´e consid´er´es. Un sc´enario simple et un sc´enario complexe. La m´etrique principale qui sera ´evalu´ee dans les deux sc´enarios est le MOS. Le sc´enario simple a permis de voir la variation de la QdE au cours de la simulation avec et sans le m´ecanisme propos´e. Le sc´enario complexe, de son cot´e, a permis d’´evaluer globalement la QdE de l’application pour les diﬀ´erents cas simul´es. Dans tous les types de sc´enarios 4 types de traﬁc sont utilis´es. Le traﬁc VoIP pour lequel le m´ecanisme peut ˆetre appliqu´e, du traﬁc FTP et du traﬁc CBR avec UDP. Pour ce qui a trait a` l’ordonnancement, l’algorithme WRR a ´et´e utilis´e et les ﬁles AF1, AF2, AF3 et BE ont respectivement un poids de 8/20, 6/20, 4/20 et 2/20. Chaque ﬁle peut contenir au plus 100 paquets. Le seuil d´eﬁni pour le MOS est de 4.0, l’intervalle d’´evaluation est ﬁx´e a` 5 secondes. Rien n’est pr´ecis´e pour le taux d’occupation des ﬁles d’attente.
4.7.1 Sc´enario simple
Le sc´enario simple est un sc´enario peu charg´e constitu´e de 4 clients dont deux font de la voix sur IP. deux classes de traﬁc AF1 et AF2 ont ´et´e consid´er´ees. La classe AF2 a ´et´e surcharg´ee pour provoquer une d´egradation de la QdE du ﬂot VoIP de classe AF2 (voir Table 4.2). Le r´eseau de la Figure 4.4 a ´et´e simul´e pour ce sc´enario. Ce sc´enario vise essentiellement a` montrer la variation du MOS lorsque DiﬀServ est utilis´e seul et lorsque le feed-back de la

54 QdE est utilis´e dans la classiﬁcation.
Hote 1

Hote 2

2ms,

10Mb/s

Hote 3

2ms, 10Mb/s
2ms, 10Mb/s

Hote 4

2ms, 10Mb/s

2ms, 1Mb/s

2ms,Serveur 1 10Mb/s
2ms, 10Mb/s
Serveur 2

Figure 4.4 R´eseau du sc´enario simple

Tableau 4.2 Flots pour le sc´enario simple

No Flot
1 2 3 4

Source->Destination
Hote1 ->Serveur 1 Hote2 ->Serveur 2 Hote3 ->Serveur 1 Hote4 ->Serveur 1

Application
VoIP VoIP Traﬁc CBR Traﬁc CBR

Classe
AF1 AF2 AF2 AF2

55
Figure 4.5 Graphe de la variation du MOS pour le ﬂot 2 avec et sans le m´ecanisme Les simulations ont ´et´e r´ealis´ees avec et sans le m´ecanisme. Dans chaque cas, les variations des m´etriques du MOS, du d´elai moyen, et des pertes de paquets moyennes pour chacun des intervalles d’´evaluation du MOS ont ´et´e inventori´es. Lorsque le m´ecanisme n’est pas utilis´e la QdE du ﬂot de VoIP de classe AF2 exprim´ee par le MOS varie entre 1.28 et 2.31 avec une moyenne de 1.79. Avec de telles valeurs pour le MOS, la communication VoIP serait quasiment impossible. Lorsque le classiﬁcation prend en compte la QdE, les valeurs minimale, maximale et moyenne du MOS sont respectivement 1.49, 4.25 et 3.64. Ce qui assure une qualit´e acceptable pour la communication.

56 Figure 4.6 Variation des pertes pour le ﬂot 2 avec et sans le m´ecanisme Figure 4.7 Variation du d´elai pour le ﬂot 2 avec et sans le m´ecanisme

57
Il convient aussi de remarquer l’impact du m´ecanisme sur les autres m´etriques de performance du r´eseau. En eﬀet, les graphes des Figures 4.6 et 4.7 montrent l’impact du m´ecanisme sur la perte de paquets ainsi que sur le d´elai moyen exp´eriment´e par les paquets.
4.7.2 Sc´enario complexe
Ce type de sc´enario se base sur l’architecture de r´eseau repr´esent´ee `a la Figure 4.8. Le r´eseau est constitu´e de 24 sources dont 10 font de la voix sur IP `a un d´ebit moyen de 28kbps r´epartis entre les classes AF1 et AF2, 10 font du FTP avec des ﬂots r´epartis entre les classes AF2 et AF3 et les 4 autres envoient du traﬁc `a d´ebit constant (traﬁc CBR) de classe BE. Dix (10) sc´enarios ont ´et´e simul´es et dans chacun des cas le nombre de ﬂots de VoIP ont ´et´e gard´es constant tandis que la quantit´e des autres ﬂots a augment´e. Le Tableau 4.3 sp´eciﬁe pour chaque sc´enario le nombre de ﬂots et la proportion de traﬁc pour l’application VoIP.

Hôte 1

Serveur 1

2ms, 2Mb/s

Hôte 24

2ms, 2Mb/s

Routeur frontière

2ms, 2Mb/s

2ms, 2Mb/s

Routeur cœur

Routeur frontière

2ms, 10Mb/s

2ms, 2Mb/s

Récepteur 1

2ms 2Mb/s
2ms, 10Mb/s Récepteur 10

Figure 4.8 R´eseau du sc´enario complexe

Serveur 2

Les Tableaux 4.5 et 4.4 pr´esentent les r´esultats et comparent le cas ou` le m´ecanisme n’est pas utilis´e versus lorsqu’il est utilis´e. Le Tableau 4.4 montre les valeurs du MOS mesur´es par sc´enario. La valeur moyenne concerne toutes les communications tandis que la la valeur minimale indique la valeur du MOS pour la communication qui a la QdE relative la plus faible

58

Tableau 4.3 Sc´enarios simul´es

Sc´enario
1 2 3 4 5 6 7 8 9 10

Nombre de ﬂots
10 12 13 15 16 18 19 21 22 24

% Traﬁc VoIP
100 83.33 79.92 66.66 62.5 55.55 52.63 47.61 45.45 41.66

Tableau 4.4 R´esultats pour les diﬀ´erents sc´enarios avec et sans le m´ecanisme

Sc´enario
1 2 3 4 5 6 7 8 9 10

Moyenne(MOS) DiﬀServ DiﬀServ & QoE

4.23

4.23

4.20

4.24

4.14

4.20

4.08

4.16

3.59

3.81

3.65

3.72

3.63

3.74

3.41

3.57

3.36

3.50

3.27

3.50

Min(MOS) DiﬀServ DiﬀServ & QoE

4.04

4.04

4.16

4.21

3.98

4.11

3.8

4.04

3.06

3.64

3.16

3.43

3.10

3.48

3.17

3.29

3.04

3.37

2.86

3.35

Max (MOS) DiﬀServ DiﬀServ & QoE

4.25

4.25

4.26

4.25

4.25

4.25

4.25

4.25

4.03

3.99

4.05

3.94

4.05

3.95

3.73

3.78

3.63

3.59

3.57

3.67

et la valeur maximale indique la valeur du MOS pour la communication ayant la QdE relative la plus ´elev´ee des dix communications VoIP. Pour les sc´enarios 1 et 2, l’eﬀet du m´ecanisme n’est pas important puisque la valeur du MOS est sup´erieur `a 4 avec ou sans le m´ecanisme propos´e. En revanche les sc´enarios subs´equents montrent l’eﬀet du m´ecanisme notamment `a partir du sc´enario 4. Le Tableau 4.5 montre le gain obtenu pour les diﬀ´erents sc´enarios.
Les graphes des Figures 4.9, 4.11, 4.12, 4.13 et 4.14 suivantes comparent respectivement le MOS pour les traﬁc VoIP de la classe AF2, le MOS, le d´elai moyen, les pertes moyennes et la gigue pour tous ﬂots VoIP en fonction de ce que repr´esente le traﬁc VoIP du traﬁc total dans le cas ou` le m´ecanisme propos´e est utilis´e versus lorsqu’il n’est pas utilis´e. L’am´elioration globale qui se fait, comme le montre le graphe de la Figure 4.11, est due `a l’am´elioration de la QdE des traﬁcs VoIP de la classe AF2 (voir le graphe de la Figure 4.9). Le graphe de la

59

Tableau 4.5 Gain par rapport au cas ou` le m´ecanisme n’es pas utilis´e

Sc´enario
1 2 3 4 5 6 7 8 9 10

%Min(MOS)
0 1.18 3.16 5.94 15.93 7.87 10.91 3.64 9.79 14.62

% Max(MOS)
0 - 0.23
0 0 -1 -2.79 -2.53 1.32 -1.11 2.72

%Moyenne
0 0.23 1.42 1.92 5.77 1.88 2.94 4.48
4 6.83

Figure 4.10 aﬃche le d´elai moyen pour les ﬂots AF2 dans les deux cas. Lorsque le m´ecanisme est utilis´e le d´elai maximal exp´eriment´e par les paquets est de 258 ms avec une moyenne de 173 ms et lorsqu’il n’est pas utilis´e, le d´elai max est de 269 ms avec une moyenne de 173 ms.
La Figure 4.15 montre le peu d’impact qu’a` le m´ecanisme propos´e sur la qualit´e des communications de la classe AF1 autrement dit le m´ecanisme utilis´e pour faire passer certains paquets de AF2 dans AF1 n’aﬀecte pas la qualit´e qu’auraient duˆ avoir les traﬁcs de classe AF1.
Le graphique a` baˆtons de la Figure 4.16 compare le d´ebit des traﬁcs d’arri`ere plan avec le m´ecanisme versus sans le m´ecanisme. Les r´esultats montrent que le d´ebit a tr`es peu vari´e dans les deux cas.
Tout compte fait les r´esultats montrent que le fait de prendre en compte l’information du feed-back de la qualit´e d’exp´erience a une incidence sur les performances globales du r´eseau et permet par exemple, comme le montre la Figure 4.13, de diminuer dans ce cas le taux de perte de paquets. Comme il en sera mention dans la section 5.3 du chapitre suivant, il demeure encore possible d’avoir de meilleurs r´esultats en jouant sur les param`etres tels que l’intervalle d’´evaluation de la QdE, le niveau d’occupation d’une ﬁle pour qu’elle accepte a` un instant donn´e du traﬁc d’autres classes et le seuil d´eﬁni pour le MOS.

60 Figure 4.9 Graphe du MOS pour les ﬂots AF2
Figure 4.10 D´elai moyen des ﬂots AF2

61 Figure 4.11 Graphe de la moyenne du MOS pour tous les ﬂots VoIP
Figure 4.12 Graphe du d´elai moyen tous les ﬂots VoIP

62 Figure 4.13 Graphe des pertes moyennes tous les ﬂots VoIP
Figure 4.14 Graphe de la gigue moyenne des ﬂots VoIP

63 Figure 4.15 Graphe de la moyenne du MOS pour tous les ﬂots AF1
Figure 4.16 Graphique du debit des traﬁcs d’arri`ere-plan

64
CHAPITRE 5
CONCLUSION
Dans le cadre de cette maˆıtrise, nous avons d´evelopp´e un nouveau m´ecanisme qui permet d’am´eliorer le niveau de satisfaction des usagers des services dont la qualit´e de l’exp´erience (QdE) peut ˆetre d´etermin´ee et retransmise dans le r´eseau. Dans les sections suivantes, une synth`ese du travail sera eﬀectu´ee ensuite, nous ferons ressortir ses limitations et enﬁn nous fournirons quelques pistes pour des am´eliorations futures.
5.1 Synth`ese des travaux
Dans ce m´emoire, nous avons propos´e un nouveau type de traitement de paquets qui prend en compte l’information de la QdE, lorsqu’elle est disponible, lors de la classiﬁcation des paquets faite par les routeurs internes `a un domaine DiﬀServ. Ce nouveau mode de traitement des paquets n’est que l’une des possibilit´es de l’utilisation du m´ecanisme de feedback que nous avons ´egalement propos´e pour faire la r´etroaction de l’information de la QdE. Pour permettre aux routeurs d’avoir acc`es `a l’information de la QdE, l’´emetteur l’´ecrit dans l’entˆete des paquets lorsque le protocole de la couche 3 est IPv6 soit en utilisant les bits restants de l’entˆete d’option destination du protocole ConEx ou en cr´eant une autre entˆete de destination. Dans le cas de IPv4, vu qu’il ne reste qu’un seul bit, l’´emetteur ne fait qu’indiquer par ce bit si la QdE s’est d´egrad´ee ou non. Pour ´evaluer les performances des m´ecanismes propos´es, nous les avons simul´es avec le simulateur NS-3.13 auquel nous avons int´egr´e un module DiﬀServ que nous avons modiﬁ´e. Les simulations eﬀectu´ees, en utilisant du traﬁc VoIP, montrent que les m´ecanismes propos´es permettent d’am´eliorer le niveau de la QdE pour les ﬂots VoIP et, en mˆeme temps, am´eliorer les m´etriques de qualit´e de service.
5.2 Limitations des travaux
Les m´ecanismes propos´es souﬀrent de quelques limitations. Le m´ecanisme de feed-back propos´e ne pourra pas cohabiter avec Re-ECN si ce dernier est adopt´e par l’IETF pour les applications utilisant le protocole de transport TCP sur IPv4, car le seul bit qui permettrait de signaler la d´egradation de la QdE aux routeurs est utilis´e par le protocole Re-ECN. L’application faite a` DiﬀServ, via le nouveau m´ecanisme de classiﬁcation des paquets aux

65
routeurs internes a` un domaine DiﬀServ, peut conduire, dans certains cas, `a perdre la s´equence des paquets, ce qui n´ecessitera d’avoir des m´ecanismes de r´e-ordonnancement a` la r´eception.
Pour ce qui concerne les simulations, ConEx/Re-ECN n’est pas impl´ement´e pour transmettre l’information de la QdE dans le r´eseau. Les informations de la QdE pour tous les ﬂots sont stock´ees dans une seule structure dans laquelle les nœuds r´ecepteurs et ´emetteurs ´ecrivent et lisent respectivement les informations relatives `a la QdE. Le fait, pour les ´emetteurs, d’aller lire directement l’information de la QdE, la rend disponible pour ces derniers plus rapidement qu’elle ne le serait dans la r´ealit´e. Dans la r´ealit´e, il faudra au moins la moiti´e d’un Round Trip Time (RTT) avant que l’´emetteur ne sache la derni`ere information de QdE estim´ee au r´ecepteur. D’un autre cot´e, l’application VoIP avec sa pile protocolaire n’est pas encore impl´ement´ee dans la version du simulateur utilis´e. Ainsi pour la simuler, nous avons utilis´e un mod`ele th´eorique qui est fourni dans [48]. En outre, dans l’´evaluation de la QdE par le mod`ele E (E-model ), nous avons suppos´e que les pertes des paquets dans le r´eseau se font de fa¸con al´eatoire, mais en r´ealit´e, pour l’application VoIP, les pertes de paquet se produisent en rafale, autrement dit, a` un instant donn´e, il peut y avoir beaucoup de pertes de paquets et aucune l’instant d’apr`es. Il r´esulte de ces consid´erations que les r´esultats obtenus ne sont que des approximations.
5.3 Travaux futurs
Plusieurs autres travaux peuvent d´ecouler des m´ecanisme propos´es en guise de travaux futurs. Des am´eliorations peuvent ˆetre apport´ees a` l’application faite a` DiﬀServ en utilisant l’information de la QoE au niveau des traitements eﬀectu´es par les routeurs situ´es a` la fronti`ere d’un domaine DiﬀServ dans le controˆle de traﬁc, par exemple. D’autre part, il serait int´eressant d’avoir un m´ecanisme de controˆle d’acc`es bas´e sur la QoE de fac¸on `a bloquer certaines communications si elles vont d´et´eriorer la QdE, ou si l’´etat du r´eseau laisse pr´evoir pour ces derni`eres, que les contraintes de QdE ne pourront pas ˆetre satisfaites. De plus, des m´ecanismes de s´ecurit´e seront n´ecessaires pour s’assurer que des nœuds ne trichent pas en alt´erant la QdE ´evalu´ee au r´ecepteur. Enﬁn, le feed-back de la QdE peut ˆetre utilis´e dans d’autres m´ecanismes d’active queue management comme codel [49] ou d’autres m´ecanismes de QdS.
Concernant les r´esultats, l’utilisation d’un testbed dans lequel de vraies communications VoIP seraient eﬀectu´ees permettrait d’´evaluer avec d’avantage de pr´ecisions l’impact du nouveau m´ecanisme sur les communications. Pour avoir des r´esultats reﬂ´etant d’avantage la r´ealit´e, il serait int´eressant d’utiliser les protocoles qui ont ´et´e mentionn´es pour avoir le feedback de l’information de la QdE et l’ins´erer dans le r´eseau. Pour une meilleure ´evaluation

66
de la QdE par le mod`ele de E, le mod`ele de Markov trouv´e dans [50] peut ˆetre utilis´e pour prendre en compte la caract´eristique en rafale des pertes de paquets.

67
RE´ FE´ RENCES
[1] ITU-T, P. 800 : Methods for subjective determination of transmission quality, Std., 1996. [2] H. Tran et A. Mellouk, “Qoe model driven for network services,” Wired/Wireless Internet
Communications, 264–277, 2010. [3] ETSI, “Human factors ; quality of experience (qoe) requirements or real-time communi-
cation services,” ETSI, France, Rapport technique, 2009. [4] E. Crawley et R. Nair, “A framework for qos-based routing in the internet,” RFC2386,
Aouˆt 1998. [En ligne]. Disponible : http://www.ietf.org/rfc/rfc2386.txt [5] H. Rifai, S. Mohammed, et A. Mellouk, “A brief synthesis of qos-qoe methodologies,”
2011 10th International Symposium on Programming and Systems. Piscataway, NJ, USA : IEEE, 2011, 32–8, 2011 10th International Symposium on Programming and Systems, 25-27 April 2011. [6] R. Serral-Gracia`, E. Cerqueira, M. Curado, M. Yannuzzi, E. Monteiro, et X. Masip-Bruin, “An overview of quality of experience measurement challenges for video applications in ip networks,” Wired/Wireless Internet Communications, 252–263, 2010. [7] ITU-T, “G. 107 : The e model, a computational model for use in transmission planning,” Intl. Telecom. Union, 2005. [8] S. Khirman et P. Henriksen, “Relationship between quality-of-service and quality-ofexperience for public internet service,” 2002. [9] E. Ekudden, R. Hagen, I. Johansson, et J. Svedberg, “The adaptive multi-rate speech coder.” IEEE, 1999, 117–119. [10] T. Hai Anh, A. Mellouk, et S. Hoceini, “User to user adaptive routing based on qoe,” 2011 10th International Symposium on Programming and Systems. Piscataway, NJ, USA : IEEE, 2011, 39–45, 2011 10th International Symposium on Programming and Systems, 25-27 April 2011. [11] S. Floyd, R. Gummadi, et S. Shenker, “Adaptive red : An algorithm for increasing the robustness of red active queue management,” 2001. [12] C. Semeria, “Supporting diﬀerentiated service classes : queue scheduling disciplines,” Juniper networks, 2001. [13] A. Capone, L. Fratta, et F. Martignon, “Dynamic online qos routing schemes : Performance and bounds,” Computer Networks, vol. 50, no. 7, 966–981, 2006.

68
[14] S. Sahu, P. Nain, C. Diot, V. Firoiu, et D. Towsley, “On achievable service diﬀerentiation with token bucket marking for tcp,” vol. 28. ACM, 2000, 23–33.
[15] R. Braden, D. Clark, et S. Shenker, “Integrated services in the internet architecture,” RFC 1633, Juin 1994. [En ligne]. Disponible : http://tools.ietf.org/html/rfc1633
[16] R. Braden, L. Zhang, S. Berson, S. Herzog, et S. Jamin, “Resource reservation protocol (rsvp),” RFC 2205, IETF, Rapport technique, 1997.
[17] J. Wroclawski, “The use of rsvp with ietf integrated services,” RFC 2210, 1997. [En ligne]. Disponible : http://www.ietf.org/rfc/rfc2210.txt
[18] S. Black, D. Carlson, M. Davies, E. Wang, et Z. Weiss, “An architecture for diﬀerentiated services,” RFC 2475, D´ecembre 1998. [En ligne]. Disponible : http://www.ietf.org/rfc/rfc2475.txt
[19] J. Heinanen et R. Guerin, “A single rate three color marker,” RFC 2697, 1999. [En ligne]. Disponible : http://tools.ietf.org/html/rfc2697
[20] J. Heinanen et R. Guerin, “A two rate three color marker,” RFC 2698, 1999. [En ligne]. Disponible : http://tools.ietf.org/html/rfc2698
[21] V. Jacobson, K. Nichols, et K. Poduri, “An expedited forwarding phb,” RFC 2598, Juin 1999. [En ligne]. Disponible : http://www.ietf.org/rfc/rfc2598.txt
[22] J. Heinanen, F. Baker, W. Weiss, et J. Wroclawski, “Assured forwarding phb group,” RFC 2597, Juin 1999. [En ligne]. Disponible : http://www.ietf.org/rfc/rfc2597.txt
[23] K. Ramakrishnan, S. Floyd, D. Black et al., “The addition of explicit congestion notiﬁcation (ecn) to ip,” RFC 3168, 2001. [En ligne]. Disponible : http: //www.ietf.org/rfc/rfc3168.txt
[24] H. Schulzrinne, “Rtp : A transport protocol for real-time applications,” RFC 1889, Janvier 1996. [En ligne]. Disponible : http://www.ietf.org/rfc/rfc1889.txt
[25] T. Friedman, R. Caceres, et A. Clark, “Rtp control protocol extended reports (rtcp xr),” RFC 3611, Novembre 2003. [En ligne]. Disponible : http://tools.ietf.org/rfc/rfc3611.txt
[26] M. Westerlund, C. Perkins, K. Carlberg, I. Johansson et al., “Explicit congestion notiﬁcation (ecn) for rtp over udp,” RFC 6679, Aouˆt 2012. [En ligne]. Disponible : http://tools.ietf.org/html/rfc6679
[27] T. Moncaster, A. Jacquet, B. Briscoe, et A. Smith, “Re-ecn : Adding accountability for causing congestion to tcp/ip,” Avril 2012. [En ligne]. Disponible : http: //tools.ietf.org/id/draft-briscoe-conex-re-ecn-tcp-00.txt
[28] “Congestion exposure (conex). ietf working group.” [En ligne]. Disponible : http://datatracker.ietf.org/wg/conex/charter.

69
[29] S. Krishnan, M. Kuehlewind, et C. Ucendo, “Ipv6 destination option for conex,” Octobre 2011. [En ligne]. Disponible : http://tools.ietf.org/html/draft-ietf-conex-destopt-01
[30] V. Reguera, F. lvarez Paliza, W. Godoy Jr, et E. Garc´ıa Ferna´ndez, “On the impact of active queue management on voip quality of service,” Computer Communications, vol. 31, no. 1, 73–87, 2008.
[31] M. Parris, K. Jeﬀay, et F. Smith, “Lightweight active router-queue management for multimedia networking,” vol. 3654, 1999, 162–174.
[32] C. Hollot, V. Misra, D. Towsley, et W. Gong, “On designing improved controllers for aqm routers supporting tcp ﬂows,” vol. 3. IEEE, 2001, 1726–1734 vol. 3.
[33] S. Athuraliya, S. Low, V. Li, et Q. Yin, “Rem : Active queue management,” Network, IEEE, vol. 15, no. 3, 48–53, 2001.
[34] S. Kunniyur et R. Srikant, “An adaptive virtual queue (avq) algorithm for active queue management,” Networking, IEEE/ACM Transactions on, vol. 12, no. 2, 286–299, 2004.
[35] M. Fiedler, T. Hossfeld, et T.-G. Phuoc, “A generic quantitative relationship between quality of experience and quality of service,” Network, IEEE, vol. 24, no. 2, 36–41, 2010.
[36] Q. Zizhi, S. Lingfen, N. Heilemann, et E. Ifeachor, “A new method for voip quality of service control use combined adaptive sender rate and priority marking,” vol. 3, 1473– 1477 Vol.3, Juin 2004.
[37] H. Sanneck, N. Le, M. Haardt, et W. Mohr, “Selective packet prioritization for wireless voice over ip,” 2001.
[38] N. T. Moura, B. A. Vianna, C. V. N. Albuquerque, V. E. F. Rebello, et C. Boeres, “Mos-based rate adaption for voip sources,” Communications, 2007. ICC ’07. IEEE International Conference on, Juin 2007, 628–633.
[39] K. Fujimoto, S. Ata, et M. Murata, “Adaptive playout buﬀer algorithm for enhancing perceived quality of streaming applications,” vol. 3. IEEE, 2002, 2451–2457 vol. 3.
[40] E. Jammeh, I. Mkwawa, A. Khan, M. Goudarzi, L. Sun, et E. Ifeachor, “Quality of experience (qoe) driven adaptation scheme for voice/video over ip,” Telecommunication Systems, vol. 49, no. 1, 99–111, 2012.
[41] G. Rubino, “The psqa project.” [En ligne]. Disponible : http://www.irisa.fr/armor/ lesmembres/Rubino/myPages/psqa.html
[42] O. Hrvoje et Z. Drago, “Adapted e-model and dynamic adjustment of voip parameters,” Telecommunications (ConTEL), Proceedings of the 2011 11th International Conference on, Juin 2011, 481 –486.
[43] “Network simulator. ns-3.” [En ligne]. Disponible : http://www.nsnam.org/

70
[44] “wireshark.” [En ligne]. Disponible : http://www.wireshark.org/ [45] “Eclipse ide for c/c++ developers.” [En ligne]. Disponible : http://www.eclipse.org/
downloads/moreinfo/c.php [46] “Waf.” [En ligne]. Disponible : http://code.google.com/p/waf/ [47] S. Ramroop, “A diﬀserv model for the ns-3 simulator.” [En ligne]. Disponible :
http://www.eng.uwi.tt/depts/elec/staﬀ/rvadams/sramroop/index.htm [48] H. Hassan, J. Garcia, et C. Bockstal, “Aggregate traﬃc models for voip applications,”
Digital Telecommunications” 2006. ICDT’06. International Conference on. IEEE, 2006, 70–70. [49] K. Nichols et V. Jacobson, “Controlling queue delay,” Communications of the ACM, vol. 55, no. 7, 42–50, 2012. [50] ETSI, “Quality of service (qos) measurement methodologies,” 102 024-5 v4. 1.1, Janvier 2003.

